/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2017
 * @compiler Bridge.NET 16.3.0
 */
Bridge.assembly("CirnoGame", function ($asm, globals) {
    "use strict";

    Bridge.define("CirnoGame.GameMode", {
        statics: {
            fields: {
                TeamBattle: null,
                DeathMatch: null,
                gameModes: null
            },
            ctors: {
                init: function () {
                    Bridge.ready(this.init);
                }
            },
            methods: {
                GetGameModesOfType: function (type) {
                    return new (System.Collections.Generic.List$1(CirnoGame.GameMode)).$ctor1(System.Linq.Enumerable.from(CirnoGame.GameMode.gameModes).where(function (G) {
                            return G.ModeType === type;
                        }));
                },
                GetGameModeByName: function (name) {
                    var ret = new (System.Collections.Generic.List$1(CirnoGame.GameMode)).$ctor1(System.Linq.Enumerable.from(CirnoGame.GameMode.gameModes).where(function (G) {
                            return Bridge.referenceEquals(G.Name, name);
                        }));
                    if (ret.Count > 0) {
                        return ret.getItem(0);
                    }
                    return null;
                },
                init: function () {
                    if (CirnoGame.GameMode.TeamBattle == null) {
                        CirnoGame.GameMode.gameModes = new (System.Collections.Generic.List$1(CirnoGame.GameMode)).ctor();
                        CirnoGame.GameMode.TeamBattle = new CirnoGame.GameMode("Team Battle");
                        CirnoGame.GameMode.TeamBattle.Description = "2 teams battle with limited lives\nuntil only 1 team remains.";
                        CirnoGame.GameMode.DeathMatch = new CirnoGame.GameMode("Death Match");
                        CirnoGame.GameMode.DeathMatch.Description = "A free for all match with\nlimited lives.";
                        CirnoGame.GameMode.DeathMatch.Teams = false;
                    }
                }
            }
        },
        $entryPoint: true,
        props: {
            Teams: false,
            StartingLives: 0,
            Survival: false,
            AllowOnlinePlay: false,
            AllowCharacterSelect: false,
            NumberOfPlayers: 0,
            RespawnTime: 0,
            Name: null,
            ModeType: 0,
            unlocked: false,
            Description: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.Teams = true;
                this.StartingLives = 3;
                this.Survival = true;
                this.AllowOnlinePlay = true;
                this.AllowCharacterSelect = true;
                this.NumberOfPlayers = 6;
                this.RespawnTime = 390;
                this.Name = name;
                this.ModeType = CirnoGame.GameMode.ModeTypes.Skirmish;
                this.Description = System.String.concat("Missing description for ", name);
                this.unlocked = true;
                CirnoGame.GameMode.gameModes.add(this);
            }
        }
    });

    Bridge.define("CirnoGame.EntityBehavior", {
        fields: {
            enabled: false,
            FramesPerTick: 0,
            entity: null
        },
        props: {
            BehaviorName: null
        },
        ctors: {
            init: function () {
                this.enabled = true;
                this.FramesPerTick = 0;
            },
            ctor: function (entity) {
                this.$initialize();
                this.entity = entity;
                if (Bridge.referenceEquals(this.BehaviorName, "") || this.BehaviorName == null) {
                    var test = Bridge.getType(this);
                    var FN = test["$$fullname"];
                    //Helper.Log("FN:" + FN);
                    var s = FN.split(".");
                    this.BehaviorName = s[System.Array.index(((s.length - 1) | 0), s)];
                    //BehaviorName = GetType().FullName;
                    //GetType().GetClassName

                }
            }
        },
        methods: {
            Update: function () {

            },
            Draw: function (g) { },
            SendCustomEvent: function (evt, triggerflush) {
                if (triggerflush === void 0) { triggerflush = false; }
                var D = { };
                D.I = this.entity.ID;
                D.D = evt;
                //D.T = this.GetType().FullName;
                D.T = this.BehaviorName;
                this.entity.Game.SendEvent("CBE", D, triggerflush);
            },
            CustomEvent: function (evt) {

            }
        }
    });

    Bridge.define("CirnoGame.Animation", {
        fields: {
            Images: null,
            _currentImage: null,
            CurrentFrame: 0,
            ImageSpeed: 0,
            Position: null,
            AnimationTimeElapsed: 0,
            StretchWidth: 0,
            StretchHeight: 0,
            Rotation: 0,
            Alpha: 0,
            Looping: false,
            Looped: false,
            FrameChanged: false,
            Flipped: false,
            _transformed: false,
            _shadow: 0,
            _shadowColor: null,
            BufferNeedsRedraw: false,
            _hueColor: null,
            _hueRecolorStrength: 0,
            _buffer: null,
            _bg: null
        },
        props: {
            CurrentImage: {
                get: function () {
                    return this._currentImage;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._currentImage, value)) {
                        this.BufferNeedsRedraw = true;
                    }
                    this._currentImage = value;

                }
            },
            X: {
                get: function () {
                    return this.Position.X;
                },
                set: function (value) {
                    this.Position.X = value;
                }
            },
            Y: {
                get: function () {
                    return this.Position.Y;
                },
                set: function (value) {
                    this.Position.Y = value;
                }
            },
            Shadow: {
                get: function () {
                    return this._shadow;
                },
                set: function (value) {
                    if (this._shadow !== value) {
                        this._shadow = value;
                        this.BufferNeedsRedraw = true;
                    }
                }
            },
            Shadowcolor: {
                get: function () {
                    return this._shadowColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._shadowColor, value)) {
                        this._shadowColor = value;
                        this.BufferNeedsRedraw = true;
                    }
                }
            },
            HueColor: {
                get: function () {
                    return this._hueColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._hueColor, value)) {
                        this.BufferNeedsRedraw = true;
                    }
                    this._hueColor = value;

                }
            },
            HueRecolorStrength: {
                get: function () {
                    return this._hueRecolorStrength;
                },
                set: function (value) {
                    if (this._hueRecolorStrength !== value) {
                        this.BufferNeedsRedraw = true;
                    }
                    this._hueRecolorStrength = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.StretchWidth = 0;
                this.StretchHeight = 0;
                this.Rotation = 0;
                this.Alpha = 1;
                this.Looping = true;
                this.Looped = false;
                this.FrameChanged = false;
                this.Flipped = false;
                this._transformed = false;
                this.BufferNeedsRedraw = true;
            },
            ctor: function (data) {
                this.$initialize();
                this.Images = data;
                if (this.Images == null) {
                    this.Images = new (System.Collections.Generic.List$1(HTMLImageElement)).ctor();
                }
                this.ImageSpeed = 1.0;
                this.Position = new CirnoGame.Vector2();
                this.AnimationTimeElapsed = 0;
                this.Shadow = 0;
                this.Shadowcolor = "#FFFFFF";
                this.HueColor = "";
                this.HueRecolorStrength = 0.6;
                this._buffer = document.createElement("canvas");
                this._bg = this._buffer.getContext("2d");
                if (this.Images.Count > 0) {
                    this.SetImage();
                }
            }
        },
        methods: {
            Update: function () {
                var LI = this.CurrentImage;
                var last = Bridge.Int.clip32(this.CurrentFrame);
                this.CurrentFrame += this.ImageSpeed;
                var current = Bridge.Int.clip32(this.CurrentFrame);
                if (current !== last) {
                    if (this.Images.Count > 0) {
                        while (current >= this.Images.Count && current > 0) {
                            if (this.Looping) {
                                current = (current - this.Images.Count) | 0;
                                this.CurrentFrame -= this.Images.Count;
                            } else {
                                this.CurrentFrame -= this.ImageSpeed;
                            }
                        }
                        while (current < 0) {
                            current = (current + this.Images.Count) | 0;
                            this.CurrentFrame += this.Images.Count;
                        }
                    }
                    this.SetImage();
                }

                this.Looped = false;
                if (!Bridge.referenceEquals(LI, this.CurrentImage)) {
                    this.FrameChanged = true;
                    if ((this.ImageSpeed > 0 && current === 0) || ((this.ImageSpeed < 0 && current === ((this.Images.Count - 1) | 0)))) {
                        this.Looped = true;
                    }
                } else {
                    this.FrameChanged = false;
                }
                this.AnimationTimeElapsed = (this.AnimationTimeElapsed + 1) | 0;
            },
            ChangeAnimation: function (ani, reset) {
                if (reset === void 0) { reset = true; }
                if (reset) {
                    this.CurrentFrame = 0;
                    this.AnimationTimeElapsed = 0;
                }
                this.Images = ani;
                //CurrentImage = Images[(int)CurrentFrame];
                this.SetImage();
            },
            SetImage: function () {
                if (this.Images.Count < 2) {
                    this.CurrentFrame = 0;
                } else {
                    var ln = this.Images.Count;
                    while (this.CurrentFrame < 0) {
                        this.CurrentFrame += ln;
                    }
                    while (this.CurrentFrame >= ln) {
                        this.CurrentFrame -= ln;
                    }
                }
                var current = Bridge.Int.clip32(this.CurrentFrame);
                if (current >= 0 && current < this.Images.Count) {
                    this.CurrentImage = this.Images.getItem(current);
                }
            },
            Draw: function (g) {
                this.Draw$1(g, this.Position);
            },
            Draw$1: function (g, position) {
                var x = position.X;
                var y = position.Y;
                if (this.CurrentImage == null) {
                    var current = Bridge.Int.clip32(this.CurrentFrame);
                    if (current >= 0 && current < this.Images.Count) {
                        this.CurrentImage = this.Images.getItem(current);
                    }
                    if (this.CurrentImage == null) {
                        return;
                    }
                }
                var X = x;
                var Y = y;
                var lastalpha = g.globalAlpha;
                var centered = false;
                var useBuffer = false;
                if (!Bridge.referenceEquals(this.HueColor, "")) {
                    if (this.BufferNeedsRedraw) {
                        var adv = true;
                        this._bg.globalCompositeOperation = "source-over";
                        this._buffer.width = this.CurrentImage.width;
                        this._buffer.height = this.CurrentImage.height;
                        this._bg.drawImage(this.CurrentImage, 0.0, 0.0);
                        this._bg.globalAlpha = this.HueRecolorStrength;
                        this._bg.globalCompositeOperation = "hue";
                        this._bg.fillStyle = this.HueColor;
                        this._bg.fillRect(0, 0, this._buffer.width, this._buffer.height);

                        if (adv) {
                            this._bg.globalAlpha = (1 + this.HueRecolorStrength) / 2.0;
                            this._bg.globalCompositeOperation = "source-over";
                            this._bg.fillRect(0, 0, this._buffer.width, this._buffer.height);
                        }

                        this._bg.globalAlpha = 1;
                        if (adv) {
                            this._bg.globalCompositeOperation = "luminosity";
                            this._bg.drawImage(this.CurrentImage, 0.0, 0.0);
                        }
                        this._bg.globalCompositeOperation = 'destination-in';
                        this._bg.drawImage(this.CurrentImage, 0.0, 0.0);
                        if (adv) {
                            this._bg.globalCompositeOperation = "hue";
                            this._bg.globalAlpha = this.HueRecolorStrength * 0.4;
                            this._bg.drawImage(this.CurrentImage, 0.0, 0.0);
                        }

                    }
                    useBuffer = true;
                }
                if (this.Alpha < 1) {
                    if (this.Alpha <= 0) {
                        return;
                    }
                    g.globalAlpha = g.globalAlpha * this.Alpha;
                }
                //if (rotation != 0)
                {
                    var x2 = this.CurrentImage.width / 2.0;
                    var y2 = this.CurrentImage.height / 2.0;

                    X = -x2;
                    Y = -y2;
                    if (!this._transformed) {
                        g.save();
                        this._transformed = true;
                    }
                    g.translate(x + x2, y + y2);
                    centered = true;
                    g.rotate(this.Rotation);
                }
                if (this.Flipped) {
                    if (!this._transformed) {
                        g.save();
                        this._transformed = true;
                    }
                    g.scale(-1, 1);
                    //don't translate if it's centered.
                    if (!centered) {
                        g.translate(this.CurrentImage.width, 0);
                    }
                }
                if (this.Shadow > 0) {
                    g.shadowBlur = this.Shadow;
                    g.shadowColor = this.Shadowcolor;
                    if (!useBuffer && this.BufferNeedsRedraw) {
                        this._bg.shadowBlur = 0;
                        this._buffer.width = this.CurrentImage.width;
                        this._buffer.height = this.CurrentImage.height;
                        this._bg.drawImage(this.CurrentImage, 0.0, 0.0);
                        useBuffer = true;
                        //BufferNeedsRedraw = true;
                    }
                    useBuffer = true;
                    //if ((useBuffer && BufferNeedsRedraw) || Rotation!=0 || true)
                    if (this.BufferNeedsRedraw) {
                        var C = CirnoGame.Helper.CloneCanvas(this._buffer);
                        var CG = CirnoGame.Helper.GetContext(C);
                        this._buffer.width = (this._buffer.width + Bridge.Int.clip32(this.Shadow * 2)) | 0;
                        this._buffer.height = (this._buffer.height + Bridge.Int.clip32(this.Shadow * 2)) | 0;
                        this._bg.shadowBlur = this.Shadow;
                        this._bg.shadowColor = this.Shadowcolor;
                        this.drawWithShadows(this._bg, C, this.Shadow, this.Shadow, 0, 0, this.Shadow / 3.0);
                        useBuffer = true;
                    }
                    X -= this.Shadow;
                    Y -= this.Shadow;
                    g.shadowBlur = 0;
                }

                if (this.StretchWidth === 0 && this.StretchHeight === 0) {
                    if (this.Shadow > 0 && false) {
                        var I = this.CurrentImage;
                        if (useBuffer) {
                            I = this._buffer;
                        }
                        this.drawWithShadows(g, I, X, Y, 0, 0, this.Shadow / 3);
                    } else {
                        if (!useBuffer) {
                            g.drawImage(this.CurrentImage, X, Y);
                        } else {
                            g.drawImage(this._buffer, X, Y);
                        }
                    }
                } else {
                    if (this.Shadow > 0 && false) {
                        var I1 = this.CurrentImage;
                        if (useBuffer) {
                            I1 = this._buffer;
                        }
                        this.drawWithShadows(g, I1, X, Y, this.StretchWidth, this.StretchHeight, this.Shadow / 3);
                    } else {
                        if (!useBuffer) {
                            g.drawImage(this.CurrentImage, X, Y, this.StretchWidth, this.StretchHeight);
                        } else {
                            g.drawImage(this._buffer, X, Y, this.StretchWidth, this.StretchHeight);
                        }
                    }
                }
                if (this._transformed) {
                    g.restore();
                    this._transformed = false;
                }
                if (this.Shadow > 0) {
                    g.shadowBlur = 0;
                }
                if (this.Alpha < 1) {
                    g.globalAlpha = lastalpha;
                }
                this.BufferNeedsRedraw = false;
            },
            drawWithShadows: function (g, I, X, Y, W, H, size) {
                if (W === 0) {
                    W = I.width;
                    H = I.height;
                }
                g.shadowOffsetX = -size;
                g.drawImage(I, X, Y, W, H);
                g.shadowOffsetX = size;
                g.drawImage(I, X, Y, W, H);
                g.shadowOffsetX = 0;
                g.shadowOffsetY = -size;
                g.drawImage(I, X, Y, W, H);
                g.shadowOffsetY = size;
                g.drawImage(I, X, Y, W, H);

                g.shadowOffsetY = 0;
            }
        }
    });

    Bridge.define("CirnoGame.AnimationLoader", {
        statics: {
            fields: {
                __this: null
            },
            props: {
                _this: {
                    get: function () {
                        if (CirnoGame.AnimationLoader.__this == null) {
                            CirnoGame.AnimationLoader.__this = new CirnoGame.AnimationLoader();
                            throw new System.Exception("Animation loader not initiated.");
                        }
                        return CirnoGame.AnimationLoader.__this;
                    }
                }
            },
            methods: {
                Init: function (Archive) {
                    CirnoGame.AnimationLoader.__this = new CirnoGame.AnimationLoader();
                    CirnoGame.AnimationLoader.__this.Archive = Archive;
                },
                Get: function (ani) {
                    return CirnoGame.AnimationLoader._this.GetAnimation(ani);
                }
            }
        },
        fields: {
            _data: null,
            Archive: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this._data = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(HTMLImageElement)))();
            }
        },
        methods: {
            GetAnimation: function (ani) {
                if (this._data.containsKey(ani)) {
                    return this._data.get(ani);
                }
                var A = new (System.Collections.Generic.List$1(HTMLImageElement)).ctor();
                var I = this.Archive.GetImage(System.String.concat(ani, ".png"));
                if (I != null) {
                    A.add(I);
                } else {
                    var j = 0;
                    var Sani = System.String.concat(ani, "_");
                    while (true) {
                        I = this.Archive.GetImage(System.String.concat(Sani, (Bridge.identity(j, (j = (j + 1) | 0))), ".png"));
                        if (I == null) {
                            break;
                        } else {
                            A.add(I);
                        }
                    }
                    /* do
                    {
                       I = Archive.GetImage(ani + "_" + j + ".png");
                       if (I != null)
                       {
                           A.Add(I);
                       }
                    } while (I != null);*/
                }
                this._data.set(ani, A);
                return A;
            }
        }
    });

    Bridge.define("CirnoGame.App", {
        main: function Main () {
            //USE THE JSON ZIP ARCHIVE FEATURE FROM BNTEST FOR LOADING IMAGES AND FILES.

            document.body.style.cssText = "overflow: hidden;margin: 0;padding: 0;";
            CirnoGame.GamePadManager._this = new CirnoGame.GamePadManager();
            CirnoGame.GamePadManager._this.Update();
            Bridge.global.setTimeout(function () {
                CirnoGame.GamePadManager._this.Update();

                CirnoGame.App.IC = CirnoGame.InputControllerManager._this.Controllers.getItem(0);
                var IM = CirnoGame.InputControllerManager._this.Controllers.getItem(0).InputMapping.getItem(2);

            }, 5);

            var ok = false;
            var uptest = true;
            CirnoGame.JSONArchive.Open("Assets/Images.JSON", function (json) {
                CirnoGame.App.JSON = json;

                CirnoGame.App.JSON.PreloadImages(function () {
                    ok = true;
                    CirnoGame.App.Finish();
                });
            });

            // After building (Ctrl + Shift + B) this project, 
            // browse to the /bin/Debug or /bin/Release folder.

            // A new bridge/ folder is created and contains
            // your projects JavaScript files. 

            // Open the bridge/index.html file in a brower by
            // Right-Click > Open With..., then choose a
            // web browser from the list

            // This application will then run in a browser.


        },
        statics: {
            fields: {
                Frame: 0,
                Div: null,
                Canvas: null,
                ScreenBounds: null,
                JSON: null,
                G: null,
                TargetAspect: 0,
                _lSize: 0,
                _missingTime: 0,
                _lTime: 0,
                totalTime: 0,
                _frameRendered: false,
                _gameRendered: false,
                IC: null,
                CurrentView: null,
                GameName: null,
                GameVersion: null,
                DEBUG: false
            },
            ctors: {
                init: function () {
                    this.Frame = 0;
                    this._lSize = -1;
                    this._missingTime = 0;
                    this._lTime = -1;
                    this._frameRendered = false;
                    this._gameRendered = false;
                    this.GameName = "Cirno's Mysterious Tower";
                    this.GameVersion = "0.3";
                    this.DEBUG = false;
                }
            },
            methods: {
                Finish: function () {
                    CirnoGame.AnimationLoader.Init(CirnoGame.App.JSON);
                    var LT = document.getElementById("loadtext");
                    LT.textContent = "";
                    document.body.style.cursor = "auto";
                    document.title = System.String.concat(CirnoGame.App.GameName, " ", CirnoGame.App.GameVersion, " by:RSGmaker");
                    //var R = new Renderer();
                    //Document.Body.AppendChild(R.view);

                    CirnoGame.App.Div = document.createElement("div");
                    var Canv = document.createElement("canvas");
                    CirnoGame.App.Canvas = Canv;
                    CirnoGame.App.TargetAspect = 0.75;
                    Canv.width = 1024;
                    Canv.height = Bridge.Int.clip32(Canv.width * CirnoGame.App.TargetAspect);
                    CirnoGame.App.ScreenBounds = new CirnoGame.Rectangle(0, 0, Canv.width, Canv.height);

                    CirnoGame.App.Div.appendChild(Canv);
                    document.body.appendChild(CirnoGame.App.Div);
                    //Document.Body.AppendChild(Canv);
                    CirnoGame.App.G = CirnoGame.App.Canvas.getContext("2d");

                    CirnoGame.App.G.imageSmoothingEnabled = false;
                    CirnoGame.App.Canvas.style.imageRendering = "pixelated";
                    var gg = CirnoGame.App.G;
                    gg.webkitImageSmoothingEnabled = false;
                    gg.mozImageSmoothingEnabled = false;


                    CirnoGame.KeyboardManager.Init();

                    CirnoGame.App.CurrentView = new CirnoGame.Game();

                    var OnF = CirnoGame.App.RAF;
                    requestAnimationFrame(OnF);
                },
                updateWindow: function () {
                    var size = Math.ceil(window.innerHeight * (1 / CirnoGame.App.TargetAspect));
                    if (size !== CirnoGame.App._lSize) {
                        CirnoGame.App.Canvas.style.width = "100%";
                        CirnoGame.App.Div.style.width = System.Double.format(size) + "px";

                        CirnoGame.App.Div.style.position = "relative";
                        CirnoGame.App.Div.style.left = System.Double.format(((((Bridge.Int.div(window.innerWidth, 2)) | 0)) - (size / 2))) + "px";
                        size = CirnoGame.App._lSize;
                    }
                },
                UpdateInputs: function () {
                    if (CirnoGame.App.IC != null) {
                        var L = CirnoGame.InputControllerManager._this.Controllers;
                        if (L.Count > 1) {
                            /* List<int> keys = KeyboardManager._this.TappedButtons;
                            if (keys.Contains(107))
                            {
                               int index = L.IndexOf(IC);
                               index++;
                               if (index >= L.Count)
                               {
                                   index -= L.Count;
                               }
                               IC = L[index];
                            }
                            if (keys.Contains(109))
                            {
                               int index = L.IndexOf(IC);
                               index--;
                               if (index < 0)
                               {
                                   index += L.Count;
                               }
                               IC = L[index];
                            }*/
                        }
                    }
                    CirnoGame.KeyboardManager.Update();
                },
                Update: function (time) {
                    var delta = 0;
                    CirnoGame.App.totalTime = time;
                    if (time >= 0) {
                        if (CirnoGame.App._lTime < 0) {
                            CirnoGame.App._lTime = time;
                        } else {
                            //missingTime -= 16.666666666666666666666666666667;
                        }
                        delta = (time - CirnoGame.App._lTime);
                        CirnoGame.App._missingTime += (delta);
                        if (Bridge.is(CirnoGame.App.CurrentView, CirnoGame.Game)) {
                            var G = Bridge.cast(CirnoGame.App.CurrentView, CirnoGame.Game);
                            if (G.running) {
                                G.totalTime += delta;
                                if (G.timeRemaining > 0) {
                                    G.timeRemaining -= delta;
                                }
                                if (G.timeRemaining <= 0) {
                                    G.timeRemaining = 0;
                                }
                            }
                        }
                    }
                    CirnoGame.App.updateWindow();
                    /* if (delta > 22)
                    {
                       Lagging = true;
                    }*/

                    if (CirnoGame.App._missingTime > 12) {
                        if (CirnoGame.App.CurrentView != null) {
                            CirnoGame.App.CurrentView.Update();
                        }

                        CirnoGame.App._missingTime -= 16.666666666666668;
                        CirnoGame.App._frameRendered = false;
                        CirnoGame.App._gameRendered = false;

                    } else {
                        CirnoGame.App._lTime = time;
                        return;
                    }
                    if (time >= 0) {
                        if (CirnoGame.App._missingTime >= 3000) {
                            CirnoGame.App._missingTime = 0;
                        }
                        if (CirnoGame.App._missingTime >= 10000) {
                            //Game is lagging too much to properly play multiplayer.
                        }
                        var T = 16.666666666666668;
                        if (true) {
                            T += 8;
                        }
                        while (CirnoGame.App._missingTime >= T) {
                            if (CirnoGame.App.CurrentView != null) {
                                CirnoGame.App.CurrentView.Update();
                            }
                            CirnoGame.App._missingTime -= 16.666666666666668;
                        }
                    }
                    //game.Draw(g);
                    CirnoGame.App._lTime = time;
                    CirnoGame.App.Frame = (CirnoGame.App.Frame + 1) | 0;
                    CirnoGame.HelperExtensions.Clear(CirnoGame.App.G);
                    CirnoGame.GamePadManager._this.Update();
                    if (CirnoGame.App.CurrentView != null) {

                        CirnoGame.App.CurrentView.Update();
                        CirnoGame.App.CurrentView.Render();
                        CirnoGame.App.G.drawImage(CirnoGame.App.CurrentView.spriteBuffer, 0.0, 0.0, CirnoGame.App.Canvas.width, CirnoGame.App.Canvas.height);
                    }
                    //G.FillStyle = ""+Convert. Frame;
                    //G.FillStyle = "#" + Frame.ToString("X6");
                    /* G.FillStyle = "#" + ColorFromAhsb(1,(Frame/2) % 360,0.8f,0.7f).ToString("X6");
                    G.FillRect(0, 0, G.Canvas.Width, G.Canvas.Height);

                    G.FillStyle = "red";
                    var x = ((0 + Frame * 3) % (G.Canvas.Width + 100)) - 100;
                    var y = ((0 + Frame) % (G.Canvas.Height + 100)) - 100;
                    //G.FillRect(x, y, 100, 100);

                    var V = JSON.Images.Values.ToArray();

                    var img = V[(Frame/10) % V.Length];
                    G.DrawImage(img, x, y,img.Width*4,img.Height * 4);*/
                    CirnoGame.App.UpdateInputs();
                },
                RAF: function () {

                    var OnF = CirnoGame.App.RAF;
                    requestAnimationFrame(OnF);
                    var time = Bridge.global.performance.now();
                    CirnoGame.App.Update(time);
                },
                ColorFromAhsb: function (a, h, s, b) {

                    /* if (0 > a || 255 < a)
                    {
                       throw new ArgumentOutOfRangeException("a", a,
                         Properties.Resources.InvalidAlpha);
                    }
                    if (0f > h || 360f < h)
                    {
                       throw new ArgumentOutOfRangeException("h", h,
                         Properties.Resources.InvalidHue);
                    }
                    if (0f > s || 1f < s)
                    {
                       throw new ArgumentOutOfRangeException("s", s,
                         Properties.Resources.InvalidSaturation);
                    }
                    if (0f > b || 1f < b)
                    {
                       throw new ArgumentOutOfRangeException("b", b,
                         Properties.Resources.InvalidBrightness);
                    }*/

                    if (0 === s) {
                        //return CreateShade(b / 255.0);
                        //return 0x808080;
                        var shade = Bridge.Int.clip32(b / 255.0);
                        return CirnoGame.App.RGBToInt(shade, shade, shade);
                    }

                    var fMax, fMid, fMin;
                    var iSextant, iMax, iMid, iMin;

                    if (0.5 < b) {
                        fMax = b - (b * s) + s;
                        fMin = b + (b * s) - s;
                    } else {
                        fMax = b + (b * s);
                        fMin = b - (b * s);
                    }

                    iSextant = Bridge.Int.clip32(Math.floor(h / 60.0));
                    if (300.0 <= h) {
                        h -= 360.0;
                    }
                    h /= 60.0;
                    h -= 2.0 * Math.floor(((iSextant + 1.0) % 6.0) / 2.0);
                    if (0 === iSextant % 2) {
                        fMid = h * (fMax - fMin) + fMin;
                    } else {
                        fMid = fMin - h * (fMax - fMin);
                    }

                    iMax = System.Convert.toInt32(Bridge.box(fMax * 255, System.Single, System.Single.format, System.Single.getHashCode));
                    iMid = System.Convert.toInt32(Bridge.box(fMid * 255, System.Single, System.Single.format, System.Single.getHashCode));
                    iMin = System.Convert.toInt32(Bridge.box(fMin * 255, System.Single, System.Single.format, System.Single.getHashCode));

                    switch (iSextant) {
                        case 1: 
                            return CirnoGame.App.RGBToInt(iMid, iMax, iMin);
                        case 2: 
                            return CirnoGame.App.RGBToInt(iMin, iMax, iMid);
                        case 3: 
                            return CirnoGame.App.RGBToInt(iMin, iMid, iMax);
                        case 4: 
                            return CirnoGame.App.RGBToInt(iMid, iMin, iMax);
                        case 5: 
                            return CirnoGame.App.RGBToInt(iMax, iMin, iMid);
                        default: 
                            return CirnoGame.App.RGBToInt(iMax, iMid, iMin);
                    }
                },
                RGBToInt: function (R, G, B) {
                    return ((((R + (G << 8)) | 0) + (B << 16)) | 0);
                }
            }
        }
    });

    Bridge.define("CirnoGame.Audio", {
        fields: {
            _AM: null,
            _audio: null,
            _hasPlayed: false,
            _blast: null,
            lastplayed: 0,
            _loop: false,
            OnPlay: null,
            OnStop: null,
            lasttime: 0
        },
        props: {
            ID: null,
            IsPlaying: {
                get: function () {
                    return !(!this._hasPlayed || this._audio.paused || this._audio.currentTime === 0.0);
                },
                set: function (value) {
                    if (value) {
                        this.Play();
                    } else {
                        this.Pause();
                    }
                }
            },
            Loop: {
                get: function () {
                    //return _audio.Loop;
                    return this._loop;
                },
                set: function (value) {
                    //_audio.Loop = value;
                    this._loop = value;
                    //_audio.Loop = value;
                }
            },
            CurrentTime: {
                get: function () {
                    return this._audio.currentTime;
                },
                set: function (value) {
                    this._audio.currentTime = value;
                }
            },
            Volume: {
                get: function () {
                    return this._audio.volume;
                },
                set: function (value) {
                    this._audio.volume = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.lastplayed = Number.NEGATIVE_INFINITY;
                this.lasttime = 0;
            },
            ctor: function (audio, ID, AudioManager) {
                this.$initialize();
                this._audio = audio;
                this.ID = ID;
                var self = this;
                this._AM = AudioManager;
                //object A = (() => self._OnPlay);
                //Action A = new Action(() => self._OnPlay());

                this._audio.onplay = function () {
                    self._OnPlay();
                };
                this._audio.onpause = function () {
                    self._OnStop();
                };
                //_audio.OnEnded = new Action(() => self._OnStop()).ToDynamic();
                this._audio.onended = function () {
                    self._OnEnd();
                };
                this._audio.ontimeupdate = function () {
                    self._OnUpdate();
                };

                this._blast = new (System.Collections.Generic.List$1(HTMLAudioElement)).ctor();
                var maxvoices = 6;
                var voices = 1;
                while (voices < maxvoices) {
                    this._blast.add(Bridge.cast(this._audio.cloneNode(), HTMLAudioElement));
                    voices = (voices + 1) | 0;
                }
                /* _blast.Add((AudioElement)_audio.CloneNode());
                _blast.Add((AudioElement)_audio.CloneNode());
                _blast.Add((AudioElement)_audio.CloneNode());
                _blast.Add((AudioElement)_audio.CloneNode());*/
                /* _audio.OnPlay = "self._OnPlay()".ToDynamic();
                _audio.OnPause = "self._OnStop()".ToDynamic();
                _audio.OnEnded = "self._OnStop()".ToDynamic();*/
            }
        },
        methods: {
            Play: function () {
                if (!this.IsPlaying) {
                    this.lasttime = this.CurrentTime;
                    this._audio.play();
                    this._hasPlayed = true;
                    return true;
                }
                return false;
            },
            Pause: function () {
                if (this.IsPlaying) {
                    this._audio.pause();
                    return true;
                }
                return false;
            },
            Stop: function () {
                if (this.IsPlaying) {
                    this._audio.pause();
                    this._audio.currentTime = 0;
                    return true;
                }
                return false;
            },
            Blast: function (volume) {
                if (volume === void 0) { volume = 1.0; }
                var T = CirnoGame.App.totalTime;
                if (T - this.lasttime < 150) {
                    return; //prevent audio spam.
                }
                if (!this.IsPlaying) {
                    this.Volume = volume;
                    this.Play();
                    this.lasttime = T;
                } else {
                    //((AudioElement)_audio.CloneNode()).Play();
                    var i = 0;
                    while (i < this._blast.Count) {
                        var A = this._blast.getItem(i);
                        //if (A.Paused || A.CurrentTime<0.15f || A.Played.Length==0)
                        if (A.paused || A.currentTime < 0.1 || A.played.length === 0) {
                            if (A.paused || A.currentTime === 0.0 || A.played.length === 0) {
                                A.volume = volume;
                                A.play();
                                i = this._blast.Count;
                                this.lasttime = T;
                            }
                        }
                        i = (i + 1) | 0;
                    }
                }
            },
            _OnPlay: function () {
                this._AM.OnPlay(this);
                if (this.OnPlay) {
                    this.OnPlay(this);
                }
            },
            _OnStop: function () {
                this._AM.OnStop(this);
                if (this.OnStop) {
                    this.OnStop(this);
                }
            },
            _OnEnd: function () {
                /* if (_loop)
                {
                   CurrentTime = 0;
                   Play();
                }
                else*/
                {
                    this._OnStop();
                }
            },
            _OnUpdate: function () {
                if (this._loop) {
                    //if ((CurrentTime+0.35) >= _audio.Duration)
                    if ((this.CurrentTime + ((this.CurrentTime - this.lasttime) * 0.8)) >= this._audio.duration) {
                        this.CurrentTime = 0;
                        this.Play();
                    }
                    this.lasttime = this.CurrentTime;
                }
            }
        }
    });

    Bridge.define("CirnoGame.AudioManager", {
        statics: {
            fields: {
                Directory: null,
                __this: null
            },
            props: {
                _this: {
                    get: function () {
                        if (CirnoGame.AudioManager.__this == null) {
                            CirnoGame.AudioManager.__this = new CirnoGame.AudioManager();
                        }
                        return CirnoGame.AudioManager.__this;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Directory = "";
                }
            },
            methods: {
                Init: function () {
                    if (CirnoGame.AudioManager.__this == null) {
                        CirnoGame.AudioManager.__this = new CirnoGame.AudioManager();
                    }
                }
            }
        },
        fields: {
            data: null,
            playing: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.data = new (System.Collections.Generic.Dictionary$2(System.String,CirnoGame.Audio))();
                this.playing = new (System.Collections.Generic.List$1(CirnoGame.Audio)).ctor();
            }
        },
        methods: {
            Get: function (path) {
                path = System.String.concat(CirnoGame.AudioManager.Directory, path);
                if (this.data.containsKey(path)) {
                    return this.data.get(path);
                } else {
                    var AE = new Audio(path);
                    var A = new CirnoGame.Audio(AE, path, this);
                    this.data.add(path, A);
                    return A;
                }
            },
            Play: function (path, loop) {
                if (loop === void 0) { loop = false; }
                var A = this.Get(path);
                A.Loop = loop;
                A.Play();
                return A;
            },
            Blast: function (path, volume) {
                if (volume === void 0) { volume = 1.0; }
                var A = this.Get(path);
                A.Blast(volume);
            },
            Stop: function (path) {
                var A = this.Get(path);
                A.Stop();
            },
            Pause: function (path) {
                var A = this.Get(path);
                A.Pause();
            },
            OnPlay: function (audio) {
                if (!this.playing.contains(audio)) {
                    this.playing.add(audio);
                }
            },
            OnStop: function (audio) {
                if (this.playing.contains(audio)) {
                    this.playing.remove(audio);
                }
            },
            StopAllFromDirectory: function (directory) {
                directory = System.String.concat(CirnoGame.AudioManager.Directory, directory);
                CirnoGame.HelperExtensions.ForEach(Bridge.global.CirnoGame.Audio, this.data.getValues(), function (A) {
                    if (System.String.startsWith(A.ID, directory)) {
                        A.Stop();
                    }
                });
            },
            StopAll: function () {
                CirnoGame.HelperExtensions.ForEach(Bridge.global.CirnoGame.Audio, this.data.getValues(), function (A) {
                    A.Stop();
                });
            }
        }
    });

    Bridge.define("CirnoGame.ButtonMenu", {
        fields: {
            rows: null,
            MenuWidth: 0,
            MenuHeight: 0,
            FontSize: 0,
            SelectionMenu: false,
            Selected: null,
            Self: null,
            OnChoose: null,
            Position: null
        },
        props: {
            SelectedData: {
                get: function () {
                    if (this.Self.Selected != null) {
                        return this.Self.Selected.Data;
                    }
                    return null;
                }
            },
            SelectedText: {
                get: function () {
                    if (this.Self.Selected != null) {
                        if (Bridge.is(this.Self.Selected.Contents, CirnoGame.TextSprite)) {
                            return Bridge.cast(this.Self.Selected.Contents, CirnoGame.TextSprite).Text;
                        }
                    }
                    return null;
                }
            }
        },
        ctors: {
            init: function () {
                this.Position = new CirnoGame.Vector2();
            },
            ctor: function (menuWidth, menuHeight, FontSize, selectionMenu) {
                if (selectionMenu === void 0) { selectionMenu = false; }

                this.$initialize();
                this.rows = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(CirnoGame.ButtonSprite))).ctor();
                this.MenuWidth = menuWidth;
                this.MenuHeight = menuHeight;
                this.FontSize = FontSize;
                this.SelectionMenu = selectionMenu;
                this.Self = this;
            }
        },
        methods: {
            GetAllButtons: function () {
                var all = new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite)).ctor();
                this.rows.forEach(function (R) {
                    all.addRange(R);
                });
                return all;
            },
            GetSpriteByData: function (data) {
                var all = new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite)).$ctor1(System.Linq.Enumerable.from(this.GetAllButtons()).where(function (B) {
                        return Bridge.referenceEquals(B.Data, data);
                    }));
                if (all.Count > 0) {
                    return all.getItem(0);
                }
                return null;
            },
            AddButtons: function (buttonText) {
                CirnoGame.HelperExtensions.ForEach(System.String, buttonText, Bridge.fn.bind(this, function (T) {
                    this.AddButton(T);
                }));
            },
            AddButton: function (buttonText, row, data) {
                if (row === void 0) { row = -1; }
                if (data === void 0) { data = null; }
                var T = new CirnoGame.TextSprite();
                T.Text = buttonText;
                T.FontSize = this.FontSize;
                //ButtonSprite B = new ButtonSprite(T, (int)(FontSize * 0.05));
                var B = new CirnoGame.ButtonSprite(T, Bridge.Int.clip32(this.FontSize * 0.1));
                if (data != null) {
                    B.Data = data;
                }
                this.AddButton$1(B, row);
                return B;
            },
            AddButton$1: function (button, row) {
                if (row === void 0) { row = -1; }
                if (this.rows.Count === 0) {
                    this.rows.add(new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite)).ctor());
                }
                if (row === -1) {
                    row = (this.rows.Count - 1) | 0;
                }
                if (button != null) {
                    button.OnClick = Bridge.fn.bind(this, function () {
                        this.Self.Select(button);
                    });
                }
                this.rows.getItem(row).add(button);
            },
            Select: function (button) {
                if (!Bridge.referenceEquals(this.Selected, button) || !this.SelectionMenu) {
                    if (this.Selected != null && this.SelectionMenu) {
                        //Selected.BorderColor = "#00AA33";
                        //Selected.ButtonColor = "#11CC55";
                        this.Selected.SetColorScheme$1(0);
                    }
                    this.Selected = button;
                    var OSC = this.OnChoose;
                    var self = this;
                    if (this.SelectionMenu && this.Selected != null) {
                        //Selected.BorderColor = "#FFFFFF";
                        //Selected.ButtonColor = "#FF0000";
                        this.Selected.SetColorScheme$1(1);
                    }
                    if (this.Selected != null && OSC) {
                        self.OnChoose();
                    }
                }
            },
            CombineRows: function () {
                var all = new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite)).ctor();
                this.rows.forEach(function (R) {
                    all.addRange(R);
                });

                this.rows = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(CirnoGame.ButtonSprite))).ctor();
                this.rows.add(all);
            },
            addRow: function () {
                var ret = new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite)).ctor();
                this.rows.add(ret);
                return ret;
            },
            BreakUp: function (totalRows) {
                this.CombineRows();
                var all = this.rows.getItem(0);
                this.rows = new (System.Collections.Generic.List$1(System.Collections.Generic.List$1(CirnoGame.ButtonSprite))).ctor();
                var C = Math.ceil(all.Count / totalRows);
                var row = this.addRow();
                var i = 0;
                while (i < all.Count) {
                    if (row.Count >= C) {
                        row = this.addRow();
                    }
                    this.AddButton$1(all.getItem(i));
                    i = (i + 1) | 0;
                }
            },
            CenterOn: function (sprite, Center) {
                sprite.Draw(null);
                var S = sprite.Size;
                var S2 = CirnoGame.Vector2.op_Division(S, 2.0);
                sprite.Position = CirnoGame.Vector2.op_Subtraction(Center, S2);
            },
            UpdateRow: function (index, y) {
                var row = this.rows.getItem(index);
                var X = (this.MenuWidth / (row.Count + 1.0));
                var i = 0;
                var CX = X;

                CX += this.Position.X;
                while (i < row.Count) {
                    var B = row.getItem(i);
                    if (B != null) {
                        this.CenterOn(B, new CirnoGame.Vector2(CX, y));
                    }
                    CX += X;
                    i = (i + 1) | 0;
                }
            },
            Finish: function (totalRows) {
                if (totalRows === void 0) { totalRows = -1; }
                if (totalRows > 0) {
                    this.BreakUp(totalRows);
                }
                var y = 0;
                var CY = 0;
                if (totalRows > 0 && this.rows.Count < totalRows) {
                    y = (this.MenuHeight / (((this.rows.Count + 1) | 0)));
                    CY = y;
                } else {
                    y = (this.MenuHeight / (this.rows.Count));
                    CY = 0;
                }

                CY += this.Position.Y;
                var i = 0;
                while (i < this.rows.Count) {
                    this.UpdateRow(i, CY);
                    CY += y;
                    i = (i + 1) | 0;
                }
            },
            Update: function (mousePosition, clicked) {
                if (mousePosition === void 0) { mousePosition = null; }
                if (clicked === void 0) { clicked = true; }
                if (CirnoGame.Vector2.op_Equality(mousePosition, null)) {
                    mousePosition = CirnoGame.KeyboardManager._this.CMouse;
                    clicked = CirnoGame.KeyboardManager._this.TappedMouseButtons.contains(0);
                }
                if (clicked) {
                    this.rows.forEach(function (R) {
                        R.forEach(function (B) {
                            if (B != null) {
                                B.CheckClick(mousePosition);
                            }
                        });
                    });
                }
            },
            Draw: function (g) {
                this.rows.forEach(function (R) {
                    R.forEach(function (B) {
                        if (B != null) {
                            B.Draw(g);
                        }
                    });
                });
            }
        }
    });

    Bridge.define("CirnoGame.Sprite", {
        fields: {
            Position: null,
            spriteBuffer: null,
            Visible: false,
            spriteGraphics: null
        },
        props: {
            Size: {
                get: function () {
                    return new CirnoGame.Vector2(this.spriteBuffer.width, this.spriteBuffer.height);
                },
                set: function (value) {
                    if (CirnoGame.Vector2.op_Equality(value, null)) {
                        value = new CirnoGame.Vector2();
                    }
                    this.spriteBuffer.width = Bridge.Int.clip32(value.X);
                    this.spriteBuffer.height = Bridge.Int.clip32(value.Y);
                }
            }
        },
        ctors: {
            init: function () {
                this.Visible = true;
            },
            ctor: function () {
                this.$initialize();
                this.spriteBuffer = document.createElement("canvas");
                this.spriteGraphics = this.spriteBuffer.getContext("2d");
                this.spriteGraphics.imageSmoothingEnabled = false;
                this.Position = new CirnoGame.Vector2();
            }
        },
        methods: {
            GetGraphics: function () {
                return this.spriteGraphics;
            },
            OnFrame: function () {

            },
            Draw: function (g) {
                if (!this.Visible) {
                    return;
                }
                g.drawImage(this.spriteBuffer, this.Position.X, this.Position.Y);
            },
            GetBounds: function () {
                return new CirnoGame.Rectangle(this.Position.X, this.Position.Y, this.spriteBuffer.width, this.spriteBuffer.height);
            }
        }
    });

    Bridge.define("CirnoGame.ButtonSprite.ColorScheme", {
        fields: {
            BorderColor: null,
            ButtonColor: null
        },
        ctors: {
            ctor: function (borderColor, buttonColor) {
                if (borderColor === void 0) { borderColor = "#00AA33"; }
                if (buttonColor === void 0) { buttonColor = "#11CC55"; }

                this.$initialize();
                this.BorderColor = borderColor;
                this.ButtonColor = buttonColor;
            }
        }
    });

    Bridge.define("CirnoGame.Camera", {
        fields: {
            instawarp: false,
            Position: null,
            TargetPosition: null,
            /**
             * @instance
             * @public
             * @memberof CirnoGame.Camera
             * @default 0.8
             * @type number
             */
            LinearPanSpeed: 0,
            /**
             * @instance
             * @public
             * @memberof CirnoGame.Camera
             * @default 0.07
             * @type number
             */
            LerpPanSpeed: 0,
            _scale: 0,
            speedmod: 0,
            _invscale: 0,
            _center: null,
            viewport_width: 0,
            viewport_height: 0,
            CameraBounds: null,
            StageBounds: null,
            tmp: null
        },
        props: {
            CenteredTargetPosition: {
                set: function (value) {
                    this.TargetPosition = new CirnoGame.Vector2(value.X - (this.CameraBounds.width / 2), value.Y - (this.CameraBounds.height / 2));
                }
            },
            Scale: {
                get: function () {
                    return this._scale;
                },
                set: function (value) {
                    this._scale = value;
                    this._invscale = 1 / this._scale;
                    this.UpdateCameraBounds();
                }
            },
            InvScale: {
                get: function () {
                    return this._invscale;
                },
                set: function (value) {
                    this._invscale = value;
                    this._scale = 1 / this._invscale;
                    this.UpdateCameraBounds();
                }
            },
            Center: {
                get: function () {
                    var R = this.CameraBounds;
                    //return R.Center;
                    R.GetCenter(this._center);
                    return this._center;
                },
                set: function (value) {
                    this.Position.X = value.X - (this.CameraBounds.width / 2);
                    this.Position.Y = value.Y - (this.CameraBounds.height / 2);
                }
            }
        },
        ctors: {
            init: function () {
                this.instawarp = false;
                this.LinearPanSpeed = 0.8;
                this.LerpPanSpeed = 0.07;
                this._scale = 1.0;
                this.speedmod = 1;
                this._invscale = 1.0;
                this._center = new CirnoGame.Vector2();
                this.viewport_width = 1;
                this.viewport_height = 1;
                this.tmp = new CirnoGame.Vector2();
            },
            ctor: function (viewport_width, viewport_height) {
                if (viewport_width === void 0) { viewport_width = -1.0; }
                if (viewport_height === void 0) { viewport_height = -1.0; }

                this.$initialize();
                this.Position = new CirnoGame.Vector2();
                this.TargetPosition = new CirnoGame.Vector2();
                this.viewport_width = viewport_width;
                this.viewport_height = viewport_height;
                this.CameraBounds = new CirnoGame.Rectangle(0, 0, viewport_width, viewport_height);
                this._invscale = 1.0 / this._scale;
                this.UpdateCameraBounds();
            }
        },
        methods: {
            ScaleToSize: function (sizeInPixels) {
                this.Scale = sizeInPixels / CirnoGame.App.Canvas.width;
            },
            UpdateCameraBounds: function () {
                //CameraBounds.width = App.Canvas.Width * _invscale;
                //CameraBounds.height = App.Canvas.Height * _invscale;
                this.CameraBounds.width = this.viewport_width * this._invscale;
                this.CameraBounds.height = this.viewport_height * this._invscale;
            },
            Update: function () {
                if (this.Position.X !== this.TargetPosition.X || this.Position.Y !== this.TargetPosition.Y) {
                    //float dist = (Position - TargetPosition).Length;
                    var dist = this.Position.Distance(this.TargetPosition);
                    var spd = this.LinearPanSpeed + (dist * this.LerpPanSpeed);
                    spd *= this.speedmod;

                    if (dist <= spd || this.instawarp) {
                        this.Position.X = this.TargetPosition.X;
                        this.Position.Y = this.TargetPosition.Y;
                        this.instawarp = false;
                        return;
                    } else {
                        this.tmp.CopyFrom(this.Position);
                        this.tmp.Subtract(this.TargetPosition);
                        this.tmp.SetAsNormalize(spd);
                        //Vector2 V = (Position - TargetPosition).Normalize(spd);
                        this.Position.Subtract(this.tmp);
                    }
                    if (this.StageBounds != null) {
                        this.Position.X = CirnoGame.MathHelper.Clamp$1(this.Position.X, this.StageBounds.left, this.StageBounds.right - this.CameraBounds.width);
                        this.Position.Y = CirnoGame.MathHelper.Clamp$1(this.Position.Y, this.StageBounds.top, this.StageBounds.bottom - this.CameraBounds.height);

                        this.TargetPosition.X = CirnoGame.MathHelper.Clamp$1(this.TargetPosition.X, this.StageBounds.left, this.StageBounds.right - this.CameraBounds.width);
                        this.TargetPosition.Y = CirnoGame.MathHelper.Clamp$1(this.TargetPosition.Y, this.StageBounds.top, this.StageBounds.bottom - this.CameraBounds.height);
                    }

                }
                this.CameraBounds.x = this.Position.X;
                this.CameraBounds.y = this.Position.Y;
            },
            Apply: function (g) {
                g.scale(this.Scale, this.Scale);
                g.translate(-this.Position.X, -this.Position.Y);
            }
        }
    });

    Bridge.define("CirnoGame.Entity", {
        fields: {
            Ani: null,
            Alive: false,
            Visible: false,
            Speed: null,
            Game: null,
            _behaviors: null,
            _behaviorTicks: null,
            data: null,
            ZOrder: 0,
            ID: null,
            HideHitbox: false,
            HandledLocally: false,
            RemovedOnLevelEnd: false,
            HitboxBuffer: null
        },
        props: {
            Hspeed: {
                get: function () {
                    return this.Speed.X;
                },
                set: function (value) {
                    this.Speed.X = value;
                }
            },
            Vspeed: {
                get: function () {
                    return this.Speed.Y;
                },
                set: function (value) {
                    this.Speed.Y = value;
                }
            },
            Position: {
                get: function () {
                    return this.Ani.Position;
                },
                set: function (value) {
                    this.Ani.Position = value;
                }
            },
            x: {
                get: function () {
                    return this.Ani.Position.X;
                },
                set: function (value) {
                    this.Ani.Position.X = value;
                }
            },
            y: {
                get: function () {
                    return this.Ani.Position.Y;
                },
                set: function (value) {
                    this.Ani.Position.Y = value;
                }
            },
            Width: {
                get: function () {
                    if (this.Ani.CurrentImage != null) {
                        return this.Ani.CurrentImage.width;
                    }
                    return 0;
                }
            },
            Height: {
                get: function () {
                    if (this.Ani.CurrentImage != null) {
                        return this.Ani.CurrentImage.height;
                    }
                    return 0;
                }
            }
        },
        ctors: {
            init: function () {
                this.Alive = true;
                this.Visible = true;
                this.Speed = new CirnoGame.Vector2();
                this.data = new (System.Collections.Generic.Dictionary$2(System.String,System.Object))();
                this.ZOrder = 0;
                this.HandledLocally = true;
                this.RemovedOnLevelEnd = true;
                this.HitboxBuffer = new CirnoGame.Rectangle();
            },
            ctor: function (game) {
                this.$initialize();
                //ID = Math.Random();
                this.ID = CirnoGame.Helper.GetRandomString();
                this.Game = game;
            }
        },
        methods: {
            AddBehavior$1: function (behavior) {
                if (this._behaviors == null) {
                    this._behaviors = new (System.Collections.Generic.List$1(CirnoGame.EntityBehavior)).ctor();
                    this._behaviorTicks = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
                this._behaviors.add(behavior);
                this._behaviorTicks.add(0);
            },
            AddBehavior: function (T) {
                if (this._behaviors == null) {
                    this._behaviors = new (System.Collections.Generic.List$1(CirnoGame.EntityBehavior)).ctor();
                    this._behaviorTicks = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
                var B = Bridge.createInstance(T, [this]);
                this._behaviors.add(Bridge.cast(B, CirnoGame.EntityBehavior));
                this._behaviorTicks.add(0);
                return Bridge.unbox(B);
                /* if (B is EntityBehavior)
                {
                   _behaviors.Add((EntityBehavior)B);
                   _behaviorTicks.Add(0);
                }else
                {
                   throw new Exception("Attempted to add an invalid behavior");
                }*/
            },
            RemoveBehavior: function (behavior) {
                if (this._behaviors == null) {
                    this._behaviors = new (System.Collections.Generic.List$1(CirnoGame.EntityBehavior)).ctor();
                    this._behaviorTicks = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
                if (this._behaviors.contains(behavior)) {
                    this._behaviorTicks.removeAt(this._behaviors.indexOf(behavior));
                    this._behaviors.remove(behavior);
                }
            },
            RemoveBehavior$1: function (T) {
                var $t;
                if (this._behaviors == null) {
                    return;
                }
                var L = new (System.Collections.Generic.List$1(CirnoGame.EntityBehavior)).$ctor1(System.Linq.Enumerable.from(this._behaviors).where(function (behavior) {
                        return Bridge.is(behavior, T);
                    }));
                /* if (L.Count > 0)
                {
                   RemoveBehavior(L[0]);
                }*/
                $t = Bridge.getEnumerator(L);
                try {
                    while ($t.moveNext()) {
                        var behavior = $t.Current;
                        this.RemoveBehavior(behavior);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$dispose();
                    }
                }return;
            },
            GetBehavior: function (T) {
                if (this._behaviors == null) {
                    return Bridge.getDefaultValue(T);
                }
                /* List<EntityBehavior> L = new List<EntityBehavior>(_behaviors.Where(behavior => behavior is T));
                if (L.Count>0)
                {
                   return (dynamic)L[0];
                }*/
                return Bridge.cast(System.Linq.Enumerable.from(this._behaviors).first(function (behavior) {
                        return Bridge.is(behavior, T);
                    }), T);
            },
            GetBehavior$1: function (T, func) {
                var L = new (System.Collections.Generic.List$1(CirnoGame.EntityBehavior)).$ctor1(System.Linq.Enumerable.from(this._behaviors).where(function (behavior) {
                        return Bridge.is(behavior, T);
                    }));
                var F = func;
                return Bridge.cast(System.Linq.Enumerable.from(L).first(F), T);
                //return L.First(func).Cast<T>();
            },
            GetTeamColor: function () {
                if (Bridge.is(this, CirnoGame.ICombatant)) {
                    if (this.Game.GamePlaySettings.GameMode.Teams) {
                        return CirnoGame.Game.GetTeamColor(Bridge.cast(this, CirnoGame.ICombatant).CirnoGame$ICombatant$Team);
                    } else {
                        if (Bridge.referenceEquals(this, this.Game.player)) {
                            return CirnoGame.Game.GetTeamColor(1);
                        } else {
                            return CirnoGame.Game.GetTeamColor(2);
                        }
                    }
                }
                return "";
            },
            SameTeam: function (combatant) {
                if (this == combatant) {
                    return true;
                }
                var A = this;
                var B = combatant;

                if (A.PointsForKilling && B.PointsForKilling) {
                    var AA = A;
                    var BB = B;
                    if (AA.Team == BB.Team) {
                        if (this.Game.Teams) {
                            //return ((ICombatant)this).Team != 0;
                            return true;
                        } else {
                            return AA.Team == 0;
                        }
                    }
                }
                return false;
            },
            GetBehaviorFromName: function (Name) {
                if (this._behaviors == null) {
                    return null;
                }
                //List<EntityBehavior> L = new List<EntityBehavior>(_behaviors.Where(behavior => behavior.GetType().FullName==typeFullName));
                /* List<EntityBehavior> L = new List<EntityBehavior>(_behaviors.Where(behavior => behavior.BehaviorName == Name));
                if (L.Count > 0)
                {
                   return (dynamic)L[0];
                }*/
                try {
                    return System.Linq.Enumerable.from(this._behaviors).first(function (behavior) {
                            return Bridge.referenceEquals(behavior.BehaviorName, Name);
                        });
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    System.Console.WriteLine(System.String.concat("Behavior ", Name, " was not found."));
                }
                return null;
            },
            CustomEvent: function (evt) {

            },
            PlaySound: function (sound) {
                this.Game.PlaySoundEffect(this.getCenter(), sound);
            },
            getCenter: function () {
                //return Position + new Vector2(Width / 2, Height / 2);
                return CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, this.Height / 2);
            },
            GetHitbox: function () {
                if (this.Ani != null && this.Ani.CurrentImage != null) {
                    //return new Rectangle(Ani.X, Ani.Y, Ani.CurrentImage.Width, Ani.CurrentImage.Height);
                    var CI = this.Ani.CurrentImage;
                    this.HitboxBuffer.Set(this.Ani.X, this.Ani.Y, CI.width, CI.height);
                    return this.HitboxBuffer;
                }
                return null;
            },
            Update: function () {
                var $t;
                this.Ani.Position = CirnoGame.Vector2.op_Addition(this.Ani.Position, this.Speed);
                this.Ani.Update();
                if (this._behaviors != null) {
                    var i = 0;
                    while (i < this._behaviors.Count) {
                        var behavior = this._behaviors.getItem(i);
                        if (behavior.enabled && Bridge.identity(this._behaviorTicks.getItem(i), ($t = (this._behaviorTicks.getItem(i) + 1) | 0, this._behaviorTicks.setItem(i, $t), $t)) >= behavior.FramesPerTick) {
                            this._behaviorTicks.setItem(i, 0);
                            behavior.Update();
                        }
                        i = (i + 1) | 0;
                    }
                }
            },
            RefreshBehaviorTick: function (T) {
                var B = this.GetBehavior(T);
                if (B != null) {
                    this._behaviorTicks.setItem(this._behaviors.indexOf(B), B.FramesPerTick);
                }
            },
            Draw: function (g) {
                var $t;
                this.Ani.Draw(g);
                if (!this.HideHitbox && this.Game.ShowHitbox) {
                    this.DrawHitbox(g);
                }
                if (this._behaviors != null) {
                    $t = Bridge.getEnumerator(this._behaviors);
                    try {
                        while ($t.moveNext()) {
                            var behavior = $t.Current;
                            behavior.Draw(g);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }}
            },
            DrawHitbox: function (g) {
                var R = this.GetHitbox();
                if (R != null) {
                    g.strokeStyle = "#FFFF00";
                    g.strokeRect(R.x, R.y, R.width, R.height);
                }
            },
            onRemove: function () {

            }
        }
    });

    Bridge.define("CirnoGame.GameMode.ModeTypes", {
        $kind: "enum",
        statics: {
            fields: {
                
                Skirmish: 0,
                /**
                 * Singleplayer, gameplay is changed up with a mode specific task.
                 *
                 * @static
                 * @public
                 * @memberof number
                 * @constant
                 * @default 1
                 * @type number
                 */
                Challenge: 1,
                /**
                 * Like challenge, but is designed for multiple human players.
                 *
                 * @static
                 * @public
                 * @memberof number
                 * @constant
                 * @default 2
                 * @type number
                 */
                CallengeCoop: 2
            }
        }
    });

    Bridge.define("CirnoGame.GamePad", {
        fields: {
            connected: false,
            axes: null,
            buttons: null,
            id: null,
            index: System.Int64(0)
        },
        ctors: {
            ctor: function (pad) {
                this.$initialize();
                this.id = pad.id;
                this.index = System.Int64(pad.index);
                this.connected = pad.connected;
                this.axes = pad.axes;

                var length = pad.buttons.length;

                this.buttons = System.Array.init(length, null, CirnoGame.GamePadButton);
                var i = 0;
                while (i < length) {
                    this.buttons[System.Array.index(i, this.buttons)] = pad.buttons[i];
                    i = (i + 1) | 0;
                }
            }
        },
        methods: {
            Update: function () {
                var i = 0;
                while (i < this.buttons.length) {
                    this.buttons[System.Array.index(i, this.buttons)].tapped = false;
                    i = (i + 1) | 0;
                }
            },
            CombineData: function (pad) {
                if (Bridge.referenceEquals(this.id, pad.id)) {
                    this.connected = pad.connected;
                    this.axes = pad.axes;
                    //buttons = pad.buttons;
                    this.CombineButtonData(pad.buttons);
                }
            },
            CombineButtonData: function (buttons) {
                var Lb = buttons;
                this.buttons = buttons;
                var i = 0;
                while (i < buttons.length) {
                    if (buttons[System.Array.index(i, buttons)].pressed && !Lb[System.Array.index(i, Lb)].pressed) {
                        buttons[System.Array.index(i, buttons)].tapped = true;
                    }
                    i = (i + 1) | 0;
                }
            }
        }
    });

    Bridge.define("CirnoGame.GamePadButton", {
        fields: {
            tapped: false,
            pressed: false,
            value: 0
        },
        ctors: {
            ctor: function (button) {
                this.$initialize();
                this.pressed = button.pressed;
                this.value = button.value;
                this.tapped = false;
            }
        }
    });

    Bridge.define("CirnoGame.GamePadManager", {
        statics: {
            fields: {
                _this: null
            }
        },
        fields: {
            keyboard: null,
            gamepads: null,
            tempgamepads: null
        },
        props: {
            activeGamepads: {
                get: function () {
                    return new (System.Collections.Generic.List$1(CirnoGame.GamePad)).$ctor1(System.Linq.Enumerable.from(this.gamepads).where(function (gamepad) {
                            return gamepad.connected;
                        }));
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.gamepads = new (System.Collections.Generic.List$1(CirnoGame.GamePad)).ctor();
                this.Update();
            }
        },
        methods: {
            CallBackTest: function () {
                Bridge.global.alert("Callback!");
            },
            GetPad: function (id) {
                var L = new (System.Collections.Generic.List$1(CirnoGame.GamePad)).$ctor1(System.Linq.Enumerable.from(this.gamepads).where(function (gamepad) {
                        return Bridge.referenceEquals(gamepad.id, id);
                    }));
                if (L.Count > 0) {
                    return L.getItem(0);
                }
                return null;
            },
            Update: function () {
                var i = 0;
                while (i < this.gamepads.Count) {
                    this.gamepads.getItem(i).Update();
                    i = (i + 1) | 0;
                }
                i = 0;
                this.tempgamepads = (navigator.getGamepads() || navigator.webkitGetGamepads() || []);
                var pads = new (System.Collections.Generic.List$1(CirnoGame.GamePad)).ctor();
                while (i < this.tempgamepads.length) {
                    if (this.tempgamepads[i] != null) {
                        var pad = new CirnoGame.GamePad(this.tempgamepads[i]);
                        this._Update(pad);
                        pads.add(pad);
                    }
                    i = (i + 1) | 0;
                }
                i = 0;
                //Adds any newly found gamepads.
                while (i < pads.Count) {
                    var id = pads.getItem(i).id;
                    var j = 0;
                    var ok = true;
                    while (j < this.gamepads.Count) {
                        if (Bridge.referenceEquals(this.gamepads.getItem(j).id, id)) {
                            ok = false;
                        }
                        j = (j + 1) | 0;
                    }
                    if (ok) {
                        this.gamepads.add(pads.getItem(i));
                    }
                    i = (i + 1) | 0;
                }

                /* Action F = CallBackTest;
                Script.Write("setTimeout(F, 3000);");*/
                //Global.SetTimeout()
            },
            _Update: function (pad) {
                var i = 0;
                while (i < this.gamepads.Count) {
                    var P = this.gamepads.getItem(i);
                    if (Bridge.referenceEquals(P.id, pad.id)) {
                        P.CombineData(pad);
                    }
                    i = (i + 1) | 0;
                }
            }
        }
    });

    Bridge.define("CirnoGame.GamePlaySettings", {
        fields: {
            Online: false,
            MyCharacter: null,
            GameMode: null,
            MyTeam: 0,
            BlueNPCs: 0,
            RedNPCs: 0,
            RoomID: null,
            /**
             * @instance
             * @public
             * @memberof CirnoGame.GamePlaySettings
             * @default 1.0
             * @type number
             */
            ComputerAIModifier: 0
        },
        ctors: {
            init: function () {
                this.Online = false;
                this.MyCharacter = "Reisen";
                this.MyTeam = 1;
                this.BlueNPCs = 3;
                this.RedNPCs = 2;
                this.RoomID = "";
                this.ComputerAIModifier = 1.0;
            },
            ctor: function () {
                this.$initialize();
                //GameMode = new GameMode();
                //GameMode = GameMode.DeathMatch;
                this.GameMode = CirnoGame.GameMode.TeamBattle;
            }
        }
    });

    Bridge.define("CirnoGame.Helper", {
        statics: {
            fields: {
                _namespaces: null
            },
            ctors: {
                init: function () {
                    this._namespaces = new (System.Collections.Generic.Dictionary$2(System.String,System.Object))();
                }
            },
            methods: {
                GetRandomString: function () {
                    //return (Math.Random() * new Date().GetTime()).ToString(36).Replace("/\\./ g, '-'",null);
                    //return (Math.Random() * new Date().GetTime()).ToString(36).Replace(new Bridge.Text.RegularExpressions.Regex("", null);
                    //return Script.Write<string>("(Math.random() * new Date().getTime()).toString(36).replace(/\\./ g, '-')");
                    return (Math.random() * new Date().getTime()).toString(36);
                },
                GetType: function (FullName) {
                    var name = FullName;
                    if (Bridge.referenceEquals(name, "") || name == null || !System.String.contains(name,".")) {
                        return null;
                    }
                    var s = name.split(".");
                    //string nm = GetType().FullName.Split(".")[0];
                    var i = 1;
                    /* if (s[0] != nm)
                       return null;*/

                    //dynamic obj = Script.Write<object>(nm);

                    //Get namespace
                    var obj;
                    if (CirnoGame.Helper._namespaces.containsKey(s[System.Array.index(0, s)])) {
                        obj = CirnoGame.Helper._namespaces.get(s[System.Array.index(0, s)]);
                    } else {
                        obj = eval(s[System.Array.index(0, s)]);
                        CirnoGame.Helper._namespaces.set(s[System.Array.index(0, s)], obj);
                    }

                    while (i < s.length) {
                        //Parse through object hierarchy.
                        if (!obj) {
                            return null;
                        }
                        obj = obj[s[System.Array.index(i, s)]];
                        i = (i + 1) | 0;
                    }
                    return obj;
                },
                AddMultiple: function (T, array, item, number) {
                    while (number > 0) {
                        array.push(item);
                        number = (number - 1) | 0;
                    }
                },
                Repeat: function (s, number) {
                    if (number < 1) {
                        return "";
                    }
                    var ret = s;
                    var i = (number - 1) | 0;
                    while (i > 0) {
                        ret = System.String.concat(ret, s);
                        i = (i - 1) | 0;
                    }
                    return ret;
                },
                CloneCanvas: function (C) {
                    var ret = document.createElement("canvas");
                    ret.width = C.width;
                    ret.height = C.height;
                    var g = ret.getContext("2d");
                    g.drawImage(C, 0.0, 0.0);
                    return ret;
                },
                GetContext: function (C) {
                    return C.getContext("2d");
                },
                GetField: function (target, fieldName) {
                    var O = target;
                    //if (O[fieldName])
                    if (CirnoGame.Helper.Has(O, fieldName)) {
                        return O[fieldName];
                    }
                    if (O[System.String.concat("get", fieldName)]) {
                        return O[System.String.concat("get", fieldName)]();
                    }
                    var s = "";
                    try {
                        s = System.String.concat("Helper get field: Field \"", fieldName, "\" was not in " + target.GetType().FullName, ".");
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        s = System.String.concat("Helper get field: Field \"", fieldName, "\" was not in " + target, ".");
                    }

                    //Console.WriteLine(s);
                    console.log(s);
                    return null;
                },
                Has: function (target, fieldName) {
                    /* if (O[fieldName] || ((string)O) == "false")
                    {
                       return true;
                    }*/
                    return typeof target[fieldName] != 'undefined';
                },
                ReloadPage: function () {
                    window.location.href = window.location.href;
                },
                SetField: function (target, fieldName, data) {
                    var O = target;
                    //if (O[fieldName])
                    if (CirnoGame.Helper.Has(O, fieldName)) {
                        O[fieldName] = data;
                        return;
                    }
                    if (O[System.String.concat("set", fieldName)]) {
                        O[System.String.concat("set", fieldName)](data);
                        return;
                    }
                    var s = "";
                    try {
                        s = System.String.concat("Helper set field: Field \"", fieldName, "\" was not in " + target.GetType().FullName, ".");
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        s = System.String.concat("Helper set field: Field \"", fieldName, "\" was not in " + target, ".");
                    }
                    //Console.WriteLine(s);
                    console.log(s);
                },
                CopyFields: function (source, target, Fields) {
                    if (Fields === void 0) { Fields = null; }
                    if (Fields == null) {
                        Fields = Object.keys(source);
                    }
                    var i = 0;
                    while (i < Fields.length) {
                        var f = Fields[System.Array.index(i, Fields)];
                        CirnoGame.Helper.SetField(target, f, CirnoGame.Helper.GetField(source, f));
                        i = (i + 1) | 0;
                    }
                },
                KeyCodeToString: function (keycode) {
                    var codenames = System.Array.init(["", "", "", "CANCEL", "", "", "HELP", "", "BACK_SPACE", "TAB", "", "", "CLEAR", "ENTER", "ENTER_SPECIAL", "", "SHIFT", "CONTROL", "ALT", "PAUSE", "CAPS_LOCK", "KANA", "EISU", "JUNJA", "FINAL", "HANJA", "", "ESCAPE", "CONVERT", "NONCONVERT", "ACCEPT", "MODECHANGE", "SPACE", "PAGE_UP", "PAGE_DOWN", "END", "HOME", "LEFT", "UP", "RIGHT", "DOWN", "SELECT", "PRINT", "EXECUTE", "PRINTSCREEN", "INSERT", "DELETE", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "COLON", "SEMICOLON", "LESS_THAN", "EQUALS", "GREATER_THAN", "QUESTION_MARK", "AT", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "OS_KEY", "", "CONTEXT_MENU", "", "SLEEP", "NUMPAD0", "NUMPAD1", "NUMPAD2", "NUMPAD3", "NUMPAD4", "NUMPAD5", "NUMPAD6", "NUMPAD7", "NUMPAD8", "NUMPAD9", "MULTIPLY", "ADD", "SEPARATOR", "SUBTRACT", "DECIMAL", "DIVIDE", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "NUM_LOCK", "SCROLL_LOCK", "WIN_OEM_FJ_JISHO", "WIN_OEM_FJ_MASSHOU", "WIN_OEM_FJ_TOUROKU", "WIN_OEM_FJ_LOYA", "WIN_OEM_FJ_ROYA", "", "", "", "", "", "", "", "", "", "CIRCUMFLEX", "EXCLAMATION", "DOUBLE_QUOTE", "HASH", "DOLLAR", "PERCENT", "AMPERSAND", "UNDERSCORE", "OPEN_PAREN", "CLOSE_PAREN", "ASTERISK", "PLUS", "PIPE", "HYPHEN_MINUS", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "TILDE", "", "", "", "", "VOLUME_MUTE", "VOLUME_DOWN", "VOLUME_UP", "", "", "SEMICOLON", "EQUALS", "COMMA", "MINUS", "PERIOD", "SLASH", "BACK_QUOTE", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "OPEN_BRACKET", "BACK_SLASH", "CLOSE_BRACKET", "QUOTE", "", "META", "ALTGR", "", "WIN_ICO_HELP", "WIN_ICO_00", "", "WIN_ICO_CLEAR", "", "", "WIN_OEM_RESET", "WIN_OEM_JUMP", "WIN_OEM_PA1", "WIN_OEM_PA2", "WIN_OEM_PA3", "WIN_OEM_WSCTRL", "WIN_OEM_CUSEL", "WIN_OEM_ATTN", "WIN_OEM_FINISH", "WIN_OEM_COPY", "WIN_OEM_AUTO", "WIN_OEM_ENLW", "WIN_OEM_BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN_OEM_CLEAR", ""], System.String);
                    if (keycode >= 0 && keycode < codenames.length) {
                        return codenames[System.Array.index(keycode, codenames)];
                    }
                    var kc = keycode;
                    return String.FromCharCode(kc);
                },
                MakeShallowCopy: function (source, fieldNames) {
                    if (fieldNames === void 0) { fieldNames = null; }
                    var target = { };
                    var Fields = fieldNames;
                    if (Fields == null) {
                        Fields = Object.keys(source);
                    }
                    var i = 0;
                    while (i < Fields.length) {
                        var f = Fields[System.Array.index(i, Fields)];
                        target[f] = CirnoGame.Helper.GetField(source, f);
                        i = (i + 1) | 0;
                    }
                    return target;
                }
            }
        }
    });

    Bridge.define("CirnoGame.HelperExtensions", {
        statics: {
            methods: {
                Pick: function (T, list, RND) {
                    var $t;
                    if (RND === void 0) { RND = null; }
                    if (RND == null) {
                        RND = new System.Random.ctor();
                    }
                    var L = new (System.Collections.Generic.List$1(T)).ctor();
                    $t = Bridge.getEnumerator(list, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            L.add(item);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }return L.getItem(RND.next$1(L.Count));
                },
                ForEach: function (T, list, action) {
                    var $t;
                    $t = Bridge.getEnumerator(list, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            action(item);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }},
                ForEach$1: function (T, list, methodName) {
                    var $t;
                    $t = Bridge.getEnumerator(list, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            var A = Bridge.unbox(item[methodName]);
                            A();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$dispose();
                        }
                    }},
                AddIfNew: function (T, list, item) {
                    var i = 0;
                    var ln = list.Count;
                    var A = item;
                    while (i < ln) {
                        var B = list.getItem(i);
                        if (A == B) {
                            return;
                        }
                        i = (i + 1) | 0;
                    }
                    list.add(item);
                    /* if (!list.Contains(item))
                    {
                       list.Add(item);
                    }*/
                },
                RemoveAll: function (T, list, predicate) {

                    //foreach (var item in list)
                    var i = 0;
                    while (i < list.Count) {
                        var item = list.getItem(i);
                        //action(item);
                        if (predicate(item)) {
                            //list.rem
                            list.remove(item);
                            i = (i - 1) | 0;
                        }
                        i = (i + 1) | 0;
                    }
                },
                PushIfNew: function (T, list, val) {
                    if (!CirnoGame.HelperExtensions.ContainsB(T, list, val)) {
                        list.push(val);
                    }
                },
                PushRange: function (T, list, val) {
                    if (val === void 0) { val = []; }
                    var i = 0;
                    while (i < val.length) {
                        list.push(val[System.Array.index(i, val)]);
                        i = (i + 1) | 0;
                    }
                },
                Clear$1: function (T, list) {
                    var i = list.length;
                    while (Bridge.identity(i, (i = (i - 1) | 0)) > 0) {
                        list.pop();
                    }
                },
                Clear: function (G) {
                    var C = G.canvas;
                    G.clearRect(0, 0, C.width, C.height);
                },
                ReplaceAll: function (T, list, Source, Destination) {
                    var i = -1;
                    i = CirnoGame.HelperExtensions.IndexOf(T, list, Source, ((i + 1) | 0), 3);
                    var ln = Source.length;
                    while (i >= 0) {
                        var j = 0;

                        while (j < ln) {
                            list[System.Array.index(((i + j) | 0), list)] = Destination[System.Array.index(j, Destination)];
                            j = (j + 1) | 0;
                        }
                        i = CirnoGame.HelperExtensions.IndexOf(T, list, Source, ((i + 1) | 0), 3);
                    }
                },
                WhereB: function (T, list, predicate) {
                    var ret = System.Array.init(0, null, System.Object);
                    var i = 0;
                    var ln = list.length;
                    while (i < ln) {
                        var item = list[System.Array.index(i, list)];
                        if (predicate(item)) {
                            ret.push(item);
                        }
                        i = (i + 1) | 0;
                    }

                    return Bridge.unbox(ret);
                },
                ContainsB$1: function (T, list, Value) {
                    var L = Bridge.unbox(list.items);
                    return CirnoGame.HelperExtensions.ContainsB(T, L, Value);
                },
                ContainsB: function (T, list, Value) {
                    var i = 0;
                    var ln = list.length;
                    while (i < ln) {
                        var O = list[System.Array.index(i, list)];
                        if (O == Value) {
                            return true;
                        }
                        i = (i + 1) | 0;
                    }
                    return false;
                },
                IndexOf: function (T, list, Value, index, structureSize) {
                    if (index === void 0) { index = 0; }
                    if (structureSize === void 0) { structureSize = 1; }
                    var i = index;
                    var ln = list.length;
                    var vln = Value.length;
                    var O = Value[System.Array.index(0, Value)];
                    var A;
                    var B;
                    while (i < ln && i >= 0) {
                        /* var c = i+1;
                        i = -1;
                        B = Value[0];
                        while (c < list.Length && i==-1)
                        {
                           A = list[c];
                           if (A == B)
                           {
                               i = c;
                           }
                           c++;
                        }
                        if (i == -1)
                        {
                           return -1;
                        }*/
                        i = list.indexOf(Bridge.unbox(O), ((i + 1) | 0));
                        while (i >= 0 && i % structureSize > 0) {
                            i = list.indexOf(Bridge.unbox(O), ((i + 1) | 0));
                        }
                        if (i === -1) {
                            return -1;
                        }
                        var k = 1;
                        var l = (i + 1) | 0;

                        if (i < ln && i >= 0) {
                            var ok = true;
                            while (ok && k < vln) {
                                A = list[System.Array.index(l, list)];
                                B = Value[System.Array.index(k, Value)];
                                if (!Bridge.referenceEquals(A, B)) {
                                    ok = false;
                                }
                                k = (k + 1) | 0;
                                l = (l + 1) | 0;
                            }
                            if (ok) {
                                return i;
                            }
                        }
                    }
                    return -1;
                },
                Identical: function (T, list, list2) {
                    if (Bridge.referenceEquals(list, list2)) {
                        return true;
                    }
                    if (list == null || list2 == null) {
                        return false;
                    }
                    var ln = list.length;
                    if (ln === list2.length) {
                        var i = 0;

                        while (i < ln) {
                            var A = list[System.Array.index(i, list)];
                            var B = list2[System.Array.index(i, list2)];
                            if (!Bridge.referenceEquals(A, B)) {
                                return false;
                            }
                            i = (i + 1) | 0;
                        }
                        return true;
                    }
                    return false;
                },
                ReverseOrderWithStructure: function (T, list, size) {
                    //T[] ret = new T[0];
                    var ret = new (System.Collections.Generic.List$1(T)).ctor();
                    var i = 0;
                    var ln = list.length;
                    while (i < ln) {
                        var j = 0;
                        while (j < size) {
                            //ret.Push(list[j]);
                            ret.insert(0, list[System.Array.index((((((size - 1) | 0)) - j) | 0), list)]);
                            j = (j + 1) | 0;
                        }
                        i = (i + size) | 0;
                    }
                },
                /**
                 * not yet tested with deep inheritence...
                 *
                 * @static
                 * @public
                 * @this CirnoGame.HelperExtensions
                 * @memberof CirnoGame.HelperExtensions
                 * @param   {Function}         T           
                 * @param   {System.Object}    instance
                 * @return  {boolean}
                 */
                IsInstanceOfTypeFast: function (T, instance) {
                    var C = Bridge.unbox(instance).ctor;
                    var A = Bridge.unbox(T.$$inheritors); //list of all types that inherit from this type
                    return (Bridge.referenceEquals(C, T) || (A != null && A.indexOf(C) >= 0));
                }
            }
        }
    });

    Bridge.define("CirnoGame.ICombatant", {
        $kind: "interface"
    });

    Bridge.define("CirnoGame.IHarmfulEntity", {
        $kind: "interface"
    });

    Bridge.define("CirnoGame.ILightProducer", {
        $kind: "interface"
    });

    Bridge.define("CirnoGame.ILightSource", {
        $kind: "interface"
    });

    Bridge.define("CirnoGame.InputController", {
        statics: {
            fields: {
                NumberOfActions: 0,
                GM: null
            },
            ctors: {
                init: function () {
                    this.NumberOfActions = 8;
                }
            }
        },
        fields: {
            InputMapping: null
        },
        props: {
            id: null
        },
        ctors: {
            ctor: function (id) {
                if (id === void 0) { id = "Keyboard"; }

                this.$initialize();
                this.id = id;
                this.InputMapping = new (System.Collections.Generic.List$1(CirnoGame.InputMap)).ctor();

                if (Bridge.referenceEquals(id, "Keyboard")) {
                    this.initkeyboard();
                } else {
                    this.initgamepad();
                }
                if (CirnoGame.InputController.GM == null) {
                    if (CirnoGame.GamePadManager._this == null) {
                        CirnoGame.GamePadManager._this = new CirnoGame.GamePadManager();
                    }
                    CirnoGame.InputController.GM = CirnoGame.GamePadManager._this;
                }
            }
        },
        methods: {
            CopyMap: function () {
                /* dynamic D = new object();
                return D;*/
                var fields = System.Array.init(["map", "antimap", "name", "axis", "controllerID"], System.String);
                var ret = System.Array.init(this.InputMapping.Count, null, System.Object);
                var i = 0;
                while (i < ret.length) {
                    ret[System.Array.index(i, ret)] = CirnoGame.Helper.MakeShallowCopy(this.InputMapping.getItem(i), fields);
                    i = (i + 1) | 0;
                }
                return ret;
            },
            CopyFromMap: function (Map) {
                var fields = System.Array.init(["map", "antimap", "name", "axis", "controllerID"], System.String);

                var i = 0;
                while (i < Map.length) {
                    if (i >= this.InputMapping.Count) {
                        this.InputMapping.add(new CirnoGame.InputMap.ctor());
                    }
                    var IM = this.InputMapping.getItem(i);
                    CirnoGame.Helper.CopyFields(Map[System.Array.index(i, Map)], IM, fields);
                    //ret[i] = Helper.MakeShallowCopy(InputMapping[i], fields);
                    i = (i + 1) | 0;
                }
            },
            initkeyboard: function () {
                var i = 0;
                while (i < CirnoGame.InputController.NumberOfActions) {
                    var map = new CirnoGame.InputMap.$ctor1(-1);
                    if (i === 0) {
                        map.map = 39;
                        map.antimap = 37;

                        /* map.map = 68;
                        map.antimap= 65;*/
                    }
                    if (i === 1) {
                        map.map = 40;
                        map.antimap = 38;

                        /* map.map = 83;
                        map.antimap = 87;*/
                    }

                    if (i === 2) {
                        //map.map = 32;
                        map.map = 90;
                    }
                    if (i === 3) {
                        map.map = 88;
                    }
                    if (i === 4) {
                        map.map = 65; //a
                    }
                    if (i === 5) {
                        map.map = 13; //enter
                    }
                    this.InputMapping.add(map);
                    i = (i + 1) | 0;
                }
            },
            initgamepad: function () {
                var i = 0;
                while (i < CirnoGame.InputController.NumberOfActions) {
                    var map = new CirnoGame.InputMap.$ctor1(-1);
                    if (i === 0) {
                        map.map = 0;
                        map.axis = true;
                    }
                    if (i === 1) {
                        map.map = 1;
                        map.axis = true;
                    }

                    if (i > 1) {
                        map.map = (i - 2) | 0;
                    }
                    this.InputMapping.add(map);
                    i = (i + 1) | 0;
                }
            },
            getState: function (action, map) {
                if (map === void 0) { map = null; }
                if (map == null) {
                    map = this.InputMapping.getItem(action);
                }
                /* InputController IC = this;
                if (map.controller != null)
                {
                   IC = map.controller;
                }*/
                var TID = this.id;
                if (!Bridge.referenceEquals(map.controllerID, "")) {
                    TID = map.controllerID;
                }

                if (Bridge.referenceEquals(TID, "Keyboard")) {
                    return this.getKeyboardMapState(map);
                } else if (Bridge.referenceEquals(TID, "Mouse")) {
                    return this.getMouseMapState(map);
                } else {
                    return this.getGamepadMapState(map);
                }
            },
            getPressed: function (action, map) {
                if (map === void 0) { map = null; }
                return this.getState(action, map) >= 0.7;
            },
            FindAnyPressedGamePadInput: function () {
                var ret = new CirnoGame.InputMap.ctor();
                var L = CirnoGame.GamePadManager._this.activeGamepads;
                L.forEach(function (G) {
                    if (ret.map === -1) {
                        ret.controllerID = G.id;
                        var GB = System.Linq.Enumerable.from(G.buttons).where(function (B) {
                                return B.pressed;
                            }).toArray(CirnoGame.GamePadButton);
                        if (GB.length > 0) {
                            ret.axis = false;
                            var tmp = GB[System.Array.index(0, GB)];
                            ret.map = new (System.Collections.Generic.List$1(CirnoGame.GamePadButton)).$ctor1(G.buttons).indexOf(tmp);
                        } else {
                            var i = 0;
                            while (i < G.axes.length && ret.map === -1) {
                                if (Math.abs(G.axes[System.Array.index(i, G.axes)]) > 0.7 && Math.abs(G.axes[System.Array.index(i, G.axes)]) < 2.0) {
                                    ret.axis = true;
                                    ret.map = i;
                                    if (G.axes[System.Array.index(i, G.axes)] < 0) {
                                        ret.name = "anti";
                                        ret.antimap = i;
                                    }
                                }
                                i = (i + 1) | 0;
                            }
                        }
                    }
                });
                if (ret.map !== -1) {
                    return ret;
                }
                return null;
            },
            getMapControllerID: function (map) {
                if (!Bridge.referenceEquals(map.controllerID, "")) {
                    return map.controllerID;
                } else {
                    return this.id;
                }
            },
            getMapControllerID$1: function (action) {
                return this.getMapControllerID(this.InputMapping.getItem(action));
            },
            getGamepadMapState: function (map) {
                var TID = this.id;
                if (!Bridge.referenceEquals(map.controllerID, "")) {
                    TID = map.controllerID;
                }
                var P = CirnoGame.GamePadManager._this.GetPad(TID);
                if (P == null || !P.connected) {
                    return 0;
                }
                if (!map.axis) {
                    if (P.buttons[System.Array.index(map.map, P.buttons)].pressed) {
                        return 1;
                    } else if (map.antimap >= 0 && P.buttons[System.Array.index(map.antimap, P.buttons)].pressed) {
                        return -1;
                    }
                    return 0;
                } else {
                    return P.axes[System.Array.index(map.map, P.axes)];
                }
            },
            getKeyboardMapState: function (map) {
                var L = CirnoGame.KeyboardManager._this.PressedButtons;
                if (L.contains(map.map)) {
                    return 1.0;
                } else if (L.contains(map.antimap)) {
                    return -1.0;
                }
                return 0;
            },
            getMouseMapState: function (map) {
                var L = CirnoGame.KeyboardManager._this.PressedMouseButtons;
                if (L.contains(map.map)) {
                    return 1.0;
                } else if (L.contains(map.antimap)) {
                    return -1.0;
                }
                return 0;
            }
        }
    });

    Bridge.define("CirnoGame.InputControllerManager", {
        statics: {
            fields: {
                __this: null
            },
            props: {
                _this: {
                    get: function () {
                        if (CirnoGame.InputControllerManager.__this == null) {
                            CirnoGame.InputControllerManager.__this = new CirnoGame.InputControllerManager();
                        }
                        return CirnoGame.InputControllerManager.__this;
                    }
                }
            },
            methods: {
                Init: function () {
                    if (CirnoGame.InputControllerManager.__this == null) {
                        CirnoGame.InputControllerManager.__this = new CirnoGame.InputControllerManager();
                    }
                }
            }
        },
        fields: {
            Controllers: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Controllers = new (System.Collections.Generic.List$1(CirnoGame.InputController)).ctor();

                this.Controllers.add(new CirnoGame.InputController());
                var gamepads = CirnoGame.GamePadManager._this.activeGamepads;
                var i = 0;
                while (i < gamepads.Count) {
                    this.Controllers.add(new CirnoGame.InputController(gamepads.getItem(i).id));
                    i = (i + 1) | 0;
                }
            }
        }
    });

    Bridge.define("CirnoGame.InputMap", {
        fields: {
            map: 0,
            antimap: 0,
            name: null,
            axis: false,
            controllerID: null
        },
        ctors: {
            init: function () {
                this.map = -1;
                this.antimap = -1;
                this.name = "";
                this.axis = false;
                this.controllerID = "";
            },
            ctor: function () {
                this.$initialize();
                this.axis = false;
            },
            $ctor1: function (map, antimap, axis) {
                if (antimap === void 0) { antimap = -1; }
                if (axis === void 0) { axis = false; }

                this.$initialize();
                this.map = map;
                this.antimap = antimap;
                this.axis = axis;
            }
        }
    });

    Bridge.define("CirnoGame.JSONArchive", {
        statics: {
            methods: {
                Open: function (ArchiveFile, action) {
                    var XHR = new XMLHttpRequest();
                    //XHR.ResponseType = XMLHttpRequestResponseType.Blob;
                    XHR.onload = function (Evt) {
                        action(new CirnoGame.JSONArchive(XHR.responseText));
                    };
                    XHR.open("GET", ArchiveFile, false);
                    XHR.send();
                    //if (XHR.Status)

                }
            }
        },
        fields: {
            Data: null,
            Images: null
        },
        ctors: {
            init: function () {
                this.Data = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                this.Images = new (System.Collections.Generic.Dictionary$2(System.String,HTMLImageElement))();
            },
            ctor: function (Archive) {
                this.$initialize();
                //this.Archive = Archive;
                var D = JSON.parse(Archive);
                var i = 0;
                var ln = D.length;
                while (i < ln) {
                    var A = D[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), D)];
                    this.Data.set(A[System.Array.index(0, A)].toLowerCase(), A[System.Array.index(1, A)]);
                }
            }
        },
        methods: {
            PreloadImages: function (action, delay) {
                if (delay === void 0) { delay = 100; }
                var K = System.Linq.Enumerable.from(this.Data.getKeys()).toArray();
                var i = 0;
                while (i < this.Data.count) {
                    var A = K[System.Array.index(i, K)];
                    this.GetImage(A);
                    i = (i + 1) | 0;
                }
                Bridge.global.setTimeout(action, delay);
            },
            GetData: function (file) {
                var f = file.toLowerCase();
                if (this.Data.containsKey(f)) {
                    return this.Data.get(f);
                }
                return null;
            },
            GetImage: function (file) {
                var f = file.toLowerCase();
                if (this.Images.containsKey(f)) {
                    return this.Images.get(f);
                }
                var D = this.GetData(f);
                if (D == null) {
                    return null;
                }
                var ret = new Image();
                ret.onload = function (E) {
                    console.log(System.String.concat("loaded ", f, " from JSON!"));
                };
                ret.src = System.String.concat("data:image/png;base64,", D);
                this.Images.set(f, ret);
                return ret;
            }
        }
    });

    Bridge.define("CirnoGame.KeyboardManager", {
        statics: {
            fields: {
                __this: null
            },
            props: {
                _this: {
                    get: function () {
                        if (CirnoGame.KeyboardManager.__this == null) {
                            CirnoGame.KeyboardManager.__this = new CirnoGame.KeyboardManager();
                        }
                        return CirnoGame.KeyboardManager.__this;
                    }
                }
            },
            methods: {
                Init: function () {
                    if (CirnoGame.KeyboardManager.__this == null) {
                        CirnoGame.KeyboardManager.__this = new CirnoGame.KeyboardManager();
                    }
                },
                Update: function () {
                    CirnoGame.KeyboardManager.__this.TappedButtons.clear();
                    CirnoGame.KeyboardManager.__this.TappedMouseButtons.clear();
                },
                NeverinBounds: function (evt) {
                    return !CirnoGame.App.ScreenBounds.containsPoint$1(CirnoGame.KeyboardManager._this.CMouse.X, CirnoGame.KeyboardManager._this.CMouse.Y);
                },
                onKeyDown: function (evt) {
                    var keyCode = evt.keyCode;

                    if (!CirnoGame.KeyboardManager.__this.PressedButtons.contains(keyCode)) {
                        CirnoGame.KeyboardManager.__this.PressedButtons.add(keyCode);
                        CirnoGame.KeyboardManager.__this.TappedButtons.add(keyCode);
                    }
                    if ((keyCode >= 37 && keyCode <= 40) || keyCode === 32 || keyCode === 112) {
                        return false;
                    }
                    return true;
                },
                onKeyUp: function (evt) {
                    var keyCode = evt.keyCode;

                    if (CirnoGame.KeyboardManager.__this.PressedButtons.contains(keyCode)) {
                        CirnoGame.KeyboardManager.__this.PressedButtons.remove(keyCode);
                    }
                },
                onMouseDown: function (evt) {
                    var btn = evt.button;
                    if (!CirnoGame.KeyboardManager.__this.PressedMouseButtons.contains(btn)) {
                        CirnoGame.KeyboardManager.__this.PressedMouseButtons.add(btn);
                        CirnoGame.KeyboardManager.__this.TappedMouseButtons.add(btn);
                    }
                    return btn < 1;
                },
                onMouseUp: function (evt) {
                    var btn = evt.button;
                    if (CirnoGame.KeyboardManager.__this.PressedMouseButtons.contains(btn)) {
                        CirnoGame.KeyboardManager.__this.PressedMouseButtons.remove(btn);
                    }
                    return btn < 1;
                },
                onMouseMove: function (evt) {
                    CirnoGame.KeyboardManager._this.MousePosition = new CirnoGame.Vector2(evt.clientX, evt.clientY);

                    //float left = float.Parse(App.Canvas.Style.Left.Replace("px", ""));
                    if (System.String.indexOf(CirnoGame.App.Div.style.left, "px") < 0) {
                        return;
                    }
                    var left = System.Single.parse(System.String.replaceAll(CirnoGame.App.Div.style.left, "px", ""));
                    var x = evt.clientX - left;
                    var y = evt.clientY;

                    //float scale = (App.Canvas.Width * 1.25f) / float.Parse(App.Canvas.Style.Width.Replace("px", ""));

                    //float scale = (App.Canvas.Width) / float.Parse(App.Canvas.Style.Width.Replace("px", ""));
                    var scale = (CirnoGame.App.Canvas.width) / System.Single.parse(System.String.replaceAll(CirnoGame.App.Div.style.width, "px", ""));
                    CirnoGame.KeyboardManager._this.CMouse = new CirnoGame.Vector2(x * scale, y * scale);
                    //Console.WriteLine("mx:"+_this.CMouse.x + " my:" + _this.CMouse.y);
                }
            }
        },
        fields: {
            PressedButtons: null,
            TappedButtons: null,
            PressedMouseButtons: null,
            TappedMouseButtons: null,
            MousePosition: null,
            CMouse: null
        },
        ctors: {
            init: function () {
                this.MousePosition = new CirnoGame.Vector2();
                this.CMouse = new CirnoGame.Vector2();
            },
            ctor: function () {
                this.$initialize();
                this.PressedButtons = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.TappedButtons = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.PressedMouseButtons = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.TappedMouseButtons = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                var KD = CirnoGame.KeyboardManager.onKeyDown;
                document.onkeydown = KD;

                var KU = CirnoGame.KeyboardManager.onKeyUp;
                document.onkeyup = KU;

                var MM = CirnoGame.KeyboardManager.onMouseMove;
                document.onmousemove = MM;

                var MD = CirnoGame.KeyboardManager.onMouseDown;
                document.onmousedown = MD;

                var MU = CirnoGame.KeyboardManager.onMouseUp;
                document.onmouseup = MU;

                var NB = CirnoGame.KeyboardManager.NeverinBounds;
                document.oncontextmenu = NB;
            }
        }
    });

    Bridge.define("CirnoGame.MapGenerator", {
        statics: {
            fields: {
                rootroom: null,
                doorroom: null,
                keyroom: null,
                blank: null
            },
            ctors: {
                init: function () {
                    this.blank = new CirnoGame.TileData();
                }
            },
            methods: {
                Generate: function (game) {
                    var player = game.player; //player character
                    var map = game.TM; //the tilemap to generate
                    var bounds = game.stageBounds; //the bounds to stay within

                    //List<Rectangle> rooms = new List<Rectangle>();

                    var X = 0;
                    var Y = 0;
                    if (Math.random() < 0.5) {
                        X = Math.random() < 0.5 ? -1 : 1;
                    } else {
                        Y = Math.random() < 0.5 ? -1 : 1;
                    }
                    var T = new CirnoGame.TileData();
                    T.texture = 1;
                    T.enabled = true;
                    T.visible = true;
                    T.map = map;
                    T.solid = true;
                    T.topSolid = true;
                    //map.SetAll(T);
                    player.x = (bounds.left + bounds.right) / 2;
                    player.y = (bounds.top + bounds.bottom) / 2;
                    //pathMiner(game,map.columns/2,map.rows/2,X,Y,20);
                    CirnoGame.MapGenerator.pathMiner(game, ((Bridge.Int.div(map.columns, 2)) | 0), ((Bridge.Int.div(map.rows, 4)) | 0), X, Y, 30);

                    var V = CirnoGame.MapGenerator.FindEmptySpace(game);
                    if (CirnoGame.Vector2.op_Inequality(V, null)) {
                        player.x = V.X;
                        player.y = V.Y;
                        console.log("spawning at:" + Bridge.Int.clip32(V.X) + "," + Bridge.Int.clip32(V.Y));
                    } else {
                        console.log("cannot locate a spawn point...");
                    }
                },
                BoxyGenerate: function (game) {
                    console.log("boxy generate");
                    var player = game.player; //player character
                    var map = game.TM; //the tilemap to generate
                    var bounds = game.stageBounds; //the bounds to stay within
                    CirnoGame.MapRoom.PlacedRooms = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();
                    CirnoGame.MapRoom.OpenRooms = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();

                    var SX = (Bridge.Int.div(map.columns, 2)) | 0;
                    var SY = (Bridge.Int.div(map.rows, 3)) | 0;
                    var root = new CirnoGame.MapRoom();
                    root.SX = SX;
                    root.SY = SY;
                    root.EX = (((SX + 6) | 0) + Bridge.Int.clip32((Math.random() * 10))) | 0;
                    root.EY = (((SY + 6) | 0) + Bridge.Int.clip32((Math.random() * 10))) | 0;

                    root.game = game;
                    CirnoGame.MapGenerator.rootroom = root;

                    //var roomtotal = 12+(int)(Math.Random() * 10);
                    //var roomtotal = 16 + (int)(Math.Random() * 16);

                    //var roomMinimum = 16;
                    var roomMinimum = (10 + Math.min(game.level, 4)) | 0;
                    var roomtotal = (roomMinimum + Bridge.Int.clip32((Math.random() * (roomMinimum)))) | 0;
                    //var rooms = 0;

                    var attempts = 400;
                    var R = root;
                    if (!root.PlaceAndExpand()) {
                        console.log("Couldn't generate root room.");
                        return;
                    }
                    while (CirnoGame.MapRoom.OpenRooms.Count < roomtotal && attempts > 0) {
                        var L = CirnoGame.HelperExtensions.Pick(Bridge.global.CirnoGame.MapRoom, CirnoGame.MapRoom.FindValidUnplacedRooms());
                        if (L.PlaceAndExpand()) {
                            //rooms++;
                        }
                        attempts = (attempts - 1) | 0;
                    }
                    var RR = CirnoGame.Rectangle.op_Subtraction(game.stageBounds, game.TM.position);
                    RR.width -= game.TM.tilesize;
                    RR.height -= game.TM.tilesize;
                    game.TM.DrawRect(RR);
                    game.TM.ApplyBreakable();
                    var secrets = Math.random() < 0.3 ? 1 : 0;
                    if (secrets > 0 && Math.random() < 0.3) {
                        secrets = (secrets + 1) | 0;
                    }
                    while (secrets > 0) {
                        var L1 = CirnoGame.HelperExtensions.Pick(Bridge.global.CirnoGame.MapRoom, CirnoGame.MapRoom.FindValidUnplacedRooms());
                        if (L1.PlaceAndExpand()) {
                            L1.MakeSecret();
                            var lever = CirnoGame.MapGenerator.AttemptCreateLever(game, L1);
                            game.AddEntity(lever);
                            console.log("Placed secret room at:" + L1.SX + "," + L1.SY);
                        }
                        secrets = (secrets - 1) | 0;
                    }
                    var V = CirnoGame.MapGenerator.FindEmptySpace(game);
                    CirnoGame.MapGenerator.keyroom = null;
                    if (CirnoGame.Vector2.op_Inequality(V, null)) {
                        /* player.x = V.X;
                        player.y = V.Y;*/
                        game.Door.Position.CopyFrom(V);
                        game.Door.DropToGround();
                        CirnoGame.MapGenerator.doorroom = CirnoGame.MapRoom.FindRoom(game.Door.Position);
                        if (CirnoGame.MapGenerator.doorroom == null) {
                            console.log("Door room could not be determined...");
                        }

                        var PC = player;
                        //PC.MoveToNewSpawn(V);
                        PC.MoveToNewSpawn(game.Door.Position);
                        console.log("spawning at:" + Bridge.Int.clip32(V.X) + "," + Bridge.Int.clip32(V.Y));
                    } else {
                        console.log("cannot locate a spawn point...");
                    }

                },
                AttemptCreateLever: function (game, Target) {
                    var i = 0;
                    while (i < 20) {
                        var lever = CirnoGame.RoomOpeningLever.FindAndPlaceOnWall(game, CirnoGame.MapRoom.FindAnyEmptySpot(), Target);
                        if (lever != null) {
                            return lever;
                        }
                    }
                    return null;
                },
                FindEmptySpace: function (game) {
                    var map = game.TM;
                    var bounds = game.stageBounds; //the bounds to stay within
                    var i = 0;
                    var ret = new CirnoGame.Vector2();
                    var tmp = new CirnoGame.Vector2();
                    while (i < 2000) {
                        ret.X = bounds.left + (Math.random() * (bounds.width - map.tilesize));
                        ret.Y = bounds.top + (Math.random() * (bounds.bottom - map.tilesize));
                        if (!map.CheckForTile(ret).visible) {
                            tmp.X = ret.X;
                            tmp.Y = ret.Y - map.tilesize;
                            if (!map.CheckForTile(ret).visible) {
                                return ret;
                            }
                        }
                        i = (i + 1) | 0;
                    }
                    //return ret;
                    return null;
                },
                pathMiner: function (game, X, Y, Xdir, YDir, limit) {
                    if (limit <= 0) {
                        return;
                    }
                    var player = game.player; //player character
                    var map = game.TM; //the tilemap to generate
                    var bounds = game.stageBounds; //the bounds to stay within

                    var dist = 0;
                    var pow = 1;
                    if (YDir !== 0) {
                        pow = 2;
                    }
                    while (dist < 7 && Math.random() < (Math.pow(0.95, pow))) {
                        X = (X + Xdir) | 0;
                        Y = (Y + YDir) | 0;
                        CirnoGame.MapGenerator.Erase(map, X, Y, 3);
                        if (Math.random() < (0.2 * pow)) {
                            if (Xdir === 0) {
                                X = (X + (Math.random() < 0.5 ? 1 : -1)) | 0;
                            } else {
                                Y = (Y + (Math.random() < 0.5 ? 1 : -1)) | 0;
                            }
                        } else if (Math.random() < (0.02 * pow) && limit > 4) {
                            limit = (Bridge.Int.div(limit, 2)) | 0;
                            var XD = Math.random() < 0.5 ? YDir : ((-YDir) | 0);
                            var YD = Math.random() < 0.5 ? Xdir : ((-Xdir) | 0);
                            CirnoGame.MapGenerator.pathMiner(game, X, Y, XD, YD, limit);
                        }
                    }
                    limit = (limit - 1) | 0;
                    if (limit > 1) {
                        CirnoGame.MapGenerator.roomMiner(game, X, Y, Xdir, YDir, limit);
                    }

                },
                roomMiner: function (game, X, Y, Xdir, YDir, limit) {
                    if (limit <= 0) {
                        return;
                    }

                    var SZ = Bridge.Int.clip32(4 + (Math.random() * 4));
                    X = (X + (Bridge.Int.mul(Xdir, (((Bridge.Int.div(SZ, 2)) | 0))))) | 0;
                    Y = (Y + (Bridge.Int.mul(YDir, (((Bridge.Int.div(SZ, 2)) | 0))))) | 0;

                    //Erase(game.TM, X, Y, (SZ * 2)+2);
                    CirnoGame.MapGenerator.EraseAndRando(game.TM, X, Y, (((Bridge.Int.mul(SZ, 2)) + 2) | 0));

                    var XD = Xdir;
                    var YD = YDir;
                    if (Math.random() < 0.2 || (YD !== 0 && Math.random() < 0.65) || YD < 0) {
                        XD = Math.random() < 0.5 ? YDir : ((-YDir) | 0);
                        YD = Math.random() < 0.5 ? Xdir : ((-Xdir) | 0);
                        if (YD < 0) {
                            YD = (-YD) | 0;
                        }
                    }
                    Xdir = XD;
                    YDir = YD;

                    X = (X + (Bridge.Int.mul(Xdir, (((Bridge.Int.div(SZ, 2)) | 0))))) | 0;
                    Y = (Y + (Bridge.Int.mul(YDir, (((Bridge.Int.div(SZ, 2)) | 0))))) | 0;

                    limit = (limit - 1) | 0;
                    CirnoGame.MapGenerator.pathMiner(game, X, Y, Xdir, YDir, limit);
                },
                Erase: function (TM, column, row, size) {
                    TM.ClearRect$1(((column - (((Bridge.Int.div(size, 2)) | 0))) | 0), ((row - (((Bridge.Int.div(size, 2)) | 0))) | 0), (size), (size));
                },
                EraseAndRando: function (TM, column, row, size) {
                    var SX = (column - (((Bridge.Int.div(size, 2)) | 0))) | 0;
                    var SY = (row - (((Bridge.Int.div(size, 2)) | 0))) | 0;
                    TM.ClearRect$1(SX, SY, (size), (size));
                    TM._GenRect(SX, SY, ((SX + (size)) | 0), ((SY + (size)) | 0));
                }
            }
        }
    });

    Bridge.define("CirnoGame.MapRoom", {
        statics: {
            fields: {
                PlacedRooms: null,
                OpenRooms: null,
                RNG: null
            },
            ctors: {
                init: function () {
                    this.PlacedRooms = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();
                    this.OpenRooms = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();
                    this.RNG = new System.Random.ctor();
                }
            },
            methods: {
                FindValidUnplacedRooms: function () {
                    var L = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();
                    var i = 0;
                    var ln = CirnoGame.MapRoom.OpenRooms.Count;
                    while (i < ln) {
                        var P = CirnoGame.MapRoom.OpenRooms.getItem(i);
                        L.addRange(System.Linq.Enumerable.from(P.ExitRooms).where(function (F) {
                                return F.CanBePlaced() && !F.placed;
                            }));
                        i = (i + 1) | 0;
                    }
                    return L;
                },
                FindRoom: function (V) {
                    var L = System.Linq.Enumerable.from(CirnoGame.MapRoom.OpenRooms).where(function (R) {
                            return R.ContainsPosition(V);
                        }).toArray(CirnoGame.MapRoom);
                    if (L.length > 0) {
                        return L[System.Array.index(0, L)];
                    }
                    return null;
                },
                FindAnyEmptySpot: function () {
                    if (CirnoGame.MapRoom.OpenRooms.Count < 1) {
                        return null;
                    }
                    var i = 0;
                    while (i < 10) {
                        var ret = CirnoGame.HelperExtensions.Pick(Bridge.global.CirnoGame.MapRoom, CirnoGame.MapRoom.OpenRooms, CirnoGame.MapRoom.RNG).FindEmptySpot();
                        if (CirnoGame.Vector2.op_Inequality(ret, null)) {
                            return ret;
                        }
                        i = (i + 1) | 0;
                    }
                    return null;
                }
            }
        },
        fields: {
            SX: 0,
            SY: 0,
            EX: 0,
            EY: 0,
            placed: false,
            secret: false,
            ExitRooms: null,
            parent: null,
            goldchests: null,
            game: null
        },
        ctors: {
            init: function () {
                this.placed = false;
                this.secret = false;
                this.ExitRooms = new (System.Collections.Generic.List$1(CirnoGame.MapRoom)).ctor();
                this.goldchests = System.Array.init(0, null, CirnoGame.Chest);
            }
        },
        methods: {
            IsValid: function () {
                var map = this.game.TM;
                if (this.SX >= 0 && this.SY >= 0 && this.EX < map.columns && this.EY < map.rows) {
                    //in bounds
                    return true;
                }
                return false;
            },
            CanBePlaced: function () {
                var map = this.game.TM;
                if (this.IsValid()) {
                    if (map.IsRectSolid(this.SX, this.SY, this.EX, this.EY)) {
                        return true;
                    }
                }
                return false;
            },
            GenerateAdjacentRooms: function () {
                var M = this.GenerateAdjacentRoom(-1, 0);
                if (M != null) {
                    this.ExitRooms.add(M);
                }
                M = this.GenerateAdjacentRoom(1, 0);
                if (M != null) {
                    this.ExitRooms.add(M);
                }
                if (Math.random() < 0.5) {
                    M = this.GenerateAdjacentRoom(0, -1);
                    if (M != null) {
                        this.ExitRooms.add(M);
                    }
                    M = this.GenerateAdjacentRoom(0, 1);
                    if (M != null) {
                        this.ExitRooms.add(M);
                    }
                }
            },
            GenerateAdjacentRoom: function (Xdir, Ydir) {
                /* var min = 6;
                var max = 18;*/
                var min = 5;
                var max = 13;
                var dif = (((max - min) | 0));
                var W = Bridge.Int.clip32(min + (Math.random() * dif));

                //min += 1;
                min = (min - 1) | 0;
                max = (max - 3) | 0;
                dif = (((max - min) | 0));
                var H = Bridge.Int.clip32(min + (Math.random() * dif));

                var X = -1;
                var Y = -1;
                if (Xdir !== 0) {
                    Y = Bridge.Int.clip32(this.SY + (Math.random() * (((this.EY - this.SY) | 0))));
                    if (Xdir < 0) {
                        X = (this.SX - W) | 0;
                    } else {
                        X = this.EX;
                    }
                } else if (Ydir !== 0) {
                    X = Bridge.Int.clip32(this.SX + Math.random() * ((((this.EX - this.SX) | 0))));
                    if (Ydir < 0) {
                        Y = (this.SY - H) | 0;
                    } else {
                        Y = this.EY;
                    }
                }

                if (X >= 0 && Y >= 0) {
                    var M = new CirnoGame.MapRoom();
                    M.SX = X;
                    M.SY = Y;
                    M.EX = (X + W) | 0;
                    M.EY = (Y + H) | 0;
                    M.parent = this;
                    M.game = this.game;
                    if (M.CanBePlaced()) {
                        return M;
                    }
                }
                return null;
            },
            ContainsTile: function (X, Y) {
                return X >= this.SX && Y >= this.SY && X < this.EX && Y < this.EY;
            },
            ContainsPosition: function (V) {
                var X = Bridge.Int.clip32((V.X - this.game.TM.position.X) / this.game.TM.tilesize);
                var Y = Bridge.Int.clip32((V.Y - this.game.TM.position.Y) / this.game.TM.tilesize);
                return X >= this.SX && Y >= this.SY && X < this.EX && Y < this.EY;
            },
            /**
             * clears out the room's area, and attempts to generate exitrooms.
             If the room is invalid it does nothing, and removes itself from it's parent list.
             *
             * @instance
             * @public
             * @this CirnoGame.MapRoom
             * @memberof CirnoGame.MapRoom
             * @return  {boolean}        returns true if it was valid and was placed.
             */
            PlaceAndExpand: function () {
                if (this.ExitRooms.Count < 1 && !this.placed && this.CanBePlaced()) {
                    this.Place();
                    if (this.placed) {
                        this.GenerateAdjacentRooms();
                    }
                    return this.placed;
                } else if (!this.placed) {
                    if (this.parent != null) {
                        if (CirnoGame.HelperExtensions.ContainsB$1(Bridge.global.CirnoGame.MapRoom, this.parent.ExitRooms, this)) {
                            this.parent.ExitRooms.remove(this);
                        }
                    }
                }
                return false;
            },
            GenerateGoldChests: function () {
                var locked = !CirnoGame.MapRoom.OpenRooms.contains(this);

                var V = this.FindEmptySpot();
                var chest = new CirnoGame.Chest(this.game);
                this.goldchests.push(chest);
                chest.ForceLocked = locked;
                chest.Position.CopyFrom(V);
                chest.Goldify();
                this.game.AddEntity(chest);

                var V2 = this.FindEmptySpot();
                var attempts = 0;
                while (Bridge.identity(attempts, (attempts = (attempts + 1) | 0)) < 5 && (CirnoGame.Vector2.op_Equality(V2, null) || Math.abs(V2.X - V.X) < 16)) {
                    V2 = this.FindEmptySpot();
                }

                if (CirnoGame.Vector2.op_Inequality(V2, null) && Math.abs(V2.X - V.X) > 16) {
                    chest = new CirnoGame.Chest(this.game);
                    this.goldchests.push(chest);
                    chest.Position.CopyFrom(V2);
                    chest.ForceLocked = locked;
                    chest.Goldify();
                    this.game.AddEntity(chest);
                }
            },
            NMakeSecret: function () {
                var TM = this.game.TM;
                var W = (this.EX - this.SX) | 0;
                var H = (this.EY - this.SY) | 0;
                //TM.FillRect(SX, SY, W, H);
                //ClearRoom();
                TM.DrawRect$1(this.SX, this.SY, W, H);
                TM.SetBreakableRect(this.SX, this.SY, W, H, false);
                TM.ClearRect$1(((this.SX + 1) | 0), ((this.SY + 1) | 0), ((W - 2) | 0), ((H - 2) | 0));

                if (CirnoGame.MapRoom.OpenRooms.contains(this)) {
                    CirnoGame.MapRoom.OpenRooms.remove(this);
                }
                this.secret = true;

                this.GenerateGoldChests();

                this.ForceRedraw();
            },
            MakeSecret: function () {
                var TM = this.game.TM;
                var W = (this.EX - this.SX) | 0;
                var H = (this.EY - this.SY) | 0;
                TM.FillRect(this.SX, this.SY, W, H);
                TM.SetBreakableRect(this.SX, this.SY, W, H, false);
                TM.SetBreakableRect(((this.SX + 1) | 0), ((this.SY + 1) | 0), ((W - 2) | 0), ((H - 2) | 0), true);
                if (CirnoGame.MapRoom.OpenRooms.contains(this)) {
                    CirnoGame.MapRoom.OpenRooms.remove(this);
                }
                this.secret = true;
            },
            NUnleashSecret: function () {
                var TM = this.game.TM;

                TM.ClearOuterRect(this.SX, this.SY, (((this.EX - this.SX) | 0)), (((this.EY - this.SY) | 0)), false);
                //TM.ClearRect(SX+1, SY+1, (EX - SX)-2, (EY - SY)-2);
                //TM._GenRect(SX, SY, EX, EY);

                CirnoGame.MapRoom.OpenRooms.add(this);
                CirnoGame.HelperExtensions.ForEach(Bridge.global.CirnoGame.Chest, this.goldchests, function (C) {
                    C.ForceLocked = false;
                });

                this.ForceRedraw();
            },
            UnleashSecret: function () {
                var TM = this.game.TM;

                TM.ClearRect$1(((this.SX + 1) | 0), ((this.SY + 1) | 0), (((((this.EX - this.SX) | 0)) - 2) | 0), (((((this.EY - this.SY) | 0)) - 2) | 0));
                TM._GenRect(this.SX, this.SY, this.EX, this.EY);

                CirnoGame.MapRoom.OpenRooms.add(this);

                this.GenerateGoldChests();
                this.ForceRedraw();
            },
            ClearRoom: function () {
                var TM = this.game.TM;

                TM.ClearRect$1(this.SX, this.SY, ((this.EX - this.SX) | 0), ((this.EY - this.SY) | 0));
            },
            GeneratePlatforms: function () {
                var TM = this.game.TM;
                TM._GenRect(this.SX, this.SY, this.EX, this.EY);
            },
            Place: function () {
                var TM = this.game.TM;
                TM.ClearRect$1(this.SX, this.SY, ((this.EX - this.SX) | 0), ((this.EY - this.SY) | 0));
                TM._GenRect(this.SX, this.SY, this.EX, this.EY);

                CirnoGame.MapRoom.PlacedRooms.add(this);
                CirnoGame.MapRoom.OpenRooms.add(this);
                this.placed = true;
            },
            ApplyBreakable: function () {
                var TM = this.game.TM;
                TM.ApplyBreakableRect(((this.SX - 2) | 0), ((this.SY - 2) | 0), (((((this.EX - this.SX) | 0)) + 4) | 0), (((((this.EY - this.SY) | 0)) + 4) | 0));
            },
            ForceRedraw: function () {
                var TM = this.game.TM;
                var X = (this.SX - 2) | 0;
                var Y = (this.SY - 2) | 0;
                var W = ((((this.EX - this.SX) | 0)) + 4) | 0;
                var H = ((((this.EY - this.SY) | 0)) + 4) | 0;
                TM.bg.clearRect(Bridge.Int.mul(Bridge.Int.clip32(TM.tilesize), X), Bridge.Int.mul(Bridge.Int.clip32(TM.tilesize), Y), Bridge.Int.mul(Bridge.Int.clip32(TM.tilesize), W), Bridge.Int.mul(Bridge.Int.clip32(TM.tilesize), H));

                TM.Redraw(TM.bg, X, Y, W, H);
            },
            FindEmptySpot: function () {
                var W = (this.EX - this.SX) | 0;
                var H = (this.EY - this.SY) | 0;
                var i = 0;
                var map = this.game.TM;
                while (i < 50) {
                    var X = Bridge.Int.clip32(this.SX + Math.random() * W);
                    var Y = Bridge.Int.clip32(this.SY + Math.random() * H);
                    var T = map.GetTile(X, Y);
                    if (T != null && (!T.enabled || !T.solid)) {
                        T = map.GetTile(X, ((Y - 1) | 0));
                        if (T != null && (!T.enabled || !T.solid)) {
                            return new CirnoGame.Vector2(map.position.X + (X * map.tilesize), map.position.Y + (Y * map.tilesize));
                        }
                    }
                    i = (i + 1) | 0;
                }
                return null;
            }
        }
    });

    Bridge.define("CirnoGame.MathHelper", {
        statics: {
            fields: {
                PI: 0,
                PI2: 0,
                PIOver2: 0
            },
            ctors: {
                init: function () {
                    this.PI = 3.14159274;
                    this.PI2 = 6.28318548;
                    this.PIOver2 = 1.57079637;
                }
            },
            methods: {
                DistanceBetweenPoints: function (A, B) {
                    return CirnoGame.MathHelper.DistanceBetweenPoints$1(A.X, A.Y, B.X, B.Y);
                },
                DistanceBetweenPoints$1: function (x1, y1, x2, y2) {
                    return Math.sqrt((Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2)));
                },
                Clamp$1: function (value, min, max) {
                    return Math.min(max, Math.max(min, value));
                },
                Clamp: function (value, min, max) {
                    if (min === void 0) { min = 0.0; }
                    if (max === void 0) { max = 1.0; }
                    return Math.min(max, Math.max(min, value));
                },
                Lerp$1: function (value1, value2, amount) {
                    return value1 + ((value2 - value1) * amount);
                },
                Lerp: function (D1, D2, lerp) {
                    lerp = CirnoGame.MathHelper.Clamp(lerp);
                    return (D1 * (1 - lerp)) + (D2 * lerp);
                },
                DegreesToRadians: function (degrees) {
                    return degrees * 0.0174532924;
                },
                RadiansToDegrees: function (radians) {
                    return radians * 57.29578;
                },
                GetAngle$1: function (a, b) {
                    var angle = Math.atan2(b.Y - a.Y, b.X - a.X);
                    return angle;
                },
                GetAngle: function (a) {
                    var angle = Math.atan2(a.Y, a.X);
                    return angle;
                },
                RoughDistanceBetweenPoints: function (a, b) {
                    //return (float)(Math.Abs(a.x - b.x) + Math.Abs(a.y - b.y));
                    return (CirnoGame.Vector2.op_Subtraction(a, b)).RoughLength;
                },
                MagnitudeOfRectangle: function (R) {
                    return R.width + R.height;
                },
                WrapRadians: function (radian) {
                    while (radian < -3.14159274) {
                        radian += CirnoGame.MathHelper.PI2;
                    }
                    while (radian >= CirnoGame.MathHelper.PI) {
                        radian -= CirnoGame.MathHelper.PI2;
                    }
                    return radian;
                    //return radian % PI2;
                },
                incrementTowards: function (current, destination, speed) {
                    if (current < destination) {
                        current += speed;
                        if (current > destination) {
                            current = destination;
                        }
                    }
                    if (current > destination) {
                        current -= speed;
                        if (current < destination) {
                            current = destination;
                        }
                    }
                    return current;
                },
                incrementTowards$1: function (current, destination, incspeed, decspeed) {
                    if (current < destination) {
                        current += incspeed;
                        if (current > destination) {
                            current = destination;
                        }
                    }
                    if (current > destination) {
                        current -= decspeed;
                        if (current < destination) {
                            current = destination;
                        }
                    }
                    return current;
                },
                RadianToVector: function (radian) {
                    return new CirnoGame.Vector2(Math.cos(radian), Math.sin(radian));
                },
                Within: function (val, min, max) {
                    return val >= min && val <= max;
                },
                Mean: function (val) {
                    if (val === void 0) { val = []; }
                    var ret = 0;
                    var i = 0;
                    while (i < val.length) {
                        ret += val[System.Array.index(i, val)];
                        i = (i + 1) | 0;
                    }
                    ret /= val.length;
                    return ret;
                },
                Decelerate: function (momentum, deceleration) {
                    var dir = momentum >= 0;
                    momentum = (dir ? momentum : -momentum) - deceleration;
                    if (momentum < 0) {
                        return 0;
                    }
                    return dir ? momentum : -momentum;
                }
            }
        }
    });

    Bridge.define("CirnoGame.Point", {
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }

                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("CirnoGame.Rectangle", {
        statics: {
            methods: {
                op_Addition: function (A, B) {
                    return new CirnoGame.Rectangle(A.x + B.X, A.y + B.Y, A.width, A.height);
                },
                op_Subtraction: function (A, B) {
                    return new CirnoGame.Rectangle(A.x - B.X, A.y - B.Y, A.width, A.height);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        },
        props: {
            left: {
                get: function () {
                    return this.x;
                },
                set: function (value) {
                    this.x = value;
                }
            },
            top: {
                get: function () {
                    return this.y;
                },
                set: function (value) {
                    this.y = value;
                }
            },
            right: {
                get: function () {
                    return this.x + this.width;
                },
                set: function (value) {
                    this.width = value - this.x;
                }
            },
            bottom: {
                get: function () {
                    return this.y + this.height;
                },
                set: function (value) {
                    this.height = value - this.y;
                }
            },
            points: {
                get: function () {
                    var ret = System.Array.init(8, 0, System.Single);
                    var i = 0;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.x;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.y;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.right;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.y;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.right;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.bottom;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.x;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.bottom;

                    return ret;
                }
            },
            Center: {
                get: function () {
                    return new CirnoGame.Vector2(this.left + (this.width / 2), this.top + (this.height / 2));
                }
            },
            Min: {
                get: function () {
                    return new CirnoGame.Vector2(this.x, this.y);
                },
                set: function (value) {
                    if (CirnoGame.Vector2.op_Equality(value, null)) {
                        return;
                    }
                    this.x = value.X;
                    this.y = value.Y;
                }
            },
            Max: {
                get: function () {
                    return new CirnoGame.Vector2(this.right, this.bottom);
                },
                set: function (value) {
                    if (CirnoGame.Vector2.op_Equality(value, null)) {
                        return;
                    }
                    this.right = value.X;
                    this.bottom = value.Y;
                }
            }
        },
        ctors: {
            init: function () {
                this.x = 0;
                this.y = 0;
                this.width = 0;
                this.height = 0;
            },
            ctor: function (x, y, width, height) {
                if (x === void 0) { x = 0.0; }
                if (y === void 0) { y = 0.0; }
                if (width === void 0) { width = 0.0; }
                if (height === void 0) { height = 0.0; }

                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }
        },
        methods: {
            CopyFrom: function (R) {
                this.x = R.x;
                this.y = R.y;
                this.width = R.width;
                this.height = R.height;
            },
            GetCenter: function (OUT) {
                OUT.X = this.left + (this.width / 2);
                OUT.Y = this.top + (this.height / 2);
            },
            containsPoint$1: function (x, y) {
                if (x >= this.x && y >= this.y && x <= this.right && y <= this.bottom) {
                    return true;
                }
                return false;
            },
            containsPoint: function (point) {
                if (point.X >= this.x && point.Y >= this.y && point.X <= this.right && point.Y <= this.bottom) {
                    return true;
                }
                return false;
            },
            intersects: function (R) {
                var p = R.points;
                var contain = false;
                var outside = false;
                var i = 0;
                while (i < p.length) {
                    if (this.containsPoint$1(p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)], p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)])) {
                        contain = true;
                    } else {
                        outside = true;
                    }
                }
                if (contain && outside) {
                    return true;
                }
                if (R.left < this.left && R.right > this.right) {
                    //if ((top <= R.top && bottom <= R.top) || (top <= R.bottom && bottom <= R.bottom))
                    if ((this.top <= R.top && this.bottom >= R.top) || (this.top <= R.bottom && this.bottom >= R.bottom)) {
                        return true;
                    }
                }
                if (R.top < this.top && R.bottom > this.bottom) {
                    if ((this.left <= R.left && this.right >= R.left) || (this.left <= R.right && this.right >= R.right)) {
                        return true;
                    }
                }
                /* if (R.left < left && R.right > right)
                {
                   if ((top <= R.top && bottom <= R.top) || (top <= R.bottom && bottom <= R.bottom))
                   {
                       return true;
                   }
                }
                if (R.top < top && R.bottom > bottom)
                {
                   if ((left <= R.left && right <= R.left) || (left <= R.right && right <= R.right))
                   {
                       return true;
                   }
                }*/
                return false;
            },
            isTouching: function (R) {
                if (R == null) {
                    return false;
                }
                var p = R.points;
                var i = 0;
                while (i < p.length) {
                    if (this.containsPoint$1(p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)], p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)])) {
                        return true;
                    }
                }
                if (this.intersects(R)) {
                    return true;
                }
                /* if (R.left < left && R.right > right)
                {
                   if ((top<=R.top && bottom<=R.top) || (top <= R.bottom && bottom <= R.bottom))
                   {
                       return true;
                   }
                }
                if (R.top < top && R.bottom > bottom)
                {
                   if ((left <= R.left && right <= R.left) || (left <= R.right && right <= R.right))
                   {
                       return true;
                   }
                }*/
                return false;
            },
            Set: function (x, y, width, height) {
                if (x === void 0) { x = 0.0; }
                if (y === void 0) { y = 0.0; }
                if (width === void 0) { width = 0.0; }
                if (height === void 0) { height = 0.0; }
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }
        }
    });

    Bridge.define("CirnoGame.RectangleI", {
        statics: {
            methods: {
                op_Addition: function (A, B) {
                    return new CirnoGame.RectangleI(((A.x + B.X) | 0), ((A.y + B.Y) | 0), A.width, A.height);
                },
                op_Subtraction: function (A, B) {
                    return new CirnoGame.RectangleI(((A.x - B.X) | 0), ((A.y - B.Y) | 0), A.width, A.height);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        },
        props: {
            left: {
                get: function () {
                    return this.x;
                },
                set: function (value) {
                    this.x = value;
                }
            },
            top: {
                get: function () {
                    return this.y;
                },
                set: function (value) {
                    this.y = value;
                }
            },
            right: {
                get: function () {
                    return ((this.x + this.width) | 0);
                },
                set: function (value) {
                    this.width = (value - this.x) | 0;
                }
            },
            bottom: {
                get: function () {
                    return ((this.y + this.height) | 0);
                },
                set: function (value) {
                    this.height = (value - this.y) | 0;
                }
            },
            points: {
                get: function () {
                    var ret = System.Array.init(8, 0, System.Int32);
                    var i = 0;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.x;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.y;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.right;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.y;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.right;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.bottom;

                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.x;
                    ret[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), ret)] = this.bottom;

                    return ret;
                }
            },
            Center: {
                get: function () {
                    return new CirnoGame.Point(((this.left + (((Bridge.Int.div(this.width, 2)) | 0))) | 0), ((this.top + (((Bridge.Int.div(this.height, 2)) | 0))) | 0));
                }
            },
            Min: {
                get: function () {
                    return new CirnoGame.Point(this.x, this.y);
                },
                set: function (value) {
                    if (value == null) {
                        return;
                    }
                    this.x = value.X;
                    this.y = value.Y;
                }
            },
            Max: {
                get: function () {
                    return new CirnoGame.Point(this.right, this.bottom);
                },
                set: function (value) {
                    if (value == null) {
                        return;
                    }
                    this.right = value.X;
                    this.bottom = value.Y;
                }
            }
        },
        ctors: {
            init: function () {
                this.x = 0;
                this.y = 0;
                this.width = 0;
                this.height = 0;
            },
            ctor: function (x, y, width, height) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (width === void 0) { width = 0; }
                if (height === void 0) { height = 0; }

                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }
        },
        methods: {
            containsPoint$1: function (x, y) {
                if (x >= this.x && y >= this.y && x <= this.right && y <= this.bottom) {
                    return true;
                }
                return false;
            },
            containsPoint: function (point) {
                if (point.X >= this.x && point.Y >= this.y && point.X <= this.right && point.Y <= this.bottom) {
                    return true;
                }
                return false;
            },
            intersects: function (R) {
                var p = R.points;
                var contain = false;
                var outside = false;
                var i = 0;
                while (i < p.length) {
                    if (this.containsPoint$1(p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)], p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)])) {
                        contain = true;
                    } else {
                        outside = true;
                    }
                }
                if (contain && outside) {
                    return true;
                }
                if (R.left < this.left && R.right > this.right) {
                    //if ((top <= R.top && bottom <= R.top) || (top <= R.bottom && bottom <= R.bottom))
                    if ((this.top <= R.top && this.bottom >= R.top) || (this.top <= R.bottom && this.bottom >= R.bottom)) {
                        return true;
                    }
                }
                if (R.top < this.top && R.bottom > this.bottom) {
                    if ((this.left <= R.left && this.right >= R.left) || (this.left <= R.right && this.right >= R.right)) {
                        return true;
                    }
                }
                /* if (R.left < left && R.right > right)
                {
                   if ((top <= R.top && bottom <= R.top) || (top <= R.bottom && bottom <= R.bottom))
                   {
                       return true;
                   }
                }
                if (R.top < top && R.bottom > bottom)
                {
                   if ((left <= R.left && right <= R.left) || (left <= R.right && right <= R.right))
                   {
                       return true;
                   }
                }*/
                return false;
            },
            isTouching: function (R) {
                if (R == null) {
                    return false;
                }
                var p = R.points;
                var i = 0;
                while (i < p.length) {
                    if (this.containsPoint$1(p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)], p[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), p)])) {
                        return true;
                    }
                }
                if (this.intersects(R)) {
                    return true;
                }
                return false;
            }
        }
    });

    Bridge.define("CirnoGame.Renderer", {
        fields: {
            view: null
        },
        ctors: {
            ctor: function (width, height, backgroundColor) {
                if (width === void 0) { width = 800; }
                if (height === void 0) { height = 600; }
                if (backgroundColor === void 0) { backgroundColor = 1087931; }

                this.$initialize();
                /* var width = 800;
                var height = 600;
                var backgroundColor = 0x1099bb;*/
                this.view = new PIXI.Application(width, height, {backgroundColor : backgroundColor});
            }
        }
    });

    Bridge.define("CirnoGame.TileData", {
        fields: {
            texture: 0,
            row: 0,
            column: 0,
            enabled: false,
            map: null,
            visible: false,
            topSolid: false,
            rightSolid: false,
            leftSolid: false,
            bottomSolid: false,
            CanSlope: false,
            Breakable: false,
            HP: 0,
            maxHP: 0,
            opaque: false,
            _hitbox: null,
            SteppedOn: null,
            HR: null
        },
        props: {
            solid: {
                get: function () {
                    return this.topSolid && this.rightSolid && this.leftSolid && this.bottomSolid;
                },
                set: function (value) {
                    this.topSolid = value;
                    this.leftSolid = value;
                    this.rightSolid = value;
                    this.bottomSolid = value;
                }
            },
            platform: {
                get: function () {
                    return this.topSolid && !this.rightSolid && !this.leftSolid && !this.bottomSolid;
                }
            },
            IsSlope: {
                get: function () {
                    return this.SlopeDirection !== 0;
                }
            },
            SlopeDirection: {
                get: function () {
                    if (!this.CanSlope) {
                        return 0;
                    }
                    var Bottom = this.GetTileData(0, 1);
                    if (!(Bottom != null && Bottom.enabled && Bottom.solid)) {
                        return 0;
                    }
                    var Left = this.GetTileData(-1, 0);
                    var Right = this.GetTileData(1, 0);
                    var Lsolid = Left != null && Left.enabled && Left.solid;
                    var Rsolid = Right != null && Right.enabled && Right.solid;
                    if (!this.CanSlope || !this.solid || (Lsolid && Rsolid) || (!Rsolid && !Lsolid)) {
                        return 0;
                    }
                    var Top = this.GetTileData(0, -1);
                    var Tsolid = Top != null && Top.enabled && Top.solid;
                    if (Tsolid) {
                        return 0;
                    }
                    if (Rsolid) {
                        return 1;
                    } else {
                        return -1;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.Breakable = false;
                this.HP = 4;
                this.maxHP = 4;
                this.opaque = true;
                this.HR = new CirnoGame.Rectangle();
            }
        },
        methods: {
            Clone: function () {
                var T = new CirnoGame.TileData();
                T.texture = this.texture;
                T.enabled = this.enabled;
                T.map = this.map;
                T.visible = this.visible;
                T.topSolid = this.topSolid;
                T.rightSolid = this.rightSolid;
                T.leftSolid = this.leftSolid;
                T.bottomSolid = this.bottomSolid;
                T.CanSlope = this.CanSlope;
                return T;
            },
            Damage: function (damage) {
                this.HP -= damage;
                if (this.HP <= 0 && this.topSolid) {
                    this.solid = false;
                    this.visible = false;
                    this.enabled = false;
                    /* enabled = true;
                    visible = true;
                    texture = 2;*/
                    /* map.ForceRedraw();*/
                    this.UpdateTile();
                    this.SpawnParticles();
                    return true;
                } else {
                    this.map.RedrawTile(this.column, this.row, false);
                    return false;
                }
            },
            UpdateTile: function () {
                this.map.RedrawTile(this.column, this.row);
            },
            SpawnParticles: function () {
                var tx = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(this.texture, 0, ((this.map.tiles.Count - 1) | 0)));
                var T = this.map.tiles.getItem(tx);

                var sz = Bridge.Int.clip32(this.map.tilesize / 2);
                var G = this.map.game;
                var HB = this.GetHitbox();
                //var spd = 1.5f;
                var spd = 1;


                var C = document.createElement("canvas");
                C.width = sz;
                C.height = sz;
                var g = CirnoGame.Helper.GetContext(C);

                g.drawImage(T, 0, 0, sz, sz, 0, 0, sz, sz);
                var P = new CirnoGame.Particle(G, C);
                P.Hspeed = (-spd) | 0;
                P.Vspeed = (-spd) | 0;
                P.x = HB.left;
                P.y = HB.top;
                G.AddEntity(P);

                //
                C = document.createElement("canvas");
                C.width = sz;
                C.height = sz;
                g = CirnoGame.Helper.GetContext(C);

                g.drawImage(T, sz, 0, sz, sz, 0, 0, sz, sz);
                P = new CirnoGame.Particle(G, C);
                P.Hspeed = spd;
                P.Vspeed = (-spd) | 0;
                P.x = HB.left + sz;
                P.y = HB.top;
                G.AddEntity(P);

                //
                C = document.createElement("canvas");
                C.width = sz;
                C.height = sz;
                g = CirnoGame.Helper.GetContext(C);

                g.drawImage(T, 0, sz, sz, sz, 0, 0, sz, sz);
                P = new CirnoGame.Particle(G, C);
                P.Hspeed = (-spd) | 0;
                P.Vspeed = spd;
                P.x = HB.left;
                P.y = HB.top + sz;
                G.AddEntity(P);

                //
                C = document.createElement("canvas");
                C.width = sz;
                C.height = sz;
                g = CirnoGame.Helper.GetContext(C);

                g.drawImage(T, sz, sz, sz, sz, 0, 0, sz, sz);
                P = new CirnoGame.Particle(G, C);
                P.Hspeed = spd;
                P.Vspeed = spd;
                P.x = HB.left + sz;
                P.y = HB.top + sz;
                G.AddEntity(P);
            },
            GetHitbox: function () {
                /* if (_hitbox == null)
                {
                   var tsz = map.tilesize;
                   var pos = map.position;
                   _hitbox = new Rectangle(pos.X + (column * tsz), pos.Y + (row * tsz), tsz, tsz);
                }*/
                var tsz = this.map.tilesize;
                var pos = this.map.position;
                this.HR.Set(pos.X + (this.column * tsz), pos.Y + (this.row * tsz), tsz, tsz);
                return this.HR;
                //return new Rectangle(pos.X + (column * tsz), pos.Y + (row * tsz), tsz, tsz);
                //return _hitbox;
            },
            GetHitbox2: function (OUT) {
                /* if (_hitbox == null)
                {
                   var tsz = map.tilesize;
                   var pos = map.position;
                   _hitbox = new Rectangle(pos.X + (column * tsz), pos.Y + (row * tsz), tsz, tsz);
                }*/
                var tsz = this.map.tilesize;
                var pos = this.map.position;
                OUT.x = pos.X + (this.column * tsz);
                OUT.y = pos.Y + (this.row * tsz);
                OUT.width = tsz;
                OUT.height = tsz;
                //return _hitbox;
            },
            GetTileData: function (relativeX, relativeY) {
                return this.map.GetTile(((this.column + relativeX) | 0), ((this.row + relativeY) | 0));
            },
            solidToSpeed: function (angle) {
                if (!this.enabled) {
                    return false;
                }
                if (angle.RoughLength === 0) {
                    return this.solid;
                } else {
                    if ((angle.X > 0 && this.leftSolid) || (angle.X < 0 && this.rightSolid) || (angle.Y > 0 && this.topSolid) || (angle.Y > 0 && this.bottomSolid)) {
                        return true;
                    }
                }
                return false;
            },
            GetTop: function (position) {

                /* TileData Left = GetTileData(-1, 0);
                TileData Right = GetTileData(1, 0);
                bool Lsolid = Left != null && Left.enabled && Left.solid;
                bool Rsolid = Right != null && Right.enabled && Right.solid;*/
                var direction = this.SlopeDirection;
                //if (!CanSlope || !solid || (Lsolid && Rsolid))
                var tsz = this.map.tilesize;
                if (direction === 0) {
                    //return R.top;

                    var pos = this.map.position;
                    return pos.Y + (this.row * tsz);
                } else {
                    var R = this.GetHitbox();
                    var Y = ((R.right - position.X) / R.width) * tsz;
                    if (direction > 0) {
                        Y = (tsz - Y);
                    }
                    //Y *= 1.0f;
                    Y = Math.min(tsz, Math.max(0, Y));
                    return R.bottom - Y;
                    //return (float)Math.Min(R.top, Math.Max(R.bottom,((R.right - position.X) / R.width) * R.height));
                }
            }
        }
    });

    Bridge.define("CirnoGame.TileMap", {
        fields: {
            position: null,
            tilesize: 0,
            rows: 0,
            columns: 0,
            data: null,
            tiles: null,
            cracks: null,
            game: null,
            buffer: null,
            bg: null,
            RND: null,
            Seed: 0,
            needRedraw: false,
            AllowSkyBridge: false,
            rtmp: null
        },
        ctors: {
            init: function () {
                this.Seed = 0;
                this.AllowSkyBridge = false;
                this.rtmp = new CirnoGame.Rectangle();
            },
            ctor: function (game, Seed) {
                if (Seed === void 0) { Seed = -1; }

                this.$initialize();
                this.RND = new System.Random.ctor();
                //position = new Vector2(-576);
                this.position = new CirnoGame.Vector2();
                //tilesize = 48;
                this.tilesize = 16;
                //rows = 16;
                /* columns = 52;*/
                this.rows = Bridge.Int.clip32(Math.ceil(((-this.position.Y * 2) + game.stageBounds.bottom) / this.tilesize));
                this.columns = Bridge.Int.clip32(Math.ceil(((-this.position.X * 2) + game.stageBounds.right) / this.tilesize));
                this.data = System.Array.create(null, null, CirnoGame.TileData, this.columns, this.rows);
                this.tiles = CirnoGame.AnimationLoader.Get("images/land/brick");
                this.cracks = CirnoGame.AnimationLoader.Get("images/land/cracks");
                this.game = game;

                this.buffer = document.createElement("canvas");
                this.bg = this.buffer.getContext("2d");
                if (Seed < 0) {
                    this.Seed = this.RND.next();
                } else {
                    this.Seed = Seed;
                }
                //Randomize();
                this.Generate();
            }
        },
        methods: {
            /**
             * returns true if the rectangle has no empty spaces.
             *
             * @instance
             * @public
             * @this CirnoGame.TileMap
             * @memberof CirnoGame.TileMap
             * @param   {number}     sX    
             * @param   {number}     sY    
             * @param   {number}     eX    
             * @param   {number}     eY
             * @return  {boolean}
             */
            IsRectSolid: function (sX, sY, eX, eY) {
                var X = sX;
                var Y = sY;
                while (Y < eY) {
                    X = sY;
                    while (X < eX) {
                        var T = this.data.get([X, Y]);
                        if (!(T.enabled && T.topSolid)) {
                            return false;
                        }
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
                return true;
            },
            ForceRedraw: function () {
                this.needRedraw = true;
            },
            Randomize: function () {
                var row = 0;
                var column = 0;
                while (row < this.rows) {
                    while (column < this.columns) {
                        var T = new CirnoGame.TileData();
                        T.row = row;
                        T.column = column;
                        T.texture = 1;
                        //T.enabled = (Math.Random() < 0.15) || (row>=rows-1);
                        T.enabled = (this.RND.nextDouble() < 0.15) || (row >= ((this.rows - 1) | 0));
                        T.topSolid = T.enabled;
                        if (T.enabled && (row >= ((this.rows - 1) | 0))) {
                            T.texture = 2;
                            T.solid = true;
                        } else if (T.enabled) {
                            if (this.RND.nextDouble() < 0.3) {
                                T.solid = true;
                                T.texture = 0;
                                if (this.RND.nextDouble() < 0.5) {
                                    T.texture = 3;
                                }
                            }
                        }
                        T.visible = T.enabled;
                        T.map = this;
                        this.data.set([column, row], T);
                        column = (column + 1) | 0;
                    }
                    column = 0;
                    row = (row + 1) | 0;
                }
            },
            Generate: function () {
                this.RND = new System.Random.$ctor1(this.Seed);
                //Randomize();
                this._Gen();
                this.needRedraw = true;
            },
            _Gen: function () {
                var heightmap = System.Array.init(this.columns, 0, System.Int32);
                //float entropy = 0.8f;
                //float entropy = 0.45f;
                var entropy = 0.6;
                var max = Bridge.Int.clip32(this.rows * entropy);
                //int smoothnessSize = 12;
                var smoothnessSize = 8;
                var smoothnessStrength = 2;

                var X = 0;
                //randomizes the heightmap
                while (X < this.columns) {
                    heightmap[System.Array.index(X, heightmap)] = Bridge.Int.clip32(this.RND.nextDouble() * max);
                    X = (X + 1) | 0;
                }
                var s = 0;
                while (s < smoothnessStrength) {
                    var oheightmap = heightmap;
                    heightmap = System.Array.init(this.columns, 0, System.Int32);
                    X = 0;
                    while (X < this.columns) {
                        heightmap[System.Array.index(X, heightmap)] = this.blur(oheightmap, X, smoothnessSize);
                        X = (X + 1) | 0;
                    }

                    X = 1;
                    s = (s + 1) | 0;
                }
                //removes bumps from heightmap
                while (X < ((this.columns - 1) | 0)) {
                    var A = heightmap[System.Array.index(((X - 1) | 0), heightmap)];
                    var B = heightmap[System.Array.index(((X + 1) | 0), heightmap)];

                    var H = heightmap[System.Array.index(X, heightmap)];
                    //if (A == B && Math.Abs(A- H)==1)
                    if ((A > H) === (B > H) && H !== A) {
                        heightmap[System.Array.index(X, heightmap)] = (Bridge.Int.div((((A + B) | 0)), 2)) | 0;
                    }
                    X = (X + 1) | 0;
                }



                var row = 0;
                var column = 0;
                var LT = null;
                var bridgeChance = 0.9;
                var RNDbridge = 0;
                while (row < this.rows) {
                    while (column < this.columns) {
                        var H1 = (this.rows - heightmap[System.Array.index(column, heightmap)]) | 0;
                        var fill = row >= H1;
                        var T = new CirnoGame.TileData();
                        T.row = row;
                        T.column = column;
                        T.texture = 1;
                        //T.enabled = (Math.Random() < 0.15) || (row >= rows - 1);
                        T.enabled = (fill) || (row >= ((this.rows - 1) | 0));
                        T.topSolid = T.enabled;
                        T.bottomSolid = T.enabled;
                        if (T.enabled && (row >= ((this.rows - 1) | 0))) {
                            T.texture = 2;
                            T.solid = true;
                        } else if (T.enabled) {
                            //if (Math.Random() < 0.3)
                            {
                                T.solid = true;
                                T.texture = 4;
                                T.CanSlope = true;
                                if (this.RND.nextDouble() < 0.5) {
                                    T.texture = 5;
                                }
                                if (row > H1 && this.RND.nextDouble() < 0.02) {
                                    T.texture = 6;
                                }
                            }
                        }
                        if (!T.enabled) {
                            if ((this.AllowSkyBridge && row === 20 && this.RND.nextDouble() < 0.93) || (((row + 4) | 0) >= H1 && ((row + 2) | 0) < H1 && this.RND.nextDouble() < 0.025) || (LT != null && LT.enabled && LT.texture === 1 && this.RND.nextDouble() < bridgeChance)) {
                                T.enabled = true;
                                T.topSolid = T.enabled;
                                bridgeChance -= 0.075;
                            } else {
                                if (RNDbridge < 1 && this.RND.nextDouble() < 0.015) {
                                    RNDbridge = this.RND.next$1(8);
                                }
                                if (RNDbridge > 0) {
                                    T.enabled = true;
                                    T.topSolid = T.enabled;
                                    RNDbridge = (RNDbridge - 1) | 0;
                                    //}else if (RND.NextDouble() < 0.025)
                                } else if (this.RND.nextDouble() < 0.035) {
                                    T.enabled = true;
                                    T.topSolid = T.enabled;
                                } else if (true) {
                                    T.enabled = true;
                                    T.topSolid = T.enabled;
                                    T.CanSlope = Math.random() < 0.5;
                                }
                            }
                        }
                        if (!T.enabled || T.texture !== 1) {
                            bridgeChance = 0.9;
                        }
                        T.visible = T.enabled;
                        T.map = this;
                        T.solid = true;
                        this.data.set([column, row], T);
                        LT = T;
                        column = (column + 1) | 0;
                    }
                    column = 0;
                    row = (row + 1) | 0;
                }
            },
            _GenRect: function (SX, SY, EX, EY) {
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, ((this.columns - 1) | 0)));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, ((this.rows - 1) | 0)));
                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, ((this.columns - 1) | 0)));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, ((this.rows - 1) | 0)));

                //float entropy = 0.8f;
                //float entropy = 0.45f;
                //float entropy = 0.60f;
                //int smoothnessSize = 12;

                var X = 0;



                var row = SY;
                var column = SX;
                var LT = null;
                //float bridgeChance = 0.90f;
                var RNDbridge = 0;

                while (row < EY) {
                    while (column < EX) {
                        var fill = false;
                        var T = new CirnoGame.TileData();
                        T.row = row;
                        T.column = column;
                        T.texture = 1;
                        //T.enabled = (Math.Random() < 0.15) || (row >= rows - 1);
                        T.enabled = (fill) || (row >= ((this.rows - 1) | 0));
                        T.topSolid = T.enabled;
                        T.bottomSolid = T.enabled;
                        /* if (T.enabled && (row >= rows - 1))
                        {
                           T.texture = 2;
                           T.solid = true;
                        }
                        else if (T.enabled)
                        {
                           //if (Math.Random() < 0.3)
                           {
                               T.solid = true;
                               T.texture = 4;
                               T.CanSlope = true;
                               if (RND.NextDouble() < 0.5)
                               {
                                   T.texture = 5;
                               }
                               if (false && RND.NextDouble() < 0.02)
                               {
                                   T.texture = 6;
                               }
                           }
                        }*/
                        if (!T.enabled) {
                            /* if ((AllowSkyBridge && row == 20 && RND.NextDouble() < 0.93) || (false && false && RND.NextDouble() < 0.025) || (LT != null && LT.enabled && LT.texture == 1 && RND.NextDouble() < bridgeChance))
                            {
                               T.enabled = true;
                               T.topSolid = T.enabled;
                               bridgeChance -= 0.075f;
                            }
                            else*/
                            {
                                if (RNDbridge < 1 && this.RND.nextDouble() < 0.03) {
                                    //RNDbridge = RND.Next(8);
                                    RNDbridge = (2 + this.RND.next$1(4)) | 0;
                                    /* if (Math.Random() < 0.9)
                                    {
                                       RNDbridge += 1;
                                    }*/
                                }
                                if (RNDbridge > 0) {
                                    T.enabled = true;
                                    T.topSolid = T.enabled;
                                    T.CanSlope = true;
                                    RNDbridge = (RNDbridge - 1) | 0;
                                    //}else if (RND.NextDouble() < 0.025)
                                } else if (this.RND.nextDouble() < 0.03) {
                                    T.enabled = true;
                                    T.topSolid = T.enabled;
                                    T.CanSlope = true;
                                }

                            }
                        }
                        /* if (!T.enabled || T.texture != 1)
                        {
                           bridgeChance = 0.90f;
                        }*/
                        T.visible = T.enabled;
                        T.map = this;
                        T.solid = true;
                        this.data.set([column, row], T);
                        LT = T;
                        column = (column + 1) | 0;
                    }
                    column = SX;
                    row = (row + 1) | 0;
                }
            },
            SetBreakableRect: function (column, row, Width, Height, breakable) {
                var SX = column;
                var SY = row;
                var EX = ((SX + Width) | 0);
                var EY = ((SY + Height) | 0);
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, ((this.columns - 1) | 0)));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, ((this.rows - 1) | 0)));
                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, ((this.columns - 1) | 0)));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, ((this.rows - 1) | 0)));
                var X = SX;
                var Y = SY;
                var T = new CirnoGame.TileData();
                T.row = Y;
                T.column = X;
                T.texture = 1;
                T.enabled = true;
                T.visible = true;
                T.map = this;
                T.solid = true;
                if (breakable) {
                    T.texture = 1;
                    if (Math.random() < 0.02) {
                        T.texture = Math.random() < 0.5 ? 5 : 6;
                    }
                    T.Breakable = true;
                } else {
                    T.texture = 0;
                    T.Breakable = false;
                }
                while (Y < EY) {
                    X = SX;
                    while (X < EX) {
                        /* var TT = T.Clone();
                        TT.column = X;
                        TT.row = Y;
                        data[X, Y] = TT;*/
                        var TT = this.data.get([X, Y]);
                        if (TT == null) {
                            TT = T.Clone();
                        }
                        if (T.solid) {
                            TT.texture = T.texture;
                            TT.Breakable = T.Breakable;
                        }
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
            },
            FillRect: function (column, row, Width, Height) {
                var SX = column;
                var SY = row;
                var EX = ((SX + Width) | 0);
                var EY = ((SY + Height) | 0);
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, ((this.columns - 1) | 0)));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, ((this.rows - 1) | 0)));
                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, ((this.columns - 1) | 0)));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, ((this.rows - 1) | 0)));
                var X = SX;
                var Y = SY;
                var T = new CirnoGame.TileData();
                T.row = Y;
                T.column = X;
                T.texture = 1;
                T.enabled = true;
                T.visible = true;
                T.map = this;
                T.solid = true;
                while (Y < EY) {
                    X = SX;
                    while (X < EX) {
                        var TT = T.Clone();
                        TT.column = X;
                        TT.row = Y;
                        this.data.set([X, Y], TT);
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
            },
            DrawRect$1: function (column, row, Width, Height) {
                var X = column;
                var Y = row;
                var TX = X;
                var TY = Y;
                var EX = (X + Width) | 0;
                var EY = (Y + Height) | 0;

                while (TX < EX) {
                    var T = new CirnoGame.TileData();
                    T.row = TY;
                    T.column = TX;
                    T.texture = 1;
                    T.enabled = true;
                    T.visible = true;
                    T.map = this;
                    T.solid = true;
                    this.SetTile(TX, TY, T);
                    TX = (TX + 1) | 0;
                }
                TX = X;
                TY = EY;
                while (TX < EX) {
                    var T1 = new CirnoGame.TileData();
                    T1.row = TY;
                    T1.column = TX;
                    T1.texture = 1;
                    T1.enabled = true;
                    T1.visible = true;
                    T1.map = this;
                    T1.solid = true;
                    this.SetTile(TX, TY, T1);
                    TX = (TX + 1) | 0;
                }

                TX = X;
                TY = Y;
                while (TY < EY) {
                    var T2 = new CirnoGame.TileData();
                    T2.row = TY;
                    T2.column = TX;
                    T2.texture = 1;
                    T2.enabled = true;
                    T2.visible = true;
                    T2.map = this;
                    T2.solid = true;
                    this.SetTile(TX, TY, T2);
                    TY = (TY + 1) | 0;
                }
                TX = EX;
                TY = Y;
                while (TY < EY) {
                    var T3 = new CirnoGame.TileData();
                    T3.row = TY;
                    T3.column = TX;
                    T3.texture = 1;
                    T3.enabled = true;
                    T3.visible = true;
                    T3.map = this;
                    T3.solid = true;
                    this.SetTile(TX, TY, T3);
                    TY = (TY + 1) | 0;
                }
            },
            DrawRect: function (rect) {
                /* var PX = (int)((position.X - TP.X) / tilesize);
                var PY = (int)((position.Y - TP.Y) / tilesize);*/
                this.DrawRect$1(Bridge.Int.clip32(rect.left / this.tilesize), Bridge.Int.clip32(rect.top / this.tilesize), Bridge.Int.clip32(rect.width / this.tilesize), Bridge.Int.clip32(rect.height / this.tilesize));
            },
            SetAll: function (T) {
                var X = 0;
                var Y = 0;
                while (Y < this.rows) {
                    X = 0;
                    while (X < this.columns) {
                        var TD = T.Clone();
                        TD.column = X;
                        TD.row = Y;
                        this.data.set([X, Y], T);
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
            },
            ClearOuterRect: function (column, row, width, height, bottom) {
                if (bottom === void 0) { bottom = true; }
                var SX = column;
                var SY = row;
                var EX = ((SX + width) | 0);
                var EY = ((SY + height) | 0);
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, ((this.columns - 1) | 0)));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, ((this.rows - 1) | 0)));
                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, ((this.columns - 1) | 0)));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, ((this.rows - 1) | 0)));
                var X = SX;
                var Y = SY;
                var T = new CirnoGame.TileData();
                T.map = this;
                T.visible = false;
                T.solid = false;
                var TX = X;
                var TY = Y;
                while (TX < ((EX - 1) | 0)) {
                    var TT = T.Clone();
                    TT.column = TX;
                    TT.row = TY;
                    this.SetTile(TX, TY, TT);
                    TX = (TX + 1) | 0;
                }
                TX = X;
                TY = EY;
                if (bottom) {
                    while (TX < EX) {
                        var TT1 = T.Clone();
                        TT1.column = TX;
                        TT1.row = TY;
                        this.SetTile(TX, TY, TT1);
                        TX = (TX + 1) | 0;
                    }
                }

                TX = X;
                TY = Y;
                while (TY < ((EY - 1) | 0)) {
                    var TT2 = T.Clone();
                    TT2.column = TX;
                    TT2.row = TY;
                    this.SetTile(TX, TY, TT2);
                    TY = (TY + 1) | 0;
                }
                TX = EX;
                TY = Y;
                while (TY < ((EY - 1) | 0)) {
                    var TT3 = T.Clone();
                    TT3.column = TX;
                    TT3.row = TY;
                    this.SetTile(TX, TY, TT3);
                    TY = (TY + 1) | 0;
                }
            },
            ClearRect$1: function (column, row, width, height) {
                var SX = column;
                var SY = row;
                var EX = ((SX + width) | 0);
                var EY = ((SY + height) | 0);
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, ((this.columns - 1) | 0)));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, ((this.rows - 1) | 0)));
                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, ((this.columns - 1) | 0)));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, ((this.rows - 1) | 0)));
                var X = SX;
                var Y = SY;
                var T = new CirnoGame.TileData();
                T.map = this;
                T.visible = false;
                T.solid = false;
                T.enabled = false;
                while (Y < EY) {
                    X = SX;
                    while (X < EX) {
                        var TT = T.Clone();
                        TT.column = X;
                        TT.row = Y;
                        this.data.set([X, Y], TT);
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
            },
            ClearRect: function (rect) {
                var SX = Bridge.Int.clip32(rect.left / this.tilesize);
                var SY = Bridge.Int.clip32(rect.top / this.tilesize);
                var EX = Bridge.Int.clip32(rect.right / this.tilesize);
                var EY = Bridge.Int.clip32(rect.height / this.tilesize);
                var X = SX;
                var Y = SY;
                var T = new CirnoGame.TileData();
                T.map = this;
                T.visible = false;
                T.solid = false;
                while (Y < EY) {
                    X = SX;
                    while (X < EX) {
                        var TT = T.Clone();
                        TT.column = X;
                        TT.row = Y;
                        this.data.set([X, Y], TT);
                        X = (X + 1) | 0;
                    }
                    Y = (Y + 1) | 0;
                }
            },
            SetTile: function (column, row, T) {
                if (column >= 0 && row >= 0 && column < System.Array.getLength(this.data, 0) && row < System.Array.getLength(this.data, 1)) {
                    this.data.set([column, row], T);
                }
            },
            blur: function (array, index, blur) {
                if (blur === void 0) { blur = 1; }
                var total = 0;
                var ret = 0;
                var i = 0;
                var ind = index;
                if (ind >= 0 && ind < array.length) {
                    total = (total + 1) | 0;
                    ret = (ret + array[System.Array.index(ind, array)]) | 0;
                }
                while (i < blur) {
                    ind = (ind - 1) | 0;
                    if (ind >= 0 && ind < array.length) {
                        total = (total + 1) | 0;
                        ret = (ret + array[System.Array.index(ind, array)]) | 0;
                    }
                    i = (i + 1) | 0;
                }
                i = 0;
                while (i < blur) {
                    ind = (ind + 1) | 0;
                    if (ind >= 0 && ind < array.length) {
                        total = (total + 1) | 0;
                        ret = (ret + array[System.Array.index(ind, array)]) | 0;
                    }
                    i = (i + 1) | 0;
                }
                return ((Bridge.Int.div(ret, total)) | 0);
            },
            CheckForTile: function (position) {
                /* position = position - this.position;
                position /= tilesize;
                if (position.X>=0 && position.X<columns && position.Y>=0 && position.Y<rows)
                {
                   return data[(int)position.X, (int)position.Y];
                }*/
                var TP = this.position;
                var PX = Bridge.Int.clip32((position.X - TP.X) / this.tilesize);
                var PY = Bridge.Int.clip32((position.Y - TP.Y) / this.tilesize);
                if (PX >= 0 && PX < this.columns && PY >= 0 && PY < this.rows) {
                    return this.data.get([PX, PY]);
                }
                return null;
            },
            GetTile: function (column, row) {
                if (column >= 0 && row >= 0 && column < this.columns && row < this.rows) {
                    return this.data.get([column, row]);
                }
                return null;
            },
            _Draw: function () {
                if (this.needRedraw) {
                    var W = Bridge.Int.clip32(Math.ceil(this.columns * this.tilesize));
                    var H = Bridge.Int.clip32(Math.ceil(this.rows * this.tilesize));

                    if (this.buffer.width !== W || this.buffer.height !== H) {
                        this.buffer.width = W;
                        this.buffer.height = H;
                    } else {
                        this.bg.clearRect(0, 0, this.buffer.width, this.buffer.height);
                    }

                    this.Redraw(this.bg);
                    this.needRedraw = false;
                }
            },
            Draw: function (g) {
                this._Draw();
                //g.DrawImage(buffer, position.X, position.Y);
                this.rtmp.CopyFrom(this.game.camera.CameraBounds);
                //hide floating point seams.
                this.rtmp.x -= 1;
                this.rtmp.y -= 1;
                this.rtmp.width += 2;
                this.rtmp.height += 2;
                var CB = this.rtmp;
                //var CB = game.camera.CameraBounds;
                //g.DrawImage(buffer, CB.left-position.X, CB.top-position.Y, CB.width, CB.height, CB.left, CB.top, CB.width, CB.height);//draw map cropped to camera bounds
                g.drawImage(this.buffer, CB.left - this.position.X, CB.top - this.position.Y, CB.width, CB.height, CB.left, CB.top, CB.width, CB.height); //draw map cropped to camera bounds
            },
            RedrawTile: function (X, Y, updateNeighbors) {
                if (updateNeighbors === void 0) { updateNeighbors = true; }
                if (updateNeighbors) {
                    var TX = Bridge.Int.mul((((X - 1) | 0)), Bridge.Int.clip32(this.tilesize));
                    var TY = Bridge.Int.mul((((Y - 1) | 0)), Bridge.Int.clip32(this.tilesize));
                    this.bg.clearRect(TX, TY, Bridge.Int.mul(Bridge.Int.clip32(this.tilesize), 3), Bridge.Int.mul(Bridge.Int.clip32(this.tilesize), 3));

                    this.Redraw(this.bg, ((X - 1) | 0), ((Y - 1) | 0), 3, 3);
                } else {
                    var TX1 = Bridge.Int.mul((X), Bridge.Int.clip32(this.tilesize));
                    var TY1 = Bridge.Int.mul((Y), Bridge.Int.clip32(this.tilesize));
                    this.bg.clearRect(TX1, TY1, this.tilesize, this.tilesize);

                    this.Redraw(this.bg, X, Y, 1, 1);
                }
            },
            Redraw: function (g, SX, SY, W, H) {
                if (SX === void 0) { SX = -1; }
                if (SY === void 0) { SY = -1; }
                if (W === void 0) { W = -1; }
                if (H === void 0) { H = -1; }
                var PX = this.position.X;
                var PY = this.position.Y;
                PX = 0;
                PY = 0;
                if (SX === -1) {
                    SX = 0;
                }
                if (SY === -1) {
                    SY = 0;
                }

                if (W === -1) {
                    W = this.columns;
                }
                if (H === -1) {
                    H = this.rows;
                }
                var EX = (SX + W) | 0;
                var EY = (SY + H) | 0;
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, this.columns));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, this.rows));

                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, this.columns));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, this.rows));

                var X = PX + (SX * this.tilesize);
                var Y = PY + (SY * this.tilesize);
                var row = SY;
                var column = SX;
                var BG = this.tiles.getItem(2);
                //var BG2 = tiles[3];
                var BG2 = System.Array.init([this.tiles.getItem(3), this.tiles.getItem(9), this.tiles.getItem(10)], HTMLImageElement);
                var tilesC = this.tiles.Count;

                var R = new CirnoGame.Rectangle();
                var doorroom = CirnoGame.MapGenerator.doorroom;
                var keyroom = CirnoGame.MapGenerator.keyroom;
                var doorroomcolor = "#000000";
                //var keyroomcolor = "#CC0000";
                //var keyroomcolor = "#118822";
                var keyroomcolor = "#558822";

                var gradcolor = "#000077";
                var Agradcolor = "#CC0000";

                var DX = 0;
                var DY = 0;

                if (doorroom != null) {
                    DX = (Bridge.Int.div((((doorroom.SX + doorroom.EX) | 0)), 2)) | 0;
                    DY = (Bridge.Int.div((((doorroom.SY + doorroom.EY) | 0)), 2)) | 0;
                }

                while (row < EY) {
                    while (column < EX) {
                        //if (R.isTouching(new Rectangle(X, Y, tilesize, tilesize)))
                        {
                            var T = this.data.get([column, row]);
                            var tex = Math.min(((this.tiles.Count - 1) | 0), T.texture);
                            if (T.enabled && tex >= 0 && tex < tilesC) {
                                g.drawImage(this.tiles.getItem(tex), X, Y);
                                if (T.Breakable && T.HP < T.maxHP) {
                                    var dmg = (Bridge.Int.clip32(Math.max(1, Math.min(Bridge.Math.round(T.maxHP - T.HP, 0, 6), 3))) - 1) | 0;
                                    g.drawImage(this.cracks.getItem(dmg), X, Y);
                                }
                                var sd = T.SlopeDirection;
                                if (sd !== 0) {
                                    //object sg = g;
                                    //Script.Write("sg.globalCompositeOperation = 'destination-out'");
                                    g.globalCompositeOperation = "destination-out";
                                    T.GetHitbox2(R);
                                    R.x -= this.position.X;
                                    R.y -= this.position.Y;
                                    g.beginPath();
                                    g.moveTo(R.left, R.top);
                                    var P;
                                    P = new CirnoGame.Vector2(R.left + (R.width / 2.0), R.top + (R.height / 2.0));
                                    if (sd > 0) {
                                        g.lineTo(R.left, R.bottom);
                                    } else {
                                        g.lineTo(R.right, R.bottom);
                                    }

                                    g.lineTo(R.right, R.top);

                                    g.lineTo(R.left, R.top);

                                    g.fill();

                                    g.globalCompositeOperation = "destination-over";
                                    /* if (doorroom!=null && doorroom.ContainsTile(column, row))
                                    {
                                       g.GlobalAlpha = 0.55f;
                                       g.FillStyle = doorroomcolor;
                                       //g.FillRect(R.x.ToDynamic(), R.y.ToDynamic(), R.width.ToDynamic(), R.height.ToDynamic());
                                       g.FillRect(X.ToDynamic(), Y.ToDynamic(), tilesize.ToDynamic(), tilesize.ToDynamic());
                                       g.GlobalAlpha = 1f;
                                    }
                                    else */
                                    if (keyroom != null && keyroom.ContainsTile(column, row)) {
                                        g.globalAlpha = 0.17;
                                        g.fillStyle = keyroomcolor;
                                        //g.FillRect(R.x.ToDynamic(), R.y.ToDynamic(), R.width.ToDynamic(), R.height.ToDynamic());
                                        g.fillRect(X, Y, this.tilesize, this.tilesize);
                                        g.globalAlpha = 1.0;
                                    } else if (doorroom != null) {
                                        var Dist = Math.max(((((Math.abs(((column - DX) | 0)) + Math.abs(((row - DY) | 0))) | 0) - 5) | 0), 0);
                                        var A = 0.5 - (Dist * 0.03);
                                        var G = gradcolor;
                                        if (A < 0) {
                                            //A = Math.Min((-A * 0.50f) - 0.22f, 0.30f);
                                            A = (-A * 0.5) - 0.22;
                                            G = Agradcolor;
                                            if (A > 0.3) {
                                                A = 0.6 - A;
                                                if (A < 0) {
                                                    /* A = -A;*/
                                                    G = gradcolor;
                                                    A = 0;
                                                }
                                            }

                                        }
                                        if (A > 0) {
                                            g.globalAlpha = A;
                                            g.fillStyle = G;
                                            g.fillRect(X, Y, this.tilesize, this.tilesize);
                                            g.globalAlpha = 1.0;
                                        }
                                    }
                                    g.drawImage(BG, X, Y);
                                    g.globalCompositeOperation = "source-over";

                                } else if (!T.opaque) {
                                    g.globalCompositeOperation = "destination-over";
                                    /* if (doorroom!=null && doorroom.ContainsTile(column, row))
                                    {
                                       g.GlobalAlpha = 0.55f;
                                       g.FillStyle = doorroomcolor;
                                       //g.FillRect(R.x.ToDynamic(), R.y.ToDynamic(), R.width.ToDynamic(), R.height.ToDynamic());
                                       g.FillRect(X.ToDynamic(), Y.ToDynamic(), tilesize.ToDynamic(), tilesize.ToDynamic());
                                       g.GlobalAlpha = 1f;
                                    }
                                    else */
                                    if (keyroom != null && keyroom.ContainsTile(column, row)) {
                                        g.globalAlpha = 0.17;
                                        g.fillStyle = keyroomcolor;
                                        //g.FillRect(R.x.ToDynamic(), R.y.ToDynamic(), R.width.ToDynamic(), R.height.ToDynamic());
                                        g.fillRect(X, Y, this.tilesize, this.tilesize);
                                        g.globalAlpha = 1.0;
                                    } else if (doorroom != null) {
                                        var Dist1 = Math.max(((((Math.abs(((column - DX) | 0)) + Math.abs(((row - DY) | 0))) | 0) - 5) | 0), 0);
                                        var A1 = 0.5 - (Dist1 * 0.03);
                                        var G1 = gradcolor;
                                        if (A1 < 0) {
                                            //A = Math.Min((-A * 0.50f) - 0.22f, 0.30f);
                                            A1 = (-A1 * 0.5) - 0.22;
                                            G1 = Agradcolor;
                                            if (A1 > 0.3) {
                                                A1 = 0.6 - A1;
                                                if (A1 < 0) {
                                                    /* A = -A;*/
                                                    G1 = gradcolor;
                                                    A1 = 0;
                                                }
                                            }

                                        }
                                        if (A1 > 0) {
                                            g.globalAlpha = A1;
                                            g.fillStyle = G1;
                                            g.fillRect(X, Y, this.tilesize, this.tilesize);
                                            g.globalAlpha = 1.0;
                                        }
                                    }

                                    g.drawImage(BG, X, Y);
                                    g.globalCompositeOperation = "source-over";
                                }

                            } else {
                                var texture = BG;
                                //if (Math.Random() >= 0.98)
                                if (Math.random() >= 0.97) {
                                    texture = CirnoGame.HelperExtensions.Pick(Bridge.global.HTMLImageElement, BG2);
                                }
                                //g.DrawImage(Math.Random() < 0.98 ? BG : BG2, X, Y);
                                g.drawImage(texture, X, Y);
                                /* if (doorroom != null && doorroom.ContainsTile(column, row))
                                {
                                   g.GlobalAlpha = 0.55f;
                                   g.FillStyle = doorroomcolor;
                                   g.FillRect(X.ToDynamic(), Y.ToDynamic(), tilesize.ToDynamic(), tilesize.ToDynamic());
                                   g.GlobalAlpha = 1f;
                                }
                                else */
                                if (keyroom != null && keyroom.ContainsTile(column, row)) {
                                    /* T.GetHitbox2(R);
                                    R.x -= position.X;
                                    R.y -= position.Y;*/
                                    g.globalAlpha = 0.17;
                                    g.fillStyle = keyroomcolor;
                                    g.fillRect(X, Y, this.tilesize, this.tilesize);
                                    g.globalAlpha = 1.0;
                                } else if (doorroom != null) {
                                    var Dist2 = Math.max(((((Math.abs(((column - DX) | 0)) + Math.abs(((row - DY) | 0))) | 0) - 5) | 0), 0);
                                    var A2 = 0.5 - (Dist2 * 0.03);
                                    var G2 = gradcolor;
                                    if (A2 < 0) {
                                        //A = Math.Min((-A * 0.50f) - 0.22f, 0.30f);
                                        A2 = (-A2 * 0.5) - 0.22;
                                        G2 = Agradcolor;
                                        if (A2 > 0.3) {
                                            A2 = 0.6 - A2;
                                            if (A2 < 0) {
                                                /* A = -A;*/
                                                G2 = gradcolor;
                                                A2 = 0;
                                            }
                                        }

                                    }
                                    if (A2 > 0) {
                                        g.globalAlpha = A2;
                                        g.fillStyle = G2;
                                        g.fillRect(X, Y, this.tilesize, this.tilesize);
                                        g.globalAlpha = 1.0;
                                    }
                                }
                            }
                        }
                        column = (column + 1) | 0;
                        X += this.tilesize;
                    }
                    X = PX + (SX * this.tilesize);
                    Y += this.tilesize;
                    column = SX;
                    row = (row + 1) | 0;
                }
            },
            IsExposed: function (X, Y) {
                var row = (Y - 2) | 0;
                var column = (X - 2) | 0;
                var TDRaw = this.data;
                var ind = 0;
                var lind = 0;

                ind = Bridge.Int.mul(column, this.rows);
                ind = (ind + row) | 0;

                while (row <= ((Y + 2) | 0)) {
                    lind = ind;
                    while (column <= ((X + 2) | 0)) {
                        /* var T = data[column, row];
                        T.texture = Math.Random() < 0.5 ? 0 : 1;*/
                        if (row >= 0 && column >= 0 && row < this.rows && column < this.columns) {
                            //var T = data[column, row];
                            var T = TDRaw[System.Array.index(ind, TDRaw)];
                            if (!T.enabled || !T.solid) {
                                return true;
                            }
                        }
                        column = (column + 1) | 0;
                        ind = (ind + this.rows) | 0;
                    }
                    ind = lind;
                    ind = (ind + 1) | 0;
                    row = (row + 1) | 0;
                    column = (X - 2) | 0;
                }
                return false;
            },
            ApplyBreakableRect: function (SX, SY, W, H) {
                if (SX === void 0) { SX = -1; }
                if (SY === void 0) { SY = -1; }
                if (W === void 0) { W = -1; }
                if (H === void 0) { H = -1; }
                if (SX === -1) {
                    SX = 0;
                }
                if (SY === -1) {
                    SY = 0;
                }

                if (W === -1) {
                    W = this.columns;
                }
                if (H === -1) {
                    H = this.rows;
                }
                var EX = (SX + W) | 0;
                var EY = (SY + H) | 0;
                SX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SX, 0, this.columns));
                SY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(SY, 0, this.rows));

                EX = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EX, 0, this.columns));
                EY = Bridge.Int.clip32(CirnoGame.MathHelper.Clamp$1(EY, 0, this.rows));
                var row = SX;
                var column = SY;

                while (row < EY) {
                    while (column < EX) {
                        /* var T = data[column, row];
                        T.texture = Math.Random() < 0.5 ? 0 : 1;*/
                        var T = this.data.get([column, row]);
                        var TT = T.Clone();
                        TT.column = column;
                        TT.row = row;
                        this.data.set([column, row], TT);
                        T = TT;
                        if (this.IsExposed(column, row)) {
                            T.texture = 1;
                            if (Math.random() < 0.02) {
                                T.texture = Math.random() < 0.5 ? 5 : 6;
                            }
                            T.Breakable = true;
                        } else {
                            T.texture = 0;
                            T.Breakable = false;
                        }
                        column = (column + 1) | 0;
                    }
                    row = (row + 1) | 0;
                    column = SX;
                }
                this.needRedraw = true;
            },
            ApplyBreakable: function () {
                var row = 0;
                var column = 0;
                var TDRaw = this.data;
                var ind = 0;
                var lind = 0;

                while (row < this.rows) {
                    lind = ind;
                    while (column < this.columns) {
                        /* var T = data[column, row];
                        T.texture = Math.Random() < 0.5 ? 0 : 1;*/

                        var T = TDRaw[System.Array.index(ind, TDRaw)];
                        //var T = data[column, row];
                        var TT = T.Clone();
                        TT.column = column;
                        TT.row = row;
                        //data[column, row] = TT;
                        TDRaw[System.Array.index(ind, TDRaw)] = TT;
                        T = TT;
                        if (this.IsExposed(column, row)) {
                            T.texture = 1;
                            if (Math.random() < 0.02) {
                                T.texture = Math.random() < 0.5 ? 5 : 6;
                            }
                            T.Breakable = true;
                        } else {
                            T.texture = 0;
                            T.Breakable = false;
                        }
                        column = (column + 1) | 0;
                        ind = (ind + this.rows) | 0;
                    }
                    ind = lind;
                    row = (row + 1) | 0;
                    //ind -= (columns * rows);
                    column = 0;

                    ind = (ind + 1) | 0;
                }
                this.needRedraw = true;
            },
            testTexture: function () {
                var row = 0;
                var column = 0;

                while (row < this.rows) {
                    while (column < this.columns) {
                        var T = this.data.get([column, row]);
                        T.texture = Math.random() < 0.5 ? 0 : 1;
                        column = (column + 1) | 0;
                    }
                    row = (row + 1) | 0;
                    column = 0;
                }
                this.needRedraw = true;
            }
        }
    });

    Bridge.define("CirnoGame.Vector2", {
        statics: {
            props: {
                Empty: {
                    get: function () {
                        return new CirnoGame.Vector2();
                    }
                }
            },
            methods: {
                FromRadian: function (radian) {
                    return CirnoGame.MathHelper.RadianToVector(radian);
                },
                Add: function (A, B) {
                    return new CirnoGame.Vector2(A.X + B.X, A.Y + B.Y);
                },
                Add$1: function (A, X, Y) {
                    return new CirnoGame.Vector2(A.X + X, A.Y + Y);
                },
                Subtract: function (A, B) {
                    return new CirnoGame.Vector2(A.X - B.X, A.Y - B.Y);
                },
                Subtract$1: function (A, X, Y) {
                    return new CirnoGame.Vector2(A.X - X, A.Y - Y);
                },
                op_Equality: function (A, B) {
                    var OA = A;
                    var OB = B;
                    if ((OA == null || OB == null) && (OA != null || OB != null)) {
                        return false;
                    }
                    if (OA == null && OB == null) {
                        return true;
                    }
                    return A.X === B.X && A.Y === B.Y;
                    //return false;
                },
                op_Inequality: function (A, B) {
                    return !(CirnoGame.Vector2.op_Equality(A, B));
                },
                op_Multiply: function (A, scale) {
                    return new CirnoGame.Vector2(A.X * scale, A.Y * scale);
                },
                op_Division: function (A, scale) {
                    return new CirnoGame.Vector2(A.X / scale, A.Y / scale);
                },
                op_Addition: function (A, B) {
                    return new CirnoGame.Vector2(A.X + B.X, A.Y + B.Y);
                },
                op_Subtraction: function (A, B) {
                    return new CirnoGame.Vector2(A.X - B.X, A.Y - B.Y);
                }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        props: {
            Length: {
                get: function () {
                    return Math.sqrt((this.X * this.X) + (this.Y * this.Y));
                }
            },
            /**
             * Returns a rough estimate of the vector's length.
             *
             * @instance
             * @public
             * @readonly
             * @memberof CirnoGame.Vector2
             * @function EstimatedLength
             * @type number
             */
            EstimatedLength: {
                get: function () {
                    var A = Math.abs(this.X);
                    var B = Math.abs(this.Y);
                    if (B > A) {
                        var tmp = A;
                        A = B;
                        B = tmp;
                    }
                    B *= 0.34;
                    return A + B;
                    //return (float)(Math.Abs(X) + Math.Abs(Y));
                }
            },
            /**
             * Returns the sum of its absolute parts.
             *
             * @instance
             * @public
             * @readonly
             * @memberof CirnoGame.Vector2
             * @function RoughLength
             * @type number
             */
            RoughLength: {
                get: function () {
                    return Math.abs(this.X) + Math.abs(this.Y);
                }
            }
        },
        ctors: {
            ctor: function (x, y) {
                if (x === void 0) { x = 0.0; }
                if (y === void 0) { y = 0.0; }

                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        },
        methods: {
            Distance: function (P) {
                var XX = this.X - P.X;
                var YY = this.Y - P.Y;
                return Math.sqrt((XX * XX) + (YY * YY));
            },
            /**
             * Returns a rough estimate of the vector's length.
             *
             * @instance
             * @public
             * @this CirnoGame.Vector2
             * @memberof CirnoGame.Vector2
             * @param   {CirnoGame.Vector2}    P
             * @return  {number}
             */
            EstimatedDistance: function (P) {
                var A = Math.abs(this.X - P.X);
                var B = Math.abs(this.Y - P.Y);
                if (B > A) {
                    var tmp = A;
                    A = B;
                    B = tmp;
                }
                B *= 0.34;
                return A + B;
                //return (float)(Math.Abs(X) + Math.Abs(Y));
            },
            Multiply: function (f) {
                this.X *= f;
                this.Y *= f;
            },
            RoughNormalize: function (length) {
                if (length === void 0) { length = 1.0; }
                var D = this.Length / length;
                return new CirnoGame.Vector2(this.X / D, this.Y / D);
            },
            Normalize: function (length) {
                if (length === void 0) { length = 1.0; }
                var distance = Math.sqrt(this.X * this.X + this.Y * this.Y);
                var V = new CirnoGame.Vector2();
                V.X = this.X / distance;
                V.Y = this.Y / distance;
                V.X *= length;
                V.Y *= length;
                return V;
            },
            SetAsNormalize: function (length) {
                if (length === void 0) { length = 1.0; }
                var distance = Math.sqrt(this.X * this.X + this.Y * this.Y);
                this.X = this.X / distance;
                this.Y = this.Y / distance;
                this.X *= length;
                this.Y *= length;
            },
            ToCardinal: function () {
                var x = this.X;
                var y = this.Y;
                var A = Math.abs(this.X);
                var B = Math.abs(this.Y);
                if (B > A) {
                    x = 0;
                } else if (A > B) {
                    y = 0;
                }
                return new CirnoGame.Vector2(x, y);
            },
            Equals: function (o) {
                var B = o;
                if (CirnoGame.Vector2.op_Inequality(this, B) && CirnoGame.Vector2.op_Equality(B, null)) {
                    return false;
                }
                return B.X === this.X && B.Y === this.Y;
            },
            equals: function (o) {
                if (Bridge.is(o, CirnoGame.Vector2)) {
                    var B = Bridge.cast(o, CirnoGame.Vector2);
                    if (CirnoGame.Vector2.op_Inequality(this, B) && CirnoGame.Vector2.op_Equality(B, null)) {
                        return false;
                    }
                    return B.X === this.X && B.Y === this.Y;
                }
                return Bridge.equals(this, o);
            },
            ToAngle: function () {
                return CirnoGame.MathHelper.WrapRadians(CirnoGame.MathHelper.GetAngle(this));
                //return MathHelper.WrapRadians(MathHelper.GetAngle(new Vector2(), this));
            },
            Clone: function () {
                return new CirnoGame.Vector2(this.X, this.Y);
            },
            CopyFrom: function (V) {
                if (CirnoGame.Vector2.op_Equality(V, null)) {
                    return;
                }
                this.X = V.X;
                this.Y = V.Y;
            },
            Rotate: function (radian) {
                var angle = this.ToAngle() + radian;
                return CirnoGame.Vector2.FromRadian(angle).Normalize(this.Length);
            },
            Add: function (V) {
                this.X += V.X;
                this.Y += V.Y;
            },
            Subtract: function (V) {
                this.X -= V.X;
                this.Y -= V.Y;
            }
        }
    });

    Bridge.define("CirnoGame.AimedShooter", {
        inherits: [CirnoGame.EntityBehavior],
        fields: {
            time: 0,
            maxtime: 0,
            Target: null,
            maxDistance: 0,
            maxShadow: 0,
            attackpower: 0,
            bulletSpeed: 0,
            bulletDuration: 0,
            ignoresterrain: false,
            bulletgraphic: null,
            attackTelegraphTime: 0
        },
        ctors: {
            init: function () {
                this.time = 0;
                this.maxtime = 480;
                this.maxDistance = 130;
                this.maxShadow = 5;
                this.attackpower = 1;
                this.bulletSpeed = 0.5;
                this.bulletDuration = 900;
                this.ignoresterrain = false;
                this.bulletgraphic = "ebullet";
                this.attackTelegraphTime = 60;
            },
            ctor: function (entity) {
                this.$initialize();
                CirnoGame.EntityBehavior.ctor.call(this, entity);
                /* entity.Ani.HueColor = "#FF0000";
                entity.Ani.HueRecolorStrength = 2.0f;*/
                entity.Ani.Shadowcolor = "#FF0000";
            }
        },
        methods: {
            Update: function () {
                CirnoGame.EntityBehavior.prototype.Update.call(this);
                this.UpdateTarget();
                var A = this.entity.Ani;



                if (this.Target != null) {
                    if (this.time < this.attackTelegraphTime) {
                        //if ((time & 4) > 0)
                        if (true) {
                            //A.Shadow = 6-(time * 0.1f);
                            A.Shadow = this.maxShadow;
                        } else {
                            A.Shadow = 0;
                        }
                    } else {
                        A.Shadow = 0;
                    }
                    this.time = (this.time - 1) | 0;
                    if (this.time <= 0) {
                        this.ResetTimer();
                        this.Shoot();
                    }
                } else {
                    A.Shadow = 0;
                }
                /* A.Shadowcolor = A.HueColor;
                A.Shadow = A.Shadowcolor != "" ? 0 : 3;
                A.HueColor = "#FF0000";
                A.HueRecolorStrength = 2.0f;*/
                //A.Update();

            },
            UpdateTarget: function () {
                if (this.Target != null) {
                    if (this.Target.Position.EstimatedDistance(this.entity.Position) > this.maxDistance) {
                        this.Target = null;
                    } else {
                        return;
                    }
                }
                var T = this.entity.Game.player;
                if (T.Position.EstimatedDistance(this.entity.Position) < this.maxDistance) {
                    this.Target = T;
                    this.ResetTimer();
                }
            },
            ResetTimer: function () {
                this.time = (((Bridge.Int.div(this.maxtime, 2)) | 0));
                this.time = (this.time + Bridge.Int.clip32(Bridge.Math.round(this.time * Math.random(), 0, 6))) | 0;
            },
            Shoot: function () {
                if (this.Target == null || Bridge.cast(this.Target, CirnoGame.ICombatant).CirnoGame$ICombatant$HP <= 0) {
                    return;
                }
                var P = new CirnoGame.PlayerBullet(this.entity.Game, this.entity, System.String.concat("images/misc/", this.bulletgraphic));
                P.Position.CopyFrom(this.entity.getCenter());

                var D = (CirnoGame.Vector2.op_Subtraction(this.Target.getCenter(), P.Position));
                D.SetAsNormalize(this.bulletSpeed);
                P.Hspeed = D.X;
                P.Vspeed = D.Y;
                P.touchDamage = this.attackpower;
                P.ignoresterrain = this.ignoresterrain;
                P.Duration = this.bulletDuration;
                this.entity.Game.AddEntity(P);
            }
        }
    });

    Bridge.define("CirnoGame.ButtonSprite", {
        inherits: [CirnoGame.Sprite],
        fields: {
            _buttonNeedsRerender: false,
            _buttonBuffer: null,
            _buttonGraphic: null,
            Data: null,
            _contents: null,
            _borderSize: 0,
            _borderColor: null,
            LockedClickSound: null,
            ClickSound: null,
            _buttonColor: null,
            ColorSchemes: null,
            locked: false,
            OnClick: null,
            LContentSize: null
        },
        props: {
            Contents: {
                get: function () {
                    return this._contents;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._contents, value)) {
                        this._contents = value;
                        this._buttonNeedsRerender = true;
                    }
                }
            },
            BorderSize: {
                get: function () {
                    return this._borderSize;
                },
                set: function (value) {
                    if (this._borderSize !== value) {
                        this._borderSize = value;
                        this._buttonNeedsRerender = true;
                    }
                }
            },
            BorderColor: {
                get: function () {
                    return this._borderColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._borderColor, value)) {
                        this._borderColor = value;
                        this._buttonNeedsRerender = true;
                    }
                }
            },
            ButtonColor: {
                get: function () {
                    return this._buttonColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._buttonColor, value)) {
                        this._buttonColor = value;
                        this._buttonNeedsRerender = true;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.LockedClickSound = "hit";
                this.ClickSound = "select";
                this.locked = false;
                this.LContentSize = new CirnoGame.Vector2();
            },
            ctor: function (contents, borderSize, borderColor, buttonColor, data) {
                if (borderSize === void 0) { borderSize = 2; }
                if (borderColor === void 0) { borderColor = "#00AA33"; }
                if (buttonColor === void 0) { buttonColor = "#11CC55"; }
                if (data === void 0) { data = null; }

                this.$initialize();
                CirnoGame.Sprite.ctor.call(this);
                this.Contents = contents;
                this.BorderSize = borderSize;
                this.BorderColor = borderColor;
                this.ButtonColor = buttonColor;

                this._buttonBuffer = new CirnoGame.Sprite();
                this._buttonBuffer.Size = contents.Size;
                this._buttonGraphic = this._buttonBuffer.GetGraphics();
                this._buttonNeedsRerender = true;
                this.ColorSchemes = new (System.Collections.Generic.List$1(CirnoGame.ButtonSprite.ColorScheme)).ctor();
                this.ColorSchemes.add(new CirnoGame.ButtonSprite.ColorScheme(borderColor, buttonColor));
                this.ColorSchemes.add(new CirnoGame.ButtonSprite.ColorScheme("#FFFFFF", "#FF0000"));
                this.ColorSchemes.add(new CirnoGame.ButtonSprite.ColorScheme("#777777", "#CCCCCC"));

                this.Data = data;
                if (data == null && Bridge.is(contents, CirnoGame.TextSprite)) {
                    this.Data = Bridge.cast(contents, CirnoGame.TextSprite).Text;
                }

                this.Draw(null);
            }
        },
        methods: {
            SetColorScheme: function (scheme) {
                this.BorderColor = scheme.BorderColor;
                this.ButtonColor = scheme.ButtonColor;
            },
            SetColorScheme$1: function (index) {
                var C = this.ColorSchemes.getItem(index);
                this.SetColorScheme(C);
            },
            drawButton: function () {
                var g = this._buttonGraphic;
                var sz = (this._borderSize + this._borderSize) | 0;
                this._buttonBuffer.Size = CirnoGame.Vector2.op_Addition(this.Contents.Size, new CirnoGame.Vector2(sz, sz));
                var size = this._buttonBuffer.Size;

                g.fillStyle = this._borderColor;
                g.fillRect(0, 0, size.X, size.Y);

                g.fillStyle = this.ButtonColor;
                g.fillRect(this._borderSize, this._borderSize, ((Bridge.Int.clip32(size.X) - sz) | 0), ((Bridge.Int.clip32(size.Y) - sz) | 0));

                var color = "rgba(255,255,255,0)";

                var wht = "rgba(255,255,255,0.7)";


                var grd = g.createLinearGradient(0, 0, 0, size.Y);
                grd.addColorStop(0, color);
                grd.addColorStop(0.4, wht);
                grd.addColorStop(1, color);
                g.fillStyle = grd;
                g.fillRect(0, 0, this._buttonBuffer.Size.X, this._buttonBuffer.Size.Y);
            },
            Lock: function (setcolorscheme) {
                if (setcolorscheme === void 0) { setcolorscheme = true; }
                if (this.locked) {
                    return;
                }
                this.locked = true;
                if (setcolorscheme) {
                    this.SetColorScheme$1(2);
                }
            },
            Unlock: function (setcolorscheme) {
                if (setcolorscheme === void 0) { setcolorscheme = true; }
                if (!this.locked) {
                    return;
                }
                this.locked = false;
                if (setcolorscheme) {
                    this.SetColorScheme$1(0);
                }
            },
            CheckClick: function (mousePosition) {
                if (this.Visible && this.GetBounds().containsPoint(mousePosition)) {
                    if (this.locked) {
                        if (!Bridge.referenceEquals(this.LockedClickSound, "") && this.LockedClickSound != null) {
                            CirnoGame.AudioManager._this.Blast(System.String.concat("SFX/", this.LockedClickSound, ".ogg"));
                        }
                        return false;
                    }

                    if (!Bridge.referenceEquals(this.ClickSound, "") && this.ClickSound != null) {
                        //AudioManager._this.Get("SFX/" + ClickSound);
                        CirnoGame.AudioManager._this.Blast(System.String.concat("SFX/", this.ClickSound, ".ogg"));

                    }
                    var tmp = this.OnClick;
                    if (tmp) {
                        this.OnClick();
                    }
                    return true;
                }
                return false;
            },
            Draw: function (g) {
                //if (_contents.Size != LContentSize)
                if (this._contents.Size.X !== this.LContentSize.X || this._contents.Size.Y !== this.LContentSize.Y) {
                    this._buttonNeedsRerender = true;
                    this.LContentSize = this._contents.Size.Clone();
                }
                if (this._buttonNeedsRerender) {
                    this.drawButton();
                    this._buttonNeedsRerender = false;
                }
                this.Size = this._buttonBuffer.Size.Clone();
                //spriteGraphics.DrawImage(_bu)
                this._buttonBuffer.Draw(this.spriteGraphics);
                this.Contents.Position = new CirnoGame.Vector2(this._borderSize, this._borderSize);
                this.Contents.Draw(this.spriteGraphics);

                if (g != null) {
                    CirnoGame.Sprite.prototype.Draw.call(this, g);
                }
            }
        }
    });

    Bridge.define("CirnoGame.Chest", {
        inherits: [CirnoGame.Entity],
        fields: {
            ForceLocked: false,
            TupleNames: null
        },
        props: {
            Golden: false,
            Opened: false,
            Heart: false
        },
        ctors: {
            init: function () {
                this.ForceLocked = false;
                this.TupleNames = System.Array.init(["Null", "Single", "Double", "Triple", "Quadruple", "Quintuple", "Sextuple", "Septuple", "Octuple", "Nonuple", "Decuple"], System.String);
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation("images/misc/chest"));
                this.Ani.ImageSpeed = 0;
                if (Math.random() < 0.15) {
                    this.Heartify();
                }
            }
        },
        methods: {
            Goldify: function () {
                var P = this.Ani.Position;
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation("images/misc/goldchest"));
                this.Ani.ImageSpeed = 0;
                this.Ani.Position.CopyFrom(P);
                this.Golden = true;
                this.Heart = false;
            },
            Heartify: function () {
                var P = this.Ani.Position;
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation("images/misc/pinkchest"));
                this.Ani.ImageSpeed = 0;
                this.Ani.Position.CopyFrom(P);
                this.Heart = true;
            },
            Update: function () {
                CirnoGame.Entity.prototype.Update.call(this);
                var F = this.GetFloor();
                if (F == null) {
                    this.Vspeed = 2;
                } else {
                    this.Vspeed = 0;
                    this.y = F.GetHitbox().top - this.Ani.CurrentImage.height;
                }
                var P = this.Game.player;
                if (P.Position.EstimatedDistance(this.Position) < 16) {
                    if (!this.ForceLocked) {
                        if (!this.Opened && P.Controller[System.Array.index(2, P.Controller)] && (P.keys > 0 || this.Golden)) {
                            if (!this.Golden) {
                                P.keys = (P.keys - 1) | 0;
                            }
                            this.Open(P);
                        }
                    } else if (P.Controller[System.Array.index(2, P.Controller)]) {
                        P.MSG.ChangeText("It's sealed with magic...");
                    }
                }
            },
            Open: function (player) {
                if (!this.Opened) {
                    this.PlaySound("chestopen");
                    this.Ani.CurrentFrame = 1;
                    this.Ani.SetImage();
                    this.Ani.Update();
                    this.Opened = true;
                    //TODO:give player a permanent upgrade, and display text above the chest telling the player what they just got
                    var M = "";
                    var ok = true;
                    var S = "";
                    var color = "#FFFFFF";
                    var picker = null;
                    while (ok) {
                        var common = System.Array.init(["point", "point", "point", "point", "point", "point", "heart", "heart", "tripleheart", "singleorb"], System.String);
                        var rare = System.Array.init(["attackpower", "defensepower", "mining"], System.String);
                        var legendary = System.Array.init(["triplejump", "cheaperblocks", "invincibility", "repeater", "movespeed"], System.String);

                        var heartTable = System.Array.init(["supertripleheart"], System.String);


                        var R = Math.random();
                        var C;
                        if (this.Heart) {
                            C = CirnoGame.HelperExtensions.Pick(System.String, heartTable);
                            S = "common";
                            color = "#FFFFFF";
                        } else {
                            if (picker == null || Math.random() < 0.2) {
                                if (R < 0.6 && !this.Golden) {
                                    picker = common;
                                    S = "common";
                                    color = "#FFFFFF";
                                } else {
                                    R = Math.random();
                                    if (R < 0.91) {
                                        picker = rare;
                                        S = "rare";
                                        color = "#FFBB33";
                                    } else {
                                        picker = legendary;
                                        S = "legendary";
                                        color = "#FF55FF";
                                    }
                                }
                            }
                            if (true) {
                                C = CirnoGame.HelperExtensions.Pick(System.String, picker);
                            } else {
                                picker = legendary;
                                S = "legendary";
                                color = "#FF55FF";
                                C = "movespeed";
                            }
                        }
                        ok = false;
                        var CI;
                        switch (C) {
                            case "point": 
                                var P = new CirnoGame.PointItem(this.Game);
                                P.Position.CopyFrom(this.Position);
                                P.Vspeed = -2.0;
                                P.Hspeed = -2.0;
                                P.collectionDelay = 30;
                                this.Game.AddEntity(P);
                                P = new CirnoGame.PointItem(this.Game);
                                P.Position.CopyFrom(this.Position);
                                P.Vspeed = -2.0;
                                P.Hspeed = 2.0;
                                P.collectionDelay = 30;
                                this.Game.AddEntity(P);
                                M = "Points";
                                break;
                            case "heart": 
                                if (player.HP >= player.maxHP) {
                                    ok = true;
                                    break;
                                }
                                var H = new CirnoGame.HealingItem(this.Game);
                                H.Position.CopyFrom(this.Position);
                                H.Vspeed = -2.0;
                                H.collectionDelay = 30;
                                this.Game.AddEntity(H);
                                M = "Heal";
                                break;
                            case "tripleheart": 
                                if ((player.HP > player.maxHP / 3) && !this.Heart) {
                                    ok = true;
                                    break;
                                }
                                var H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = -2.0;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = 0;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = 2.0;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                M = "Heal x3";
                                break;
                            case "supertripleheart": 
                                if ((player.HP > player.maxHP / 3) && !this.Heart) {
                                    ok = true;
                                    break;
                                }
                                H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = -2.0;
                                H1.healingPower *= 1.5;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = 0;
                                H1.healingPower *= 1.5;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                H1 = new CirnoGame.HealingItem(this.Game);
                                H1.Position.CopyFrom(this.Position);
                                H1.Vspeed = -2.0;
                                H1.Hspeed = 2.0;
                                H1.healingPower *= 1.5;
                                H1.collectionDelay = 30;
                                this.Game.AddEntity(H1);
                                M = "Heal+";
                                break;
                            case "singleorb": 
                                if (this.Game.timeRemaining > 0) {
                                    ok = true;
                                    break;
                                }
                                CI = new CirnoGame.Orb(this.Game);
                                CI.Position.CopyFrom(this.Position);
                                CI.Vspeed = -2.0;
                                CI.Hspeed = -2.0;
                                CI.collectionDelay = 30;
                                this.Game.AddEntity(CI);
                                /* CI = new Orb(Game);
                                CI.Position.CopyFrom(Position);
                                CI.Vspeed = -2f;
                                CI.Hspeed = 2f;
                                CI.collectionDelay = 30;
                                Game.AddEntity(CI);*/
                                M = "Orb";
                                break;
                            case "mining": 
                                if (player.digpower < 2.0) {
                                    player.digpower += 0.5;
                                } else {
                                    ok = true;
                                }
                                M = "Mining Power " + System.Single.format((player.digpower)) + "x";
                                break;
                            case "triplejump": 
                                var PC = player.GetBehavior(CirnoGame.PlatformerControls);
                                if (PC.maxAirJumps < 2) {
                                    PC.maxAirJumps = 2;
                                } else {
                                    ok = true;
                                }
                                M = "Triple Jump";
                                break;
                            case "cheaperblocks": 
                                if (player.blockprice !== 4) {
                                    ok = true;
                                    break;
                                }
                                player.blockprice = 1;
                                M = "Blocks are cheaper now";
                                break;
                            case "movespeed": 
                                if (player.data.containsKey("movespeed")) {
                                    ok = true;
                                    break;
                                }
                                player.data.set("movespeed", true);
                                var Plat = player.GetBehavior(CirnoGame.PlatformerControls);
                                Plat.maxSpeed *= 1.07;
                                Plat.accel *= 1.07;
                                M = "Movement speed+";
                                break;
                            case "invincibility": 
                                if (player.invincibilitymod !== 1) {
                                    ok = true;
                                    break;
                                }
                                player.invincibilitymod = 2;
                                M = "Invincibility extended";
                                break;
                            case "attackpower": 
                                player.attackpower += 1;
                                M = "Attack Power " + Bridge.Int.clip32((player.attackpower));
                                break;
                            case "defensepower": 
                                player.defensepower += 1;
                                M = "Defensive Power " + Bridge.Int.clip32((player.defensepower));
                                break;
                            case "repeater": 
                                if (player.totalshots > 2) {
                                    ok = true;
                                    break;
                                }
                                player.totalshots = (player.totalshots + 1) | 0;
                                M = System.String.concat(this.TupleNames[System.Array.index(player.totalshots, this.TupleNames)], " shot");
                                break;
                            default: 
                                ok = true;
                                break;
                        }

                    }
                    if (!ok && !Bridge.referenceEquals(M, "")) {
                        var FM = new CirnoGame.FloatingMessage(this.Game, M);
                        FM.Text.TextColor = color;
                        //FM.Position = new Vector2(x - 8, y - 20);
                        FM.Position = new CirnoGame.Vector2(this.x + 8, this.y - 20);
                        this.Game.AddEntity(FM);
                        if (!Bridge.referenceEquals(S, "") && !Bridge.referenceEquals(S, "common")) {
                            this.PlaySound("ok2B");
                        } else {
                            this.PlaySound("jump");
                        }
                    }
                }
            },
            GetFloor: function () {
                var T = null;
                var W = this.Width / 3;
                var Y = this.Height;
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width - W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = null;
                }
                return T;
            }
        }
    });

    Bridge.define("CirnoGame.CollectableItem", {
        inherits: [CirnoGame.Entity],
        fields: {
            floats: false,
            magnetDistance: 0,
            magnetSpeed: 0,
            maxFallSpeed: 0,
            fallaccel: 0,
            itemName: null,
            collectionDelay: 0,
            sound: null
        },
        ctors: {
            init: function () {
                this.floats = true;
                this.magnetDistance = 35;
                this.magnetSpeed = 8;
                this.maxFallSpeed = 2;
                this.fallaccel = 0.1;
                this.collectionDelay = 10;
                this.sound = "powerup";
            },
            ctor: function (game, itemName) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader.Get(System.String.concat("images/items/", itemName)));
                this.Ani.SetImage();
                this.itemName = itemName;
            }
        },
        methods: {
            CanCollect: function (player) {
                return true;
            },
            Update: function () {
                if (this.collectionDelay > 0) {
                    this.collectionDelay = (this.collectionDelay - 1) | 0;
                }
                var C;
                var player = this.Game.player;

                if (this.collectionDelay <= 0 && this.CanCollect(player) && (((C = player.getCenter())).EstimatedDistance(this.Position) < this.magnetDistance)) {
                    var C2 = this.getCenter();
                    var P = CirnoGame.Vector2.op_Subtraction(C, C2);
                    var ln = P.Length;
                    var spd = this.magnetSpeed;
                    var fspd = spd / Math.max(1, ln);
                    if (ln <= fspd) {
                        //((PlayerCharacter)Game.player).onCollectItem(this);
                        this.Alive = false;
                        this.Hspeed = 0;
                        this.Vspeed = 0;
                        this.Position.CopyFrom(this.Game.player.Position);
                        this.onCollected(this.Game.player);
                        this.PlaySound(this.sound);
                        return;

                    }
                    P = P.Normalize(fspd);
                    /* x += P.X;
                    y += P.Y;*/
                    this.Hspeed = P.X;
                    this.Vspeed = P.Y;

                    //Vspeed = 0;
                } else if (!this.floats) {
                    var F = this.GetFloor();
                    if (F == null) {
                        if (this.Vspeed < this.maxFallSpeed) {
                            this.Vspeed = Math.min(this.Vspeed + this.fallaccel, this.maxFallSpeed);
                        } else {
                            this.Vspeed = this.maxFallSpeed;
                        }
                    } else {
                        this.Vspeed = 0;
                        this.y = F.GetHitbox().top - this.Ani.CurrentImage.height;
                    }
                    //Hspeed = 0;
                    this.Hspeed = CirnoGame.MathHelper.Decelerate(this.Hspeed, 0.1);
                } else {
                    //Hspeed = 0;
                    //Vspeed = 0;
                    this.Hspeed = CirnoGame.MathHelper.Decelerate(this.Hspeed, 0.1);
                    this.Vspeed = CirnoGame.MathHelper.Decelerate(this.Vspeed, 0.1);
                }
                CirnoGame.Entity.prototype.Update.call(this);
            },
            GetFloor: function () {
                var T = null;
                var W = this.Width / 3;
                var Y = this.Height;
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width - W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = null;
                }
                return T;
            }
        }
    });

    Bridge.define("CirnoGame.ControllableEntity", {
        inherits: [CirnoGame.Entity],
        fields: {
            Controller: null,
            LController: null
        },
        ctors: {
            ctor: function (game) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Controller = System.Array.init(7, false, System.Boolean);
                this.LController = System.Array.init(this.Controller.length, false, System.Boolean);
            }
        },
        methods: {
            /**
             * returns true if the button was just pressed.
             *
             * @instance
             * @public
             * @this CirnoGame.ControllableEntity
             * @memberof CirnoGame.ControllableEntity
             * @param   {number}     button
             * @return  {boolean}
             */
            Pressed: function (button) {
                return (this.Controller[System.Array.index(button, this.Controller)] !== this.LController[System.Array.index(button, this.LController)] && this.Controller[System.Array.index(button, this.Controller)]);
            },
            /**
             * returns true if just released.
             *
             * @instance
             * @public
             * @this CirnoGame.ControllableEntity
             * @memberof CirnoGame.ControllableEntity
             * @param   {number}     button
             * @return  {boolean}
             */
            Released: function (button) {
                return (this.Controller[System.Array.index(button, this.Controller)] !== this.LController[System.Array.index(button, this.LController)] && !this.Controller[System.Array.index(button, this.Controller)]);
            }
        }
    });

    Bridge.define("CirnoGame.ExitDoor", {
        inherits: [CirnoGame.Entity],
        fields: {
            reset: 0,
            RT: null,
            _Opened: false
        },
        props: {
            Opened: {
                get: function () {
                    return this._Opened;
                },
                set: function (value) {
                    this._Opened = value;
                    if (this._Opened) {
                        this.Ani.CurrentFrame = 1;
                        this.Ani.SetImage();
                    } else {
                        this.Ani.CurrentFrame = 0;
                        this.Ani.SetImage();
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.reset = 0;
                this._Opened = false;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader.Get("images/misc/door"));
                this.Ani.ImageSpeed = 0;
                this.Ani.SetImage();
                this.RemovedOnLevelEnd = false;
            }
        },
        methods: {
            DropToGround: function () {
                while (this.GetFloor() == null) {
                    this.y += 16;
                }
                var F = this.GetFloor();
                //F.Breakable = false;
                var FB = F.GetHitbox();
                this.x = FB.left;
                this.y = FB.top - 32;
                var T = this.Game.TM.GetTile(F.column, ((F.row - 1) | 0));
                if (T != null && T.enabled && T.topSolid) {
                    this.y -= 16;
                    F = T;
                    console.log("dug door out of the ground");

                }
                this.RT = F;
                /* F.Breakable = false;
                F.texture = 0;

                Game.TM.RedrawTile(F.column, F.row);*/
                this.reset = 0;

            },
            Update: function () {
                CirnoGame.Entity.prototype.Update.call(this);
                if (!this._Opened) {
                    return;
                }
                /* var F = GetFloor();
                if (F == null)
                {
                   Vspeed = 1;
                }
                else
                {
                   Vspeed = 0;
                   y = F.GetHitbox().top - Ani.CurrentImage.Height;
                }*/
                var P = this.Game.player;
                if (P.Position.EstimatedDistance(this.Position) < 20 && P.Controller[System.Array.index(2, P.Controller)]) {
                    this.Opened = false;
                    P.score = (P.score + (Bridge.Int.mul(this.Game.level, 10))) | 0;

                    var time = 13000;
                    if (this.Game.timeRemaining > 0) {
                        this.Game.timeRemaining += time;
                        this.Game.timeRemaining = Math.min(this.Game.defaultTimeRemaining, this.Game.timeRemaining);
                    } else {
                        this.Game.timeRemaining += time;
                    }
                    this.Game.StartNextLevel();

                    /* P.keys--;
                    Open(P);*/
                    /* Ani.CurrentFrame = 1;
                    Ani.SetImage();
                    Ani.Update();*/
                }
                if (this.reset < 2) {
                    this.reset = (this.reset + 1) | 0;
                    //reset = false;
                    //var F = GetFloor();
                    var F = this.RT;
                    if (F != null && this.reset === 2) {
                        F.Breakable = false;
                        F.texture = 0;
                        this.Game.TM.RedrawTile(F.column, F.row);
                    }
                }
            },
            GetFloor: function () {
                var T = null;
                var W = this.Width / 3;
                var Y = this.Height;
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width - W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = null;
                }
                return T;
            }
        }
    });

    Bridge.define("CirnoGame.FlightControls", {
        inherits: [CirnoGame.EntityBehavior],
        fields: {
            accel: 0,
            maxSpeed: 0,
            _platformer: null
        },
        ctors: {
            init: function () {
                this.accel = 0.35;
                this.maxSpeed = 1.5;
            },
            ctor: function (entity) {
                this.$initialize();
                CirnoGame.EntityBehavior.ctor.call(this, entity);
                this._platformer = entity;
            }
        },
        methods: {
            Update: function () {
                var controller = this._platformer.Controller;
                if (controller[System.Array.index(0, controller)] && this._platformer.Hspeed > -this.maxSpeed) {
                    this._platformer.Hspeed = Math.max(this._platformer.Hspeed - (this.accel + this._platformer.friction), -this.maxSpeed);
                }
                if (controller[System.Array.index(1, controller)] && this._platformer.Hspeed < this.maxSpeed) {
                    this._platformer.Hspeed = Math.min(this._platformer.Hspeed + (this.accel + this._platformer.friction), this.maxSpeed);
                }
                if (controller[System.Array.index(2, controller)] && this._platformer.Vspeed > -this.maxSpeed) {
                    this._platformer.Vspeed = Math.max(this._platformer.Vspeed - (this.accel + this._platformer.friction), -this.maxSpeed);
                }
                if (controller[System.Array.index(3, controller)] && this._platformer.Vspeed < this.maxSpeed) {
                    this._platformer.Vspeed = Math.min(this._platformer.Vspeed + (this.accel + this._platformer.friction), this.maxSpeed);
                }
                /* var jumpbutton = 5;
                if (_platformer.Vspeed >= 0 && _platformer.onGround)
                {
                   if (_platformer.Pressed(jumpbutton) && _platformer.onGround && _platformer.Ceiling == null)
                   {
                       _platformer.Vspeed = -jumpSpeed;
                       ///entity.PlaySound("jump");
                   }
                }
                else if (airJumps < maxAirJumps && _platformer.Pressed(jumpbutton) && _platformer.Ceiling == null)
                {
                   _platformer.Vspeed = -(jumpSpeed * airjumppower);
                   airJumps++;
                }
                if (_platformer.Vspeed < 0 && !controller[jumpbutton])
                {
                   _platformer.Vspeed += (_platformer.gravity * 2);
                }*/
                CirnoGame.EntityBehavior.prototype.Update.call(this);
            }
        }
    });

    Bridge.define("CirnoGame.FloatingMessage", {
        inherits: [CirnoGame.Entity],
        fields: {
            time: 0,
            Text: null,
            alpha: 0,
            autokill: false
        },
        ctors: {
            init: function () {
                this.time = 30;
                this.alpha = 1;
                this.autokill = true;
            },
            ctor: function (game, text) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(null);
                this.Text = new CirnoGame.TextSprite();
                this.Text.Text = text;
                this.Text.TextColor = "#FFFFFF";
                this.Text.ShadowColor = "#000000";
                this.Text.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Text.ShadowBlur = 1;
                this.Text.FontSize = 14;
                this.time = (30 + (Bridge.Int.mul(text.length, 20))) | 0;
            }
        },
        methods: {
            ChangeText: function (text, color) {
                if (color === void 0) { color = null; }
                this.Text.Text = text;
                this.time = (30 + (Bridge.Int.mul(text.length, 20))) | 0;
                this.alpha = 1;
                if (color != null) {
                    this.Text.TextColor = color;
                }
            },
            Update: function () {
                CirnoGame.Entity.prototype.Update.call(this);
                if (this.time > 0) {
                    this.time = (this.time - 1) | 0;
                    if (this.time < 1 && this.alpha > 0) {
                        //Alive = false;
                        this.alpha -= 0.05;
                        if (this.alpha <= 0) {
                            this.alpha = 0;
                            if (this.autokill) {
                                this.Alive = false;
                            }
                        }
                        this.time = 1;
                    }
                }
            },
            Draw: function (g) {
                //base.Draw(g);
                if (this.alpha < 1) {
                    if (this.alpha <= 0) {
                        return;
                    }
                    g.globalAlpha = this.alpha;
                }
                //Text.Position.CopyFrom(Position);
                this.Text.ForceUpdate();
                this.Text.Position.X = (Bridge.Int.clip32(this.Position.X) - (((Bridge.Int.div(this.Text.spriteBuffer.width, 2)) | 0))) | 0;
                this.Text.Position.Y = (Bridge.Int.clip32(this.Position.Y) - (((Bridge.Int.div(this.Text.spriteBuffer.height, 2)) | 0))) | 0;
                this.Text.Draw(g);
                g.globalAlpha = 1.0;
            }
        }
    });

    Bridge.define("CirnoGame.GameSprite", {
        inherits: [CirnoGame.Sprite],
        ctors: {
            ctor: function () {
                this.$initialize();
                CirnoGame.Sprite.ctor.call(this);

            }
        },
        methods: {
            Update: function () {

            },
            Render: function () {

            }
        }
    });

    Bridge.define("CirnoGame.Particle", {
        inherits: [CirnoGame.Entity],
        fields: {
            HP: 0,
            alphatime: 0
        },
        ctors: {
            init: function () {
                this.HP = 12;
                this.alphatime = 0.2;
            },
            ctor: function (game, image) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(new (System.Collections.Generic.List$1(HTMLImageElement)).$ctor1(System.Array.init([image], HTMLImageElement)));
            }
        },
        methods: {
            Update: function () {
                var $t;
                this.HP = (this.HP - 1) | 0;
                if (this.HP <= 0) {
                    if ((($t = this.Ani.Alpha - this.alphatime, this.Ani.Alpha = $t, $t)) <= 0) {
                        this.Alive = false;
                    }
                    /* if (alphatime > 0)
                    {
                       alpha -= alphatime;
                       Ani.Alpha = alpha;
                       if (alpha <= 0)
                       {
                           Alive = false;
                       }
                    }
                    else
                    {
                       Alive = false;
                    }*/
                }
                CirnoGame.Entity.prototype.Update.call(this);
            }
        }
    });

    Bridge.define("CirnoGame.PlatformerControls", {
        inherits: [CirnoGame.EntityBehavior],
        fields: {
            _platformer: null,
            accel: 0,
            jumpSpeed: 0,
            maxSpeed: 0,
            maxAirJumps: 0,
            airJumps: 0,
            airjumppower: 0
        },
        ctors: {
            init: function () {
                this.accel = 0.35;
                this.jumpSpeed = 2.25;
                this.maxSpeed = 1.5;
                this.maxAirJumps = 1;
                this.airJumps = 0;
                this.airjumppower = 0.815;
            },
            ctor: function (entity) {
                this.$initialize();
                CirnoGame.EntityBehavior.ctor.call(this, entity);
                this._platformer = entity;
            }
        },
        methods: {
            Update: function () {
                var againstwall = false;
                var controller = this._platformer.Controller;
                var X = 0;
                if (controller[System.Array.index(0, controller)] && !controller[System.Array.index(1, controller)] && this._platformer.Hspeed > -this.maxSpeed) {
                    this._platformer.Hspeed = Math.max(this._platformer.Hspeed - (this.accel + this._platformer.friction), -this.maxSpeed);
                    X = -1;
                    if (this._platformer.RightWall != null) {
                        againstwall = true;
                    }
                }
                if (controller[System.Array.index(1, controller)] && !controller[System.Array.index(0, controller)] && this._platformer.Hspeed < this.maxSpeed) {
                    this._platformer.Hspeed = Math.min(this._platformer.Hspeed + (this.accel + this._platformer.friction), this.maxSpeed);
                    X = 1;
                    if (this._platformer.LeftWall != null) {
                        againstwall = true;
                    }
                }
                var jumpbutton = 5;
                if (this._platformer.onGround) {
                    this.airJumps = 0;
                }
                if (this._platformer.Vspeed >= 0 && this._platformer.onGround) {
                    if (this._platformer.Pressed(jumpbutton) && this._platformer.onGround && this._platformer.Ceiling == null) {
                        this._platformer.Vspeed = -this.jumpSpeed;
                        this.entity.PlaySound("jump");
                    }
                } else if (this.airJumps < this.maxAirJumps && this._platformer.Pressed(jumpbutton) && this._platformer.Ceiling == null) {
                    this._platformer.Vspeed = -(this.jumpSpeed * this.airjumppower);
                    this.airJumps = (this.airJumps + 1) | 0;
                }
                if (this._platformer.Vspeed < 0 && !controller[System.Array.index(jumpbutton, controller)]) {
                    this._platformer.Vspeed += (this._platformer.gravity * 2);
                }
                CirnoGame.EntityBehavior.prototype.Update.call(this);
            }
        }
    });

    Bridge.define("CirnoGame.PlayerBullet", {
        inherits: [CirnoGame.Entity,CirnoGame.IHarmfulEntity,CirnoGame.ILightSource],
        fields: {
            shooter: null,
            Duration: 0,
            hitEntities: null,
            piercing: false,
            spinrate: 0,
            Gravity: null,
            Bounces: false,
            attacksterrain: false,
            digpower: 0,
            ignoresterrain: false,
            _maxLightRadius: 0,
            _touchDamage: 0
        },
        props: {
            Attacker: {
                get: function () {
                    return this.shooter;
                }
            },
            IsHarmful: {
                get: function () {
                    return true;
                }
            },
            lightFlicker: {
                get: function () {
                    return false;
                }
            },
            lightPosition: {
                get: function () {
                    return this.getCenter();
                }
            },
            maxLightRadius: {
                get: function () {
                    return this.Ani.Alpha >= 1 ? this._maxLightRadius : 0.0;
                },
                set: function (value) {
                    this._maxLightRadius = value;
                }
            },
            touchDamage: {
                get: function () {
                    return this._touchDamage;
                },
                set: function (value) {
                    this._touchDamage = value;
                }
            }
        },
        alias: [
            "Attacker", "CirnoGame$IHarmfulEntity$Attacker",
            "IsHarmful", "CirnoGame$IHarmfulEntity$IsHarmful",
            "lightFlicker", "CirnoGame$ILightSource$lightFlicker",
            "lightPosition", "CirnoGame$ILightSource$lightPosition",
            "maxLightRadius", "CirnoGame$ILightSource$maxLightRadius",
            "touchDamage", "CirnoGame$IHarmfulEntity$touchDamage",
            "ontouchDamage", "CirnoGame$IHarmfulEntity$ontouchDamage"
        ],
        ctors: {
            init: function () {
                this.Duration = 0;
                this.spinrate = 0;
                this.Gravity = new CirnoGame.Vector2();
                this.attacksterrain = false;
                this.digpower = 0.5;
                this.ignoresterrain = false;
                this._maxLightRadius = 1.5;
                this._touchDamage = 1.0;
            },
            ctor: function (game, shooter, graphic) {
                if (graphic === void 0) { graphic = "Reisenbullet"; }

                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation(graphic));
                this.shooter = shooter;

                //Ani.HueColor = Game.GetTeamColor(((ICombatant)shooter).Team);
                this.piercing = false;

                this.hitEntities = new (System.Collections.Generic.List$1(CirnoGame.Entity)).ctor();
            }
        },
        methods: {
            GetHitbox: function () {
                if (this.Ani != null && this.Ani.CurrentImage != null) {
                    //float s = Math.Max(Ani.CurrentImage.Width, Ani.CurrentImage.Height);
                    //float s = Ani.CurrentImage.Height;
                    var s = this.Ani.CurrentImage.height * 1.5;
                    //float s2 = s / 2f;
                    //Vector2 V = Ani.Position;
                    var so2 = s / 2;
                    //Vector2 V = getCenter() - new Vector2(so2,so2);
                    var V = CirnoGame.Vector2.Subtract$1(this.getCenter(), so2, so2);
                    return new CirnoGame.Rectangle(V.X, V.Y, s, s);
                }
                return null;
            },
            ontouchDamage: function (target) {
                if (!this.piercing) {
                    this.Alive = false;
                }

                var ok = !this.hitEntities.contains(Bridge.cast(target, CirnoGame.Entity));
                if (ok) {
                    this.hitEntities.add(Bridge.cast(target, CirnoGame.Entity));
                    return true;
                }
                return false;
            },
            Update: function () {
                CirnoGame.Entity.prototype.Update.call(this);
                if (this.spinrate !== 0) {
                    this.Ani.Rotation += this.spinrate;
                }
                if (this.Gravity.RoughLength !== 0) {
                    this.Speed = CirnoGame.Vector2.op_Addition(this.Speed, this.Gravity);
                }
                //if (!App.screenbounds.isTouching(GetHitbox()))

                //if (!Game.stageBounds.isTouching(GetHitbox()))
                if (!this.Game.stageBounds.containsPoint(this.Position)) {
                    if ((this.Ani.X > 0 === this.Hspeed > 0 || this.Ani.X < 0 === this.Hspeed < 0) || (this.Ani.Y > 0 === this.Vspeed > 0 || this.Ani.Y < 0 === this.Vspeed < 0)) {
                        this.Alive = false;
                    }
                }
                //Vector2 center = getCenter();
                var center = CirnoGame.Vector2.Add$1(this.Position, 8, 0);
                if (!this.ignoresterrain) {
                    var T = null;
                    if (!this.Bounces) {
                        T = this.Game.TM.CheckForTile(new CirnoGame.Vector2(center.X, this.y));
                    }
                    if (T != null && T.enabled && T.solid) {
                        if (this.attacksterrain) {
                            if (T.Breakable) {
                                //T.Damage(_touchDamage * digpower);
                                if (T.Damage(this.digpower)) {
                                    this.PlaySound("thunk4");
                                } else {
                                    this.PlaySound("thunk");
                                }
                            } else {
                                this.PlaySound("plink");
                            }
                        }
                        this.Alive = false;
                    } else if (this.Bounces) {

                        T = this.Game.TM.CheckForTile(CirnoGame.Vector2.op_Addition(center, new CirnoGame.Vector2(this.Speed.X)));
                        if (T != null && T.enabled && T.solidToSpeed(this.Speed.ToCardinal())) {
                            this.Speed.X = -this.Speed.X;
                        }

                        T = this.Game.TM.CheckForTile(CirnoGame.Vector2.op_Addition(center, new CirnoGame.Vector2(0, this.Speed.Y)));
                        if (T != null && T.enabled && T.solidToSpeed(this.Speed.ToCardinal())) {
                            this.Speed.Y = -this.Speed.Y;
                        }

                        T = this.Game.TM.CheckForTile(CirnoGame.Vector2.op_Addition(center, this.Speed));
                        if (T != null && T.enabled && T.solidToSpeed(this.Speed.ToCardinal())) {
                            this.Speed.X = -this.Speed.X;
                            this.Speed.Y = -this.Speed.Y;
                        }
                    }
                }
                if (this.Duration > 0) {
                    this.Duration = (this.Duration - 1) | 0;
                    if (this.Duration <= 0) {
                        this.Duration = 1;
                        this.Ani.Alpha -= 0.2;
                        if (this.Ani.Alpha <= 0) {
                            this.Alive = false;
                        }
                    }
                }
            }
        }
    });

    Bridge.define("CirnoGame.RandomAI", {
        inherits: [CirnoGame.EntityBehavior],
        fields: {
            CE: null
        },
        ctors: {
            ctor: function (entity) {
                this.$initialize();
                CirnoGame.EntityBehavior.ctor.call(this, entity);
                this.CE = entity;
                this.FramesPerTick = 15;
            }
        },
        methods: {
            Update: function () {
                CirnoGame.EntityBehavior.prototype.Update.call(this);
                if (Math.random() < 0.1) {
                    var Controller = this.CE.Controller;
                    Controller[System.Array.index(0, Controller)] = false;
                    Controller[System.Array.index(1, Controller)] = false;
                    Controller[System.Array.index(2, Controller)] = false;
                    Controller[System.Array.index(3, Controller)] = false;

                    if (Math.random() < 0.5) {
                        Controller[System.Array.index(0, Controller)] = Math.random() < 0.5;
                        Controller[System.Array.index(1, Controller)] = !Controller[System.Array.index(0, Controller)];
                    }

                    if (Math.random() < 0.5) {
                        Controller[System.Array.index(2, Controller)] = Math.random() < 0.5;
                        Controller[System.Array.index(3, Controller)] = !Controller[System.Array.index(2, Controller)];
                    }
                }
            }
        }
    });

    Bridge.define("CirnoGame.RoomOpeningLever", {
        inherits: [CirnoGame.Entity],
        statics: {
            fields: {
                TEST: null
            },
            methods: {
                FindAndPlaceOnWall: function (game, P, Target) {
                    var T = game.TM.CheckForTile(P);
                    if (T != null) {
                        var X = T.column;
                        var Y = T.row;

                        var XD = Math.random() < 0.5 ? -1 : 1;
                        while (true) {
                            X = (X + XD) | 0;
                            var T2 = game.TM.GetTile(X, Y);
                            if (T2 != null) {
                                if (T2.enabled && T2.solid) {
                                    var T3 = game.TM.GetTile(((X - XD) | 0), ((Y + 1) | 0));
                                    if (!(T3 != null && T3.enabled && T3.solid)) {
                                        var ret = new CirnoGame.RoomOpeningLever(game, new CirnoGame.Point(X, Y), Target, XD === 1);
                                        return ret.Alive ? ret : null;
                                    } else {
                                        return null;
                                    }
                                }
                            } else {
                                return null;
                            }
                        }
                    }
                    return null;
                }
            }
        },
        fields: {
            Room: null,
            Block: null
        },
        props: {
            Activated: false
        },
        ctors: {
            ctor: function (game, Tile, Target, flipped) {
                if (flipped === void 0) { flipped = false; }

                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation("images/misc/lever"));
                this.Ani.ImageSpeed = 0;
                this.Block = Tile;
                var T = game.TM.GetTile(Tile.X, Tile.Y);
                CirnoGame.RoomOpeningLever.TEST = this;
                if (T != null && T.solid) {
                    if (Target != null) {
                        this.Room = Target;
                    }
                    T.Breakable = false;
                    T.CanSlope = false;
                    var R = T.GetHitbox();
                    if (flipped) {
                        this.Ani.Position.X = R.left - 16;
                        this.Ani.Flipped = true;
                    } else {
                        this.Ani.Position.X = R.right;
                    }
                    this.Ani.Position.Y = R.top;
                } else {
                    this.Alive = false;
                }
            }
        },
        methods: {
            Update: function () {
                CirnoGame.Entity.prototype.Update.call(this);
                var T = this.Game.TM.GetTile(this.Block.X, this.Block.X);
                if (T != null && T.enabled && T.solid) {
                    T.Breakable = false;
                    T.CanSlope = false;
                } else {
                    this.Alive = false;
                    if (this.Room != null) {
                        this.Room.ClearRoom();
                        this.Room.GeneratePlatforms();
                        this.Room.ApplyBreakable(); //attempt to remove seams
                        this.Room.ForceRedraw();
                    }
                    //Helper.Log("Removing broken lever...");
                }
                var P = this.Game.player;
                if (!this.Activated && P.Position.EstimatedDistance(this.Position) < 16 && P.Controller[System.Array.index(2, P.Controller)]) {
                    this.Activate();
                }
            },
            Activate: function () {
                if (!this.Activated) {
                    this.Activated = true;
                    this.PlaySound("open2"); //sounds better than the electronic switch.
                    this.Ani.CurrentFrame = 1;
                    this.Ani.SetImage();
                    this.Ani.Update();
                    this.Room.UnleashSecret();
                }
            }
        }
    });

    Bridge.define("CirnoGame.TextSprite", {
        inherits: [CirnoGame.Sprite],
        fields: {
            _Text: null,
            textInvallidated: false,
            imageInvallidated: false,
            TextImage: null,
            TextGraphic: null,
            _TextColor: null,
            _FontWeight: null,
            _FontFamily: null,
            _FontSize: 0,
            _shadowBlur: 0,
            _shadowOffset: null,
            _shadowColor: null
        },
        props: {
            Text: {
                get: function () {
                    return this._Text;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._Text, value)) {
                        this._Text = value;
                        /* RedrawBaseTextImage();
                        RenderTextImage();*/
                        this.textInvallidated = true;
                        //imageInvallidated = true;
                    }
                }
            },
            TextColor: {
                get: function () {
                    return this._TextColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._TextColor, value)) {
                        this._TextColor = value;
                        //RenderTextImage();
                        this.textInvallidated = true;

                        //imageInvallidated = true;
                    }
                }
            },
            FontWeight: {
                get: function () {
                    return this._FontWeight;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._FontWeight, value)) {
                        this._FontWeight = value;
                        this.UpdateFont();
                    }
                }
            },
            FontFamily: {
                get: function () {
                    return this._FontFamily;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._FontFamily, value)) {
                        this._FontFamily = value;
                        this.UpdateFont();
                    }
                }
            },
            FontSize: {
                get: function () {
                    return this._FontSize;
                },
                set: function (value) {
                    if (this._FontSize !== value) {
                        this._FontSize = value;
                        this.UpdateFont();
                    }
                }
            },
            ShadowBlur: {
                get: function () {
                    return this._shadowBlur;
                },
                set: function (value) {
                    if (this._shadowBlur !== value) {
                        this._shadowBlur = value;
                        this.imageInvallidated = true;
                    }
                }
            },
            ShadowOffset: {
                get: function () {
                    return this._shadowOffset.Clone();
                },
                set: function (value) {
                    if (CirnoGame.Vector2.op_Inequality(this._shadowOffset, value) && value.X !== this._shadowOffset.X && value.Y !== this._shadowOffset.Y) {
                        this._shadowOffset = value.Clone();
                        this.imageInvallidated = true;
                    }
                }
            },
            ShadowColor: {
                get: function () {
                    return this._shadowColor;
                },
                set: function (value) {
                    if (!Bridge.referenceEquals(this._shadowColor, value)) {
                        this._shadowColor = value;
                        this.imageInvallidated = true;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this._FontWeight = "normal";
                this._FontFamily = "sans-serif";
                this._FontSize = 10;
                this._shadowBlur = 0.0;
                this._shadowOffset = new CirnoGame.Vector2();
                this._shadowColor = "#000000";
            },
            ctor: function () {
                this.$initialize();
                CirnoGame.Sprite.ctor.call(this);
                this.TextImage = document.createElement("canvas");
                this.TextGraphic = this.TextImage.getContext("2d");
                this.TextGraphic.imageSmoothingEnabled = false;
                //TextGraphic.Font.
                this.TextImage.style.imageRendering = "pixelated";
                this.TextGraphic.fillStyle = "#FFFFFF";
            }
        },
        methods: {
            UpdateFont: function () {
                this.TextGraphic.font = System.String.concat(this._FontWeight, " ", this._FontSize, "px ", this._FontFamily);
                this.textInvallidated = true;
                this.imageInvallidated = true;
                this.TextGraphic.fillStyle = this._TextColor;
            },
            RedrawBaseTextImage: function () {
                this.UpdateFont();
                var lines = System.String.split(this._Text, [10].map(function(i) {{ return String.fromCharCode(i); }}));
                var H = this.FontSize * 1.0;


                var W = 0;
                var i = 0;
                while (i < lines.length) {
                    var TM = this.TextGraphic.measureText(lines[System.Array.index(i, lines)]);
                    W = Math.max(W, Bridge.Int.clip32(Math.ceil(TM.width)));
                    i = (i + 1) | 0;
                }
                //TextImage.Height = (int)(H * (lines.Length+0.5f));
                this.TextImage.height = Bridge.Int.clip32(H * (lines.length + 0.25));
                this.TextImage.width = W;
                this.UpdateFont();

                var Y = 0;
                i = 0;
                while (i < lines.length) {
                    this.TextGraphic.fillText(lines[System.Array.index(i, lines)], 0, this.FontSize + Y);
                    Y += H;
                    i = (i + 1) | 0;
                }

                this.textInvallidated = false;
                this.imageInvallidated = true;
            },
            RenderTextImage: function () {

                if (this._shadowBlur <= 0) {
                    this.spriteBuffer.width = this.TextImage.width;
                    this.spriteBuffer.height = this.TextImage.height;
                } else {
                    var S = Bridge.Int.clip32(Math.ceil(this._shadowBlur + this._shadowBlur));
                    this.spriteBuffer.width = (this.TextImage.width + S) | 0;
                    this.spriteBuffer.height = (this.TextImage.height + S) | 0;
                }
                this.spriteGraphics.shadowBlur = 0;

                this.spriteGraphics.globalCompositeOperation = "source-over";
                /* spriteGraphics.FillStyle = _TextColor;
                spriteGraphics.FillRect(0, 0, spriteBuffer.Width, spriteBuffer.Height);
                Script.Write("this.spriteGraphics.globalCompositeOperation = 'destination-in'");*/
                if (this.TextImage.width <= 0) {
                    this.imageInvallidated = false;
                    return;
                }
                if (this._shadowBlur <= 0) {
                    this.spriteGraphics.drawImage(this.TextImage, 0.0, 0.0);
                } else {
                    this.spriteGraphics.drawImage(this.TextImage, this._shadowBlur, this._shadowBlur);
                }

                if (this._shadowBlur > 0) {
                    this.spriteGraphics.shadowBlur = this._shadowBlur;
                    this.spriteGraphics.shadowColor = this._shadowColor;
                    this.spriteGraphics.shadowOffsetX = this._shadowOffset.X;
                    this.spriteGraphics.shadowOffsetY = this._shadowOffset.Y;
                    this.spriteGraphics.drawImage(this.spriteBuffer, 0.0, 0.0);
                }



                this.imageInvallidated = false;
            },
            ForceUpdate: function () {
                if (this.textInvallidated) {
                    this.RedrawBaseTextImage();
                }
                if (this.imageInvallidated) {
                    this.RenderTextImage();
                }
            },
            Draw: function (g) {
                this.ForceUpdate();
                CirnoGame.Sprite.prototype.Draw.call(this, g);
            }
        }
    });

    Bridge.define("CirnoGame.Tile", {
        inherits: [CirnoGame.Entity],
        fields: {
            tile: 0
        },
        ctors: {
            ctor: function (game, tile) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.tile = tile;
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader.Get("images/land/brick"));
                this.Ani.CurrentFrame = tile;
                this.Ani.ImageSpeed = 0;
            }
        },
        methods: {
            Draw: function (g) {
                /* if (tile>=0 && tile < ani.images.Count)
                {
                   ani.currentFrame = tile;
                }*/
                CirnoGame.Entity.prototype.Draw.call(this, g);
            }
        }
    });

    Bridge.define("CirnoGame.TitleScreen", {
        inherits: [CirnoGame.Sprite],
        fields: {
            Title: null,
            Version: null,
            Desc: null,
            Controls: null,
            Credits: null,
            menu: null,
            Controller: null,
            game: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                CirnoGame.Sprite.ctor.call(this);
                this.spriteBuffer.width = CirnoGame.App.Canvas.width;
                this.spriteBuffer.height = Bridge.Int.clip32(this.spriteBuffer.width * CirnoGame.App.TargetAspect);
                this.Title = new CirnoGame.TextSprite();
                this.Title.FontSize = Bridge.Int.clip32(this.spriteBuffer.width * 0.06);
                //Title.Text = "Cirno and the mysterious tower";
                this.Title.Text = CirnoGame.App.GameName;
                this.Title.TextColor = "#77FFFF";
                this.Title.ShadowColor = "#000000";
                this.Title.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Title.ShadowBlur = 2;

                this.CenterTextWithFloats(this.Title, 0.5, 0.06);

                this.Version = new CirnoGame.TextSprite();
                this.Version.FontSize = Bridge.Int.clip32(this.spriteBuffer.width * 0.016);
                this.Version.Text = System.String.concat("Version:", CirnoGame.App.GameVersion);
                this.Version.TextColor = "#FFFFFF";
                this.Version.ShadowColor = "#000000";
                this.Version.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Version.ShadowBlur = 2;

                this.CenterTextWithFloats(this.Version, 0.75, 0.11);

                /* Title.ForceUpdate();
                Title.Position.Y = spriteBuffer.Height * 0.01f;
                Title.Position.X = (spriteBuffer.Width / 2) - (Title.spriteBuffer.Width / 2);*/



                this.Desc = new CirnoGame.TextSprite();
                this.Desc.FontSize = Bridge.Int.clip32(this.spriteBuffer.width * 0.03);
                this.Desc.TextColor = "#FFFFFF";
                //Desc.Text = "Cirno has found herself in a strange dungeon filled with ghosts!\nHer energy has been stolen, reclaim the energy orbs to extend your time.\nFind the big key to unlock the door.";
                //Desc.Text = "Cirno has found herself in a strange dungeon filled with ghosts!\nReclaim your stolen energy sealed inside the orbs to extend your time.\nFind the gold key to unlock the door.";
                this.Desc.Text = "Cirno has found herself in a strange tower filled with ghosts!\nReclaim your stolen energy sealed inside the orbs to extend your time.\nRemember the door's location and search for the gold key.";
                this.Desc.ShadowColor = "#000000";
                this.Desc.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Desc.ShadowBlur = 2;
                this.CenterTextWithFloats(this.Desc, 0.5, 0.2);

                this.Controls = new CirnoGame.TextSprite();
                this.Controls.FontSize = Bridge.Int.clip32(this.spriteBuffer.width * 0.025);
                this.Controls.TextColor = "#FFFFFF";
                this.Controls.Text = "Keyboard Controls:\nLeft/Right=Move\nUp/Down=Aim(Up activates chests/doors)\nZ=Shoot\nX=Jump/Mid-air jump\nA=Place block below you(costs time)\nEnter=Pause\nM=Toggle mute";
                this.Controls.ShadowColor = "#000000";
                this.Controls.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Controls.ShadowBlur = 2;
                this.CenterTextWithFloats(this.Controls, 0.5, 0.4);
                this.Controls.Position.X = this.Desc.Position.X;

                this.menu = new CirnoGame.ButtonMenu(this.spriteBuffer.width * 0.8, this.spriteBuffer.height * 0.5, Bridge.Int.clip32(this.spriteBuffer.width * 0.05));
                var B = this.menu.AddButton("Start Game");
                B.OnClick = Bridge.fn.bind(this, function () {
                    this.game.Start();
                });
                //menu.Finish();
                B.Position.X += this.spriteBuffer.width * 0.38;
                B.Position.Y = this.spriteBuffer.height * 0.7;

                //var CB = menu.AddButton("Controller:"+InputControllerManager._this.Controllers[0].id);
                var CB = this.menu.AddButton(System.String.concat("Controller:", CirnoGame.App.IC.id));
                this.Controller = CB;
                CB.OnClick = function () {
                    var ind = CirnoGame.InputControllerManager._this.Controllers.indexOf(CirnoGame.App.IC);
                    ind = (ind + 1) | 0;
                    if (ind >= CirnoGame.InputControllerManager._this.Controllers.Count) {
                        ind = (ind - CirnoGame.InputControllerManager._this.Controllers.Count) | 0;
                    }
                    CirnoGame.App.IC = CirnoGame.InputControllerManager._this.Controllers.getItem(ind);
                    var TS = CB.Contents;
                    var W = TS.spriteBuffer.width;
                    TS.Text = System.String.concat("Controller:", CirnoGame.App.IC.id);
                    TS.ForceUpdate();
                    CB.Position.X -= ((((Bridge.Int.div((((TS.spriteBuffer.width - W) | 0)), 2)) | 0))) | 0;
                };
                CB.Position.X += this.spriteBuffer.width * 0.38;
                ;
                CB.Position.Y = B.Position.Y + (this.spriteBuffer.height * 0.15);
                //CB.Visible = false;
                CB.Lock();

                this.Credits = new CirnoGame.TextSprite();
                this.Credits.FontSize = Bridge.Int.clip32(this.spriteBuffer.width * 0.015);
                this.Credits.TextColor = "#77FFFF";
                //Credits.Text = "Made by:RSGmaker                                                                                                                     Touhou Project and it's characters are owned by ZUN";
                this.Credits.Text = "Made by:RSGmaker                                                                                                           Touhou Project and it's characters are owned by ZUN";
                this.Credits.ShadowColor = "#000000";
                this.Credits.ShadowOffset = new CirnoGame.Vector2(2, 2);
                this.Credits.ShadowBlur = 2;
                this.CenterTextWithFloats(this.Credits, 0.5, 0.98);
            }
        },
        methods: {
            CenterTextWithFloats: function (T, X, Y) {
                this.CenterText(T, new CirnoGame.Vector2(this.spriteBuffer.width * X, this.spriteBuffer.height * Y));
            },
            CenterText: function (T, Location) {
                T.ForceUpdate();
                T.Position.X = Location.X - (((Bridge.Int.div(T.spriteBuffer.width, 2)) | 0));
                T.Position.Y = Location.Y - (((Bridge.Int.div(T.spriteBuffer.height, 2)) | 0));
            },
            Draw: function (g) {
                CirnoGame.Sprite.prototype.Draw.call(this, g);
                if (this.Controller.locked && CirnoGame.InputControllerManager._this.Controllers.Count > 1) {
                    this.Controller.Unlock();
                }

                this.Title.Draw(g);
                this.Version.Draw(g);
                this.Desc.Draw(g);
                this.Controls.Draw(g);
                this.menu.Draw(g);
                this.menu.Update();
                this.Credits.Draw(g);

                //var M = KeyboardManager._this.MousePosition.Clone();
                var M = CirnoGame.KeyboardManager._this.CMouse.Clone();
                if (!System.String.contains(CirnoGame.App.Div.style.left,"px")) {
                    return;
                }
                /* M.X -= float.Parse(App.Div.Style.Left.Replace("px", ""));*/
                //Credits.Text = "X:" + M.X+"/"+(spriteBuffer.Width * 0.1) +" Y:"+M.Y+"/"+(spriteBuffer.Height * 0.96);
                if (M.X < this.spriteBuffer.width * 0.17 && M.Y >= this.spriteBuffer.height * 0.96) {
                    CirnoGame.App.Div.style.cursor = "pointer";
                    if (CirnoGame.KeyboardManager._this.TappedMouseButtons.contains(0)) {
                        Bridge.global.location.href = "https://rsgmaker.deviantart.com";
                    }
                } else {
                    CirnoGame.App.Div.style.cursor = null;
                }
            }
        }
    });

    Bridge.define("CirnoGame.Turret", {
        inherits: [CirnoGame.Entity,CirnoGame.ICombatant],
        fields: {
            attackpower: 0,
            TTD: null
        },
        props: {
            Team: 0,
            HP: 0,
            PointsForKilling: {
                get: function () {
                    return 1;
                }
            },
            TargetPriority: {
                get: function () {
                    return 0.5;
                }
            }
        },
        alias: [
            "Team", "CirnoGame$ICombatant$Team",
            "HP", "CirnoGame$ICombatant$HP",
            "PointsForKilling", "CirnoGame$ICombatant$PointsForKilling",
            "TargetPriority", "CirnoGame$ICombatant$TargetPriority",
            "onDamaged", "CirnoGame$ICombatant$onDamaged",
            "onDeath", "CirnoGame$ICombatant$onDeath",
            "onKill", "CirnoGame$ICombatant$onKill"
        ],
        ctors: {
            init: function () {
                this.attackpower = 1;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.Entity.ctor.call(this, game);
                this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader._this.GetAnimation("images/enemies/turret"));
                this.Ani.ImageSpeed = 0;

                this.attackpower = 1 + (this.Game.level * 0.5);
                this.attackpower *= 2;
                this.HP = 0;
                this.Team = 2;
                //defensepower = 1 + (Game.level * 0.5f);
                if (this.Game.playing) {
                    var A = this.AddBehavior(CirnoGame.AimedShooter);
                    A.attackpower = this.attackpower;
                    A.maxtime = Math.max(((480 - (Bridge.Int.mul(this.Game.level, 10))) | 0), 380);
                    //A.maxtime = (int)(A.maxtime*1.75f);
                    A.maxtime = Bridge.Int.clip32(A.maxtime * 1.25);
                    A.ignoresterrain = true;
                    A.maxDistance *= 1.3;
                    A.maxShadow = 1;
                    A.bulletSpeed *= 0.8;
                    A.bulletDuration = 540;
                    A.bulletgraphic = "turretbullet";
                    A.attackTelegraphTime = (A.attackTelegraphTime + A.attackTelegraphTime) | 0;
                }
            }
        },
        methods: {
            getCenter: function () {
                return CirnoGame.Vector2.Add$1(this.Position, 5, 5);
            },
            onDamaged: function (source, amount) {
                //throw new NotImplementedException();
            },
            onDeath: function (source) {
                //throw new NotImplementedException();
            },
            onKill: function (combatant) {
                //throw new NotImplementedException();
            },
            SetDown: function (forcedown) {
                if (forcedown === void 0) { forcedown = false; }
                var TZ = this.Game.TM.tilesize;
                var TD = this.Game.TM.CheckForTile(this.Position);
                var attempts = 0;
                var direction = Math.random() < 0.5 ? TZ : -TZ;
                if (forcedown) {
                    direction = TZ;
                }
                while (!(TD != null && TD.solid && TD.visible) && attempts < 20) {
                    this.y += direction;
                    TD = this.Game.TM.CheckForTile(this.Position);
                }
                if (attempts >= 20) {
                    this.Alive = false;
                    return;
                } else {
                    this.x = (TD.column * TZ) + this.Game.TM.position.X;
                    this.y = (TD.row * TZ) + this.Game.TM.position.Y;
                    //TD.HP = TD.maxHP * 2;
                }
                this.TTD = TD;

            },
            Update: function () {
                var TD = this.Game.TM.CheckForTile(this.Position);
                if (TD != null && TD.solid && TD.visible && TD.opaque) {

                } else if (this.Alive) {
                    this.Alive = false;
                    var P = new CirnoGame.PointItem(this.Game);
                    P.Position.CopyFrom(this.Position);
                    P.collectionDelay = (Bridge.Int.div(P.collectionDelay, 2)) | 0;
                    this.Game.AddEntity(P);
                    if (Math.random() < 0.15) {
                        P = new CirnoGame.HealingItem(this.Game);
                        P.Position.CopyFrom(this.Position);
                        P.Vspeed = -2;
                        P.collectionDelay = (Bridge.Int.div(P.collectionDelay, 2)) | 0;
                        this.Game.AddEntity(P);
                    }
                    return;
                }
                if (TD.CanSlope) {
                    var redraw = false;
                    if (TD.SlopeDirection !== 0) {
                        redraw = true;
                    }
                    TD.CanSlope = false;
                    if (redraw) {
                        TD.UpdateTile();
                    }
                }
                if (this.Ani.Shadow > 0) {
                    this.Ani.ImageSpeed = 0.25;
                } else if (this.Ani.ImageSpeed > 0) {
                    this.Ani.ImageSpeed = 0;
                    this.Ani.CurrentFrame = 0;
                    this.Ani.SetImage();
                }
                CirnoGame.Entity.prototype.Update.call(this);

            }
        }
    });

    Bridge.define("CirnoGame.DoorKey", {
        inherits: [CirnoGame.CollectableItem],
        ctors: {
            ctor: function (game) {
                this.$initialize();
                CirnoGame.CollectableItem.ctor.call(this, game, "bigkey");
                this.floats = false;
                this.magnetDistance = 20;
                this.sound = "key";
            }
        },
        methods: {
            onCollected: function (player) {
                //throw new NotImplementedException();
                this.Game.Door.Opened = true;

                var FM = new CirnoGame.FloatingMessage(this.Game, "Door Unlocked!");
                FM.Text.TextColor = "#77FFFF";
                FM.Position = new CirnoGame.Vector2(this.x + 8, this.y - 20);
                this.Game.AddEntity(FM);
            },
            Update: function () {
                CirnoGame.CollectableItem.prototype.Update.call(this);
                if (this.y <= 0) {
                    this.Game.LevelRestart();
                }
            }
        }
    });

    Bridge.define("CirnoGame.Game", {
        inherits: [CirnoGame.GameSprite],
        statics: {
            methods: {
                GetTeamColor: function (team) {
                    if (team === 1) {
                        return "#FF0000";
                    } else if (team === 2 || team === 0) {
                        return "#0000FF";
                    } else if (team === 3) {
                        return "#FFFF00";
                    }
                    return "#000000";
                }
            }
        },
        fields: {
            player: null,
            entities: null,
            harmful: null,
            combatants: null,
            camera: null,
            stageBounds: null,
            TM: null,
            GamePlaySettings: null,
            TimerSprite: null,
            defaultTimeRemaining: 0,
            lastStand: 0,
            baseLifeCost: 0,
            timeRemaining: 0,
            totalTime: 0,
            level: 0,
            playing: false,
            paused: false,
            cameraWanderPoint: null,
            TS: null,
            Teams: false,
            skiprender: false,
            ScoreSprite: null,
            EG: null,
            Door: null,
            Key: null,
            BigKey: null,
            muted: false,
            lastPauseButtonState: false,
            ShowHitbox: false,
            freecam: false
        },
        props: {
            running: {
                get: function () {
                    return this.playing && !this.paused;
                }
            }
        },
        ctors: {
            init: function () {
                this.defaultTimeRemaining = 180000;
                this.lastStand = 30000;
                this.baseLifeCost = 15000;
                this.totalTime = 0;
                this.level = 0;
                this.playing = false;
                this.paused = false;
                this.Teams = true;
                this.skiprender = true;
                this.muted = false;
                this.lastPauseButtonState = false;
                this.ShowHitbox = false;
                this.freecam = false;
            },
            ctor: function () {
                this.$initialize();
                CirnoGame.GameSprite.ctor.call(this);
                this.GamePlaySettings = new CirnoGame.GamePlaySettings();
                this.Door = new CirnoGame.ExitDoor(this);
                this.entities = new (System.Collections.Generic.List$1(CirnoGame.Entity)).ctor();
                this.combatants = new (System.Collections.Generic.List$1(CirnoGame.Entity)).ctor();
                this.harmful = new (System.Collections.Generic.List$1(CirnoGame.Entity)).ctor();

                this.player = new CirnoGame.PlayerCharacter(this);
                this.player.HP = 0;
                this.timeRemaining = this.defaultTimeRemaining;
                //timeRemaining *= 0.3334f * 0.25f;

                /* test.Ani = new Animation(AnimationLoader._this.Get("images/cirno/walk"));
                test.Ani.ImageSpeed = 0.1f;*/

                //stageBounds = new Rectangle(0, 0, 8000, 3000);
                //stageBounds = new Rectangle(0, 0, 6000, 4000);
                //stageBounds = new Rectangle(0, 0, 2000, 1500);
                //stageBounds = new Rectangle(0, 0, 1000, 750);
                //stageBounds = new Rectangle(0, 0, 2000, 1000);
                this.stageBounds = new CirnoGame.Rectangle(0, 0, 4000, 2000);
                this.TM = new CirnoGame.TileMap(this);
                this.TM.Seed = Bridge.Int.clip32(Math.random() * System.Int64([1410065407,2]));
                this.TM.position.Y = 0;
                var R = CirnoGame.Rectangle.op_Subtraction(this.stageBounds, this.TM.position);
                R.width -= this.TM.tilesize;
                R.height -= this.TM.tilesize;
                //TM.DrawRect(R);



                this.player.Position.Y = this.stageBounds.height / 3;
                this.player.Position.X = this.stageBounds.width / 2;

                this.EG = CirnoGame.Helper.GetContext(document.createElement("canvas"));
                //MapGenerator.Generate(this);
                /* MapGenerator.BoxyGenerate(this);            
                TM.DrawRect(R);
                //TM.testTexture();
                TM.ApplyBreakable();*/
                /* var E = new Entity(this);
                E.Ani = new Animation(AnimationLoader.Get("Images/land/brick"));
                E.y += 24;
                entities.Add(E);
                var ln = 10;
                var i = 0;
                while (i < ln)
                {
                   E = new Entity(this);
                   E.Ani = new Animation(AnimationLoader.Get("Images/land/brick"));
                   E.y += 24;
                   E.x += 16 * (i+1);
                   entities.Add(E);
                   i++;
                }
                i = 0;
                while (i < ln)
                {
                   E = new Entity(this);
                   E.Ani = new Animation(AnimationLoader.Get("Images/land/brick"));
                   E.y += 24;
                   E.x += 16 * -(i + 1);
                   entities.Add(E);
                   i++;
                }*/


                //entities.Add(test);
                this.AddEntity(this.Door);


                //spriteBuffer.Width = 200;
                this.spriteBuffer.width = CirnoGame.App.Canvas.width;
                this.spriteBuffer.height = Bridge.Int.clip32(this.spriteBuffer.width * CirnoGame.App.TargetAspect);
                /* camera.viewport_width = spriteBuffer.Width;
                camera.viewport_height = spriteBuffer.Height;*/
                this.camera = new CirnoGame.Camera(this.spriteBuffer.width, this.spriteBuffer.height);
                //camera.Scale = 6;
                //camera.Scale = 4;
                //camera.Scale = 3.5f;
                this.camera.Scale = 3.75;

                //camera.Scale = 1f;
                this.camera.StageBounds = this.stageBounds;
                this.camera.Update();
                this.camera.instawarp = true;
                /* spriteBuffer.Width = App.Canvas.Width;
                spriteBuffer.Height = App.Canvas.Height;*/
                this.spriteGraphics.imageSmoothingEnabled = false;

                /* PlaceAndAddEntity(new DoorKey(this));

                var i = 0;
                //while (i < 110)
                while (i < 24)
                {
                   PlaceAndAddEntity(new MRGhosty(this));
                   i++;
                }
                i = 0;
                while (i++ <= 6)
                   PlaceAndAddEntity(new Orb(this));
                i = 0;
                while (i++ <= 3)
                {
                   PlaceAndAddEntity(new Chest(this));
                   PlaceAndAddEntity(new KeyItem(this));
                }
                i = 0;
                while (i++ <= 2)
                {
                   PlaceAndAddEntity(new HealingItem(this));
                }*/
                this.StartNextLevel();


                this.TimerSprite = new CirnoGame.TextSprite();
                this.TimerSprite.FontSize = (Bridge.Int.div(this.spriteBuffer.height, 24)) | 0;
                this.TimerSprite.Text = "3:00";
                this.TimerSprite.TextColor = "#FFFFFF";
                this.TimerSprite.ShadowColor = "#000000";
                this.TimerSprite.ShadowOffset = new CirnoGame.Vector2(3, 3);
                this.TimerSprite.ShadowBlur = 1;

                this.TimerSprite.Position.X = this.spriteBuffer.width * 0.47;
                this.TimerSprite.Position.Y = (Bridge.Int.div(((-this.TimerSprite.FontSize) | 0), 8)) | 0;

                this.ScoreSprite = new CirnoGame.TextSprite();
                //ScoreSprite.FontSize = spriteBuffer.Height / 24;
                this.ScoreSprite.FontSize = (Bridge.Int.div(this.spriteBuffer.height, 28)) | 0;
                this.ScoreSprite.Text = "Level:1 Score:0";
                this.ScoreSprite.TextColor = "#FFFFFF";
                this.ScoreSprite.ShadowColor = "#000000";
                this.ScoreSprite.ShadowOffset = new CirnoGame.Vector2(3, 3);
                this.ScoreSprite.ShadowBlur = 1;

                //ScoreSprite.Position.X = spriteBuffer.Width * 0.7f;
                this.ScoreSprite.ForceUpdate();
                this.ScoreSprite.Position.X = (this.spriteBuffer.width * 0.98) - this.ScoreSprite.spriteBuffer.width;
                this.ScoreSprite.Position.Y = (Bridge.Int.div(((-this.ScoreSprite.FontSize) | 0), 8)) | 0;

                this.Key = CirnoGame.AnimationLoader.Get("images/items/key").getItem(0);
                this.BigKey = CirnoGame.AnimationLoader.Get("images/items/bigkey").getItem(0);

                this.TS = new CirnoGame.TitleScreen();
                this.TS.game = this;

                //PlayMusic("theme2");
                this.SetMusic();
            }
        },
        methods: {
            ClearEntities: function () {
                var L = this.entities.toArray();
                var i = 0;
                while (i < L.length) {
                    var E = L[System.Array.index(i, L)];
                    //if (!(E == player || E is ExitDoor))
                    if (E.RemovedOnLevelEnd) {
                        E.Alive = false;
                        this.RemoveEntity(E);
                    }
                    i = (i + 1) | 0;
                }
            },
            StartNextLevel: function () {
                this.ClearEntities();
                CirnoGame.RoomOpeningLever.TEST = null;
                this.level = (this.level + 1) | 0;
                var R = CirnoGame.Rectangle.op_Subtraction(this.stageBounds, this.TM.position);
                R.width -= this.TM.tilesize;
                R.height -= this.TM.tilesize;
                this.TM.Generate();
                CirnoGame.MapGenerator.BoxyGenerate(this);
                //TM.DrawRect(R);
                //TM.ApplyBreakable();


                //var ghosts = (int)(Math.Min(18 + level * 2, 28) * 0.85);
                var ghosts = Bridge.Int.clip32(Math.min(((18 + Bridge.Int.mul(this.level, 2)) | 0), 28) * 1.0);
                var i = 0;
                //while (i < 110)
                while (i < ghosts) {
                    //if (Math.Random() < 0.67)
                    if (Math.random() < 0.5) {
                        this.PlaceAndAddEnemy(new CirnoGame.MRGhosty(this));
                    } else {
                        var spike = Math.random() < 0.25;
                        var T = new CirnoGame.Turret(this);
                        this.PlaceAndAddEnemy(T);
                        T.SetDown(spike);
                        if (spike) {
                            var TD = T.TTD;
                            if (TD != null && this.TM.rows > ((TD.row + 1) | 0)) {
                                var TDD = this.TM.data.get([TD.column, ((TD.row + 1) | 0)]);
                                if (TDD.enabled && TDD.solid) {
                                    T.Alive = false;

                                    TD.texture = 7;
                                    TD.Breakable = false;
                                    TD.CanSlope = false;
                                    TD.opaque = false;
                                    TD.SteppedOn = Bridge.fn.bind(this, function (E) {
                                        var IC = E;
                                        if (IC.blockprice > 0 && IC.invincibilitytime <= 0) {
                                            IC.onDamaged(null, 1.5 + (this.level * 1.5));
                                            IC.PlaySound("damaged");
                                            if (IC.HP <= 0) {
                                                IC.onDeath(null);
                                            }
                                        }
                                    });
                                }
                            }
                        }
                    }
                    i = (i + 1) | 0;
                }
                i = 0;
                //while (i++ <= 6)
                while (Bridge.identity(i, (i = (i + 1) | 0)) <= 4) {
                    this.PlaceAndAddEntity(new CirnoGame.Orb(this));
                }
                i = 0;
                while (Bridge.identity(i, (i = (i + 1) | 0)) <= 3) {
                    this.PlaceAndAddEntity(new CirnoGame.Chest(this));
                    this.PlaceAndAddEntity(new CirnoGame.KeyItem(this));
                }
                i = 0;
                while (Bridge.identity(i, (i = (i + 1) | 0)) <= 1) {
                    this.PlaceAndAddEntity(new CirnoGame.HealingItem(this));
                }

                var key = new CirnoGame.DoorKey(this);
                var attempts = 0;

                this.PlaceAndAddEntity(key);
                while (Math.abs(key.x - this.player.x) < 70 && attempts < 5) { //attempt to prevent key from spawning too close
                    console.log("Door key is too close, repositioning key...");

                    key.Position.CopyFrom(CirnoGame.MapRoom.FindAnyEmptySpot());
                    attempts = (attempts + 1) | 0;
                }
                CirnoGame.MapGenerator.keyroom = CirnoGame.MapRoom.FindRoom(key.Position);
                /* PlaceAndAddEntity(new DoorKey(this));
                PlaceAndAddEntity(new DoorKey(this));
                PlaceAndAddEntity(new DoorKey(this));
                PlaceAndAddEntity(new DoorKey(this));*/

                this.player.invincibilitytime = 180;
                this.camera.instawarp = true;
                this.skiprender = true;
                if (this.playing) {
                    this.SetMusic();
                }
            },
            SetMusic: function () {
                if (!this.playing) {
                    this.PlayMusic("theme3");
                    return;
                }
                var songs = 3;
                var levelspersong = 5;
                var S = ((Bridge.Int.div(this.level, levelspersong)) | 0);
                S = S % songs;
                this.PlayMusic("theme" + (((S + 1) | 0)));
            },
            PlaceAndAddEntity: function (E) {
                E.Position.CopyFrom(CirnoGame.MapRoom.FindAnyEmptySpot());
                this.AddEntity(E);
            },
            PlaceAndAddEnemy: function (E) {
                E.Position.CopyFrom(CirnoGame.MapRoom.FindAnyEmptySpot());
                var attempts = 1;
                while (E.Position.EstimatedDistance(this.player.Position) < 128 && attempts < 5) {
                    console.log("Enemy spawned too close, repositioning enemy...");

                    E.Position.CopyFrom(CirnoGame.MapRoom.FindAnyEmptySpot());
                    attempts = (attempts + 1) | 0;
                }
                this.AddEntity(E);
                this.AddEntity(E);
            },
            Update: function () {
                CirnoGame.GameSprite.prototype.Update.call(this);
                this.Teams = this.GamePlaySettings.GameMode.Teams;
                //if (playing && KeyboardManager._this.TappedButtons.Contains(13))
                if (this.playing && CirnoGame.App.IC.getPressed(5) && !this.lastPauseButtonState) {
                    this.paused = !this.paused;
                }
                this.lastPauseButtonState = CirnoGame.App.IC.getPressed(5);
                if (this.playing && CirnoGame.KeyboardManager._this.TappedButtons.contains(77)) {
                    CirnoGame.AudioManager._this.StopAll();
                    this.muted = !this.muted;
                    if (!this.muted) {
                        this.SetMusic();
                    }
                    CirnoGame.KeyboardManager._this.TappedButtons.remove(77);
                }
                if (!this.paused) {
                    this.UpdateControls();

                    var i = 0;
                    while (i < this.entities.Count) {
                        var E = this.entities.getItem(i);
                        if (E.Alive) {
                            E.Update();
                        }
                        if (!E.Alive) {
                            this.RemoveEntity(E);
                            i = (i - 1) | 0;
                        }
                        i = (i + 1) | 0;
                    }
                    this.UpdateCollisions();
                    this.UpdateTime();
                    if (this.playing && this.player.y < 0) {
                        //player glitched out somehow make a new level.
                        this.LevelRestart();
                    }
                } else {
                    this.TimerSprite.Text = "Paused";
                }
            },
            LevelRestart: function () {
                this.level = (this.level - 1) | 0;
                this.StartNextLevel();
            },
            DoGameOver: function () {
                if (!this.playing) {
                    return;
                }
                if (this.entities.contains(this.player)) {
                    this.RemoveEntity(this.player);
                    //DoGameOver();
                }
                this.playing = false;
                this.StartNextLevel();

            },
            UpdateTime: function () {
                var $t;
                //timeRemaining -= 16.66667f;
                if (this.paused) {
                    this.TimerSprite.Text = "Paused";
                    return;
                }
                if (this.timeRemaining <= 0) {
                    this.timeRemaining = 0;
                    this.TimerSprite.Text = "0";
                    this.TimerSprite.TextColor = "#FF0000";
                    if (this.player.HP > 0) {
                        this.player.HP -= 0.006;
                    } else {
                        this.DoGameOver();
                    }
                    return;
                } else if (this.timeRemaining < this.baseLifeCost) {
                    this.TimerSprite.TextColor = "#FF0000";
                } else if (this.timeRemaining < this.lastStand) {
                    this.TimerSprite.TextColor = "#FFFF00";
                } else {
                    this.TimerSprite.TextColor = "#FFFFFF";
                }
                var totalseconds = this.timeRemaining / 1000.0;
                var totalminutes = totalseconds / 60;

                var minutes = Bridge.Int.clip32(Math.floor(totalminutes));
                var seconds = (totalseconds - (Bridge.Int.mul(minutes, 60)));

                var S = "";
                if (minutes > 0) {
                    S = "" + minutes + ":";
                }
                var prefix = "";
                if (seconds < 10) {
                    prefix = "0";
                    if (totalseconds < 10) {
                        prefix = " ";
                    }
                }
                S = System.String.concat(S, this.RestrictLength(System.String.concat(prefix, System.Single.format(Math.max(0, seconds))), 4));
                if (totalseconds >= 60) {
                    if (System.String.indexOf(S, ".") >= 0) {
                        S = ($t = S.split("."))[System.Array.index(0, $t)];
                    }
                }
                this.TimerSprite.Text = S;
            },
            RestrictLength: function (s, length) {
                if (s.length > length) {
                    return s.substr(0, length);
                }
                return s;
            },
            UpdateCollisions: function () {
                //List<Entity> combatants = new List<Entity>(System.Linq.Enumerable.Where<global::CirnoGame.Entity>(entities, (global::System.Func<global::CirnoGame.Entity, bool>)(entity => entity is ICombatant && entity.Ani.CurrentImage != null && ((ICombatant)entity).HP > 0)));
                //List<Entity> harmfulEntity = new List<Entity>(System.Linq.Enumerable.Where<global::CirnoGame.Entity>(entities, (global::System.Func<global::CirnoGame.Entity, bool>)(entity => entity is IHarmfulEntity && entity.Ani.CurrentImage != null)));
                var combatants = new (System.Collections.Generic.List$1(CirnoGame.Entity)).$ctor1(System.Linq.Enumerable.from(this.combatants).where(function (entity) {
                        return entity.Ani.CurrentImage != null && (entity).CirnoGame$ICombatant$HP > 0;
                    }));
                var harmfulEntity = new (System.Collections.Generic.List$1(CirnoGame.Entity)).$ctor1(System.Linq.Enumerable.from(this.harmful).where(function (entity) {
                        return entity.Ani.CurrentImage != null;
                    }));
                var R2 = new CirnoGame.Rectangle();
                var OR2 = new CirnoGame.Rectangle();
                var i = 0;
                var count = combatants.Count;
                var spd = new CirnoGame.Vector2();
                var spd2 = new CirnoGame.Vector2();
                while (i < count) {
                    var E = { v : combatants.getItem(i) };
                    //if (E is ICombatant)
                    {
                        var EI = { v : E.v };
                        var R = E.v.GetHitbox();
                        spd.CopyFrom(E.v.Speed);
                        spd.Multiply(0.5);
                        //Vector2 spd = E.Speed * 0.5f;
                        //spd.CopyFrom()
                        //Rectangle R2 = new Rectangle(R.x - (spd.X), R.y - (spd.Y), R.width, R.height);
                        R2.Set(R.x - (spd.X), R.y - (spd.Y), R.width, R.height);
                        //List<Entity> L = new List<Entity>(harmfulEntity.Where(entity => entity != E && entity.GetHitbox().isTouching(R)));
                        //List<Entity> L = new List<Entity>(harmfulEntity.Where(entity => entity != E && ((ICombatant)((IHarmfulEntity)entity).Attacker).Team != EI.Team));
                        //List<Entity> L = new List<Entity>(System.Linq.Enumerable.Where<global::CirnoGame.Entity>(harmfulEntity, (global::System.Func<global::CirnoGame.Entity, bool>)(entity => entity != E && !((IHarmfulEntity)entity).Attacker.SameTeam((Entity)EI))));
                        var L = new (System.Collections.Generic.List$1(CirnoGame.Entity)).$ctor1(System.Linq.Enumerable.from(harmfulEntity).where((function ($me, E, EI) {
                                return function (entity) {
                                    return !Bridge.referenceEquals(entity, E.v) && !(entity).CirnoGame$IHarmfulEntity$Attacker.SameTeam(EI.v);
                                };
                            })(this, E, EI)));
                        var j = 0;
                        var ln = L.Count;
                        while (j < ln) {
                            var tmp = L.getItem(j);
                            var HE = tmp;
                            var OR = tmp.GetHitbox();
                            //Vector2 spd2 = tmp.Speed * 0.5f;
                            spd2.CopyFrom(tmp.Speed);
                            spd2.Multiply(0.5);
                            //Rectangle OR2 = new Rectangle(OR.x - (spd2.X), OR.y - (spd2.Y), OR.width, OR.height);
                            OR2.Set(OR.x - (spd2.X), OR.y - (spd2.Y), OR.width, OR.height);
                            //if (EI.Team != ((ICombatant)HE.Attacker).Team)
                            if ((R.isTouching(OR) || R2.isTouching(OR2))) {
                                if (HE.CirnoGame$IHarmfulEntity$ontouchDamage(EI.v)) {
                                    var LHP = EI.v.CirnoGame$ICombatant$HP;
                                    EI.v.CirnoGame$ICombatant$onDamaged(HE, HE.CirnoGame$IHarmfulEntity$touchDamage);
                                    var damaged = LHP > EI.v.CirnoGame$ICombatant$HP;

                                    if (damaged) {
                                        if (Bridge.referenceEquals(EI.v, this.player)) {
                                            EI.v.PlaySound("damaged");
                                        } else {
                                            EI.v.PlaySound("hit");
                                        }
                                    }

                                    if (EI.v.CirnoGame$ICombatant$HP <= 0) {
                                        if (EI.v.HandledLocally) {
                                            var D = { };
                                            D.I = EI.v.ID;
                                            D.A = HE.CirnoGame$IHarmfulEntity$Attacker.ID;
                                            D.S = HE.ID;
                                            this.SendEvent("Kill", D);
                                        }
                                        /* if (damaged)
                                        {
                                           EI.As<Entity>().PlaySound("kill");
                                        }*/
                                    } else {
                                        /* if (damaged)
                                        {
                                           EI.As<Entity>().PlaySound("hit");
                                        }*/
                                    }
                                }
                                this.Attack(EI.v, HE);
                            }
                            j = (j + 1) | 0;
                        }
                        /* List<Entity> L = new List<Entity>(combatants.Where(entity => entity != E && entity is ICombatant && entity.GetHitbox().intersects(R)));
                        int j = 0;
                        while (j < L.Count)
                        {

                           j++;
                        }*/
                    }
                    i = (i + 1) | 0;
                }
            },
            Attack: function (target, source) {
                if (target.CirnoGame$ICombatant$HP > 0 && source.CirnoGame$IHarmfulEntity$ontouchDamage(target)) {
                    target.CirnoGame$ICombatant$onDamaged(source, source.CirnoGame$IHarmfulEntity$touchDamage);
                    //((Entity)target).PlaySound("hit");
                    if (target.CirnoGame$ICombatant$HP <= 0) {
                        if (Bridge.cast(target, CirnoGame.Entity).HandledLocally) {
                            var D = { };
                            D.I = Bridge.cast(target, CirnoGame.Entity).ID;
                            D.A = source.CirnoGame$IHarmfulEntity$Attacker.ID;
                            D.S = Bridge.cast(source, CirnoGame.Entity).ID;
                            this.SendEvent("Kill", D);
                        }
                    }
                }
            },
            PlaySoundEffect: function (source, sound) {
                if (this.muted) {
                    return;
                }
                var vol = 1.0;
                /* float min = 640;
                float maxLength = 320;*/
                //float min = 700;
                var min = 50;
                var maxLength = 200;
                if (CirnoGame.Vector2.op_Inequality(source, null)) {
                    //float dist = (camera.Center - source).RoughLength;
                    //float dist = (camera.Center - source).Length;
                    var dist = this.camera.Center.EstimatedDistance(source);
                    dist -= min;
                    if (dist > 0) {
                        if (dist >= maxLength) {
                            //volume of 0, just don't play it.
                            return;
                        } else {
                            vol = 1.0 - (dist / maxLength);
                        }
                    }
                }
                CirnoGame.AudioManager._this.Blast(System.String.concat("SFX/", sound, ".ogg"), vol);
            },
            AddEntity: function (E) {
                this.entities.add(E);
                if (Bridge.is(E, CirnoGame.ICombatant)) {
                    this.combatants.add(E);
                }
                if (Bridge.is(E, CirnoGame.IHarmfulEntity)) {
                    this.harmful.add(E);
                }
            },
            RemoveEntity: function (E) {
                E.onRemove();
                this.entities.remove(E);
                if (Bridge.is(E, CirnoGame.ICombatant)) {
                    this.combatants.remove(E);
                }
                if (Bridge.is(E, CirnoGame.IHarmfulEntity)) {
                    this.harmful.remove(E);
                }
            },
            Render: function () {
                CirnoGame.GameSprite.prototype.Render.call(this);

                var g = this.spriteGraphics;
                if (this.skiprender) {
                    g = this.EG;
                    this.skiprender = false;
                }
                this.UpdateCamera();
                this.DrawBackground(g);

                g.save();

                this.camera.Apply(g);
                //TM.position.Y = -200;
                this.TM.Draw(g);
                this.entities.forEach(function (E) {
                    if (E.Alive && E.Visible) {
                        E.Draw(g);
                    }
                });

                g.restore();

                if (this.playing) {
                    this.RenderGUI(g);
                } else {
                    g.globalAlpha = 0.3;
                    g.fillStyle = "#000000";
                    g.fillRect(0, 0, this.spriteBuffer.width, this.spriteBuffer.height);
                    g.globalAlpha = 1.0;
                    this.TS.Draw(g);
                    if (this.player.score > 0) {
                        this.ScoreSprite.Text = "Level:" + this.level + " Score:" + this.player.score;
                        this.ScoreSprite.ForceUpdate();
                        this.ScoreSprite.Position.X = (this.spriteBuffer.width * 0.98) - this.ScoreSprite.spriteBuffer.width;
                        this.ScoreSprite.Draw(g);
                    }
                }

            },
            Start: function () {
                if (this.entities.contains(this.player)) {
                    this.RemoveEntity(this.player);
                }
                this.player = new CirnoGame.PlayerCharacter(this);
                this.AddEntity(this.player);
                this.playing = true;
                this.level = 0;
                this.StartNextLevel();
                CirnoGame.App.Div.style.cursor = null;

                this.totalTime = 0;
                this.timeRemaining = this.defaultTimeRemaining;
                //timeRemaining *= 0.3334f * 0.25f;
                /* timeRemaining *= 0.3334f * 0.05f;
                player.HP = 5;*/
            },
            PlayMusic: function (song) {
                if (this.muted) {
                    return;
                }
                var M = CirnoGame.AudioManager._this.Get(System.String.concat("BGM/", song, ".ogg"));
                if (!M.IsPlaying) {
                    CirnoGame.AudioManager._this.StopAllFromDirectory("BGM/");
                    //M.Volume = 0.35;
                    M.Volume = 0.35;
                    M.Loop = true;
                    M.Play();
                }
            },
            RenderGUI: function (g) {
                var PC = this.player;
                var color = "#00DD00";
                if (this.timeRemaining < this.baseLifeCost) {
                    if (this.timeRemaining <= 0) {
                        color = "#CC0088";
                    } else {
                        color = "#FF0000";
                    }
                }

                g.globalAlpha = 0.8;
                this.DrawGauge(g, new CirnoGame.Vector2(0, 0), new CirnoGame.Vector2(((Bridge.Int.div(this.spriteBuffer.width, 4)) | 0), ((Bridge.Int.div(this.spriteBuffer.height, 20)) | 0)), 5, PC.HP / PC.maxHP, color);
                g.globalAlpha = 1;

                this.TimerSprite.Draw(g);
                this.ScoreSprite.Text = "Level:" + this.level + " Score:" + this.player.score;
                this.ScoreSprite.ForceUpdate();
                this.ScoreSprite.Position.X = (this.spriteBuffer.width * 0.98) - this.ScoreSprite.spriteBuffer.width;
                this.ScoreSprite.Draw(g);
                this.RenderIcons(g);
            },
            RenderIcons: function (g) {
                var R = (Bridge.Int.div(this.Key.height, this.Key.width)) | 0;
                var W = this.spriteBuffer.width * 0.02;
                var H = this.spriteBuffer.height * 0.055;

                var Y = H;
                var X = W / 2;
                var i = 0;

                //var sz = spriteBuffer.Width * 0.015f;
                var sz = this.spriteBuffer.width * 0.0115;
                g.globalAlpha = 0.8;
                if (this.Door.Opened) {
                    var DA = this.BigKey;
                    //var Dsz = spriteBuffer.Width * 0.018f;
                    var Dsz = sz * 1.5;
                    var DR = (Bridge.Int.div(DA.height, DA.width)) | 0;

                    g.drawImage(DA, X, Y, Dsz, Dsz * R);
                    X += W;
                }
                while (i < this.player.keys) {
                    g.drawImage(this.Key, X, Y, sz, sz * R);
                    X += W;
                    i = (i + 1) | 0;
                }
                g.globalAlpha = 1.0;
            },
            DrawGauge: function (g, position, size, border, progress, color, drawborder) {
                if (drawborder === void 0) { drawborder = true; }
                var alpha = g.globalAlpha;
                if (drawborder) {
                    g.globalAlpha = 0.6 * alpha;
                    g.fillStyle = "#000000";

                    g.fillRect(position.X, position.Y, size.X, size.Y);
                }

                g.fillStyle = color;
                g.globalAlpha = 1.0 * alpha;
                g.fillRect(((Bridge.Int.clip32(position.X) + border) | 0), ((Bridge.Int.clip32(position.Y) + border) | 0), (size.X - (((border + border) | 0))) * progress, ((Bridge.Int.clip32(size.Y) - (((border + border) | 0))) | 0));

                g.globalAlpha = 0.5 * alpha;
                //Script.Write("var grd = g.createLinearGradient(0, 0, 0, size.y);grd.addColorStop(0, color);grd.addColorStop(0.4, \"white\");grd.addColorStop(1, color);g.fillStyle = grd;");
                var grd = g.createLinearGradient(0, 0, 0, size.Y);
                grd.addColorStop(0, color);
                grd.addColorStop(0.4, "white");
                grd.addColorStop(1, color);
                g.fillStyle = grd;


                g.fillRect(((Bridge.Int.clip32(position.X) + border) | 0), ((Bridge.Int.clip32(position.Y) + border) | 0), (size.X - (((border + border) | 0))) * progress, ((Bridge.Int.clip32(size.Y) - (((border + border) | 0))) | 0));
                g.globalAlpha = alpha;
            },
            SendEvent: function (eventName, data, triggerflush) {
                if (triggerflush === void 0) { triggerflush = false; }
                var D = { };
                D.E = eventName;
                D.D = data;
                /* NetPlayUser NU = null;
                if (Online)
                {
                   NP.Send(D);
                   NU = NP.Me;
                }*/
                //ProcessEvent(D, NU, 0);
                this.ProcessEvent(D);
                /* if (triggerflush)
                {
                   NetPlayNeedsFlush = true;
                }*/
            },
            ProcessEvent: function (msg, user, latency) {
                if (user === void 0) { user = null; }
                if (latency === void 0) { latency = 0.0; }
                var D = msg.D;
                /* List<Player> LP = new List<Player>(players.Where(player => user != null && player.NetworkID == user.userID));
                Player P = null;

                bool hascharacter = true;
                if (LP.Count <= 0)
                {
                   if (P == null && user == null && !Online)
                   {
                       P = localplayer;
                   }
                   else
                   {
                       if (user.IsMe)
                       {
                           localplayer.NetworkID = user.userID;
                           P = localplayer;
                       }
                       else
                       {
                           hascharacter = false;
                       }
                   }
                }
                else
                {
                   P = LP[0];
                }*/
                var evt = msg.E;
                /* if (user != null && !user.IsMe)
                {
                   Dlatency += latency;
                   //latency *= 0.99f;
                   Dlatency *= (1 - (1 / latencyM));
                }
                //if (msg.E == "Init" && !P.local)
                if (evt == "Init" && P == null)
                {
                   if (!hascharacter)
                   {
                       P = new Player(false, false);
                       P.NetworkID = user.userID;
                       //PlayerCharacter PC = new PlayerCharacter(this, P, "Reisen");
                       PlayerCharacter PC = new PlayerCharacter(this, P, D.C);
                       //PC.Team = 1;
                       PC.Team = D.T;
                       PC.x = 700;
                       PC.y = 240;
                       PC.ID = D.I;
                       players.Add(P);
                       AddEntity(PC);
                       if (Hoster)
                       {
                           SendEvent("MapSeed", TM.Seed);

                           List<Entity> L = new List<Entity>(entities.Where(E => E is MadnessOrb || (E is PlayerCharacter && ((PlayerCharacter)E).player.CPU)));
                           int i = 0;
                           while (i < L.Count)
                           {
                               SendEntitySpawnCheck(L[i]);
                               i++;
                           }
                       }
                       Console.WriteLine("User:" + P.NetworkID + " has joined!");
                   }
                }
                if (evt == "Spawn")
                {
                   Entity E = EntityFromID(D.I);
                   if (E == null)
                   {
                       Type T = Helper.GetType(D.T);
                       E = Activator.CreateInstance(T, this).ToDynamic();
                       E.ID = D.I;
                       E.x = D.X;
                       E.y = D.Y;

                       if (D.D)
                       {
                           Helper.CopyFields(D.D, E);
                       }
                       AddEntity(E);
                       CatchupEntity(E, latency);
                       //Activator.CreateInstance()
                       //System.Reflection.
                       //Type T = Type.GetType("");
                   }
                }
                if (evt == "Unpause")
                {
                   paused = false;
                   Console.WriteLine("Game unpaused");
                   SendInit();
                }
                if (evt == "MapSeed" && !Hoster)
                {
                   if (TM.Seed != D)
                   {
                       TM.Seed = D;
                       TM.Generate();
                       //clean up local client entities.
                       if (!connected)
                       {
                           int i = 0;
                           while (i < entities.Count)
                           {
                               if (entities[i] is MadnessOrb || (entities[i] is PlayerCharacter && ((PlayerCharacter)entities[i]).player.CPU))
                               {
                                   RemoveEntity(entities[i]);
                                   i--;
                               }
                               i++;
                           }
                           connected = true;
                       }
                   }

                }
                if (evt == "CE")
                {
                   Entity entity = EntityFromID(D.I);
                   if (entity != null)
                   {
                       entity.CustomEvent(D.D);
                   }
                }
                if (evt == "CBE")
                {
                   Entity entity = EntityFromID(D.I);
                   if (entity != null)
                   {
                       EntityBehavior b = entity.GetBehaviorFromName(D.T);
                       b.CustomEvent(D.D);
                       //entity.CustomEvent(D.D);
                   }
                }*/
                if (Bridge.referenceEquals(evt, "Kill")) {
                    var entity = this.EntityFromID(D.I);
                    if (entity != null) {
                        var attacker = this.EntityFromID(D.A);
                        Bridge.cast(entity, CirnoGame.ICombatant).CirnoGame$ICombatant$onDeath(this.EntityFromID(D.S));
                        if (attacker != null && Bridge.is(attacker, CirnoGame.PlayerCharacter)) {
                            var PC = Bridge.cast(attacker, CirnoGame.PlayerCharacter);
                            //PC.player.Score += ((ICombatant)entity).PointsForKilling;
                            PC.score = (PC.score + Bridge.cast(entity, CirnoGame.ICombatant).CirnoGame$ICombatant$PointsForKilling) | 0;
                            PC.onKill(Bridge.cast(entity, CirnoGame.ICombatant));
                        }
                    }
                }
            },
            EntityFromID: function (ID) {
                var i = 0;
                while (i < this.entities.Count) {
                    var E = this.entities.getItem(i);
                    if (Bridge.referenceEquals(E.ID, ID)) {
                        return E;
                    }
                    i = (i + 1) | 0;
                }
                return null;
            },
            UpdateCamera: function () {
                var $t, $t1;
                //float D = test.Hspeed * 18;
                //float D = (float)Math.Abs(test.Hspeed) * 9;
                //var freecam = true;
                this.camera.speedmod = 1.0;

                /* if (KeyboardManager._this.TappedButtons.ContainsB(67) && App.DEBUG)
                {
                   freecam = !freecam;
                }*/
                if (this.freecam) {
                    var spd = 16 / this.camera.Scale;
                    var PB = CirnoGame.KeyboardManager._this.PressedButtons;
                    //numpad panning
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(100, System.Int32))) {
                        this.camera.TargetPosition.X -= spd;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(102, System.Int32))) {
                        this.camera.TargetPosition.X += spd;
                    }

                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(104, System.Int32))) {
                        this.camera.TargetPosition.Y -= spd;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(98, System.Int32))) {
                        this.camera.TargetPosition.Y += spd;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(107, System.Int32))) {
                        var CC = this.camera.Center;
                        this.camera.Scale *= 1.01;
                        this.camera.Center = CC;
                        this.camera.TargetPosition.X = this.camera.Position.X;
                        this.camera.TargetPosition.Y = this.camera.Position.Y;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(109, System.Int32))) {
                        var CC1 = this.camera.Center;
                        this.camera.Scale *= 0.99;
                        this.camera.Center = CC1;
                        this.camera.TargetPosition.X = this.camera.Position.X;
                        this.camera.TargetPosition.Y = this.camera.Position.Y;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(36, System.Int32))) {
                        this.camera.CenteredTargetPosition = this.player.Position;
                    }
                    if (CirnoGame.HelperExtensions.ContainsB$1(System.Int32, PB, Bridge.box(13, System.Int32))) {
                        this.player.Position.X = this.camera.Center.X;
                        this.player.Position.Y = this.camera.Center.Y;
                    }
                    this.camera.Update();
                    return;
                }
                if (!this.playing) {
                    this.camera.speedmod = 0.05;
                    if (CirnoGame.Vector2.op_Equality(this.camera.TargetPosition, null) || this.camera.Position.EstimatedDistance(this.camera.TargetPosition) < 40) {
                        if (Math.random() < 0.0035 || this.camera.instawarp) {
                            this.camera.CenteredTargetPosition = CirnoGame.MapRoom.FindAnyEmptySpot();
                        }
                    }
                    /* camera.TargetPosition = null;
                    if (cameraWanderPoint == null)
                    {
                       cameraWanderPoint = MapRoom.FindAnyEmptySpot();
                    }*/
                    this.camera.Update();
                    return;
                }

                if (this.freecam) {
                    if (CirnoGame.KeyboardManager._this.PressedButtons.contains(101) || CirnoGame.KeyboardManager._this.PressedButtons.contains(111)) {
                        var TEST = CirnoGame.RoomOpeningLever.TEST;
                        if (CirnoGame.KeyboardManager._this.PressedButtons.contains(106) && !TEST.Activated) {
                            TEST.Activate();
                        }
                        if (TEST != null) {
                            if (!TEST.Activated && !CirnoGame.KeyboardManager._this.PressedButtons.contains(111)) {
                                this.camera.CenteredTargetPosition = TEST.Position;
                            } else {
                                var T = this.TM.GetTile(TEST.Room.SX, TEST.Room.SY);
                                var HB = T.GetHitbox();
                                this.camera.CenteredTargetPosition = new CirnoGame.Vector2(HB.left, HB.top);
                            }
                            if (CirnoGame.KeyboardManager._this.TappedButtons.contains(32)) {
                                this.player.Position.X = this.camera.Center.X;
                                this.player.Position.Y = this.camera.Center.Y;
                            }
                            this.camera.Update();
                            return;
                        } else {
                            this.player.MSG.ChangeText("No lever on map");
                        }
                    }
                }
                if (this.player.HP < 0) {
                    return;
                }
                var D = this.player.Hspeed * 32;
                var lookAheadRate = 0.3;
                var H = this.camera.CameraBounds.width / 8;
                D += !this.player.Ani.Flipped ? H : -H;
                var C = CirnoGame.App.Canvas;
                var IS = this.camera.InvScale;
                var V = Math.max(0, this.player.Vspeed * 30);
                if (($t = this.player.Controller)[System.Array.index(2, $t)]) {
                    //V -= camera.CameraBounds.height / 4;
                    V -= this.camera.CameraBounds.height / 3;
                } else if (($t1 = this.player.Controller)[System.Array.index(3, $t1)]) {
                    //V += camera.CameraBounds.height / 4;
                    V += this.camera.CameraBounds.height / 3;
                } else if (this.player.onGround) {
                    //V -= camera.CameraBounds.height / 8;
                    V -= this.camera.CameraBounds.height / 10;
                } else {
                    V += this.camera.CameraBounds.height / 12;
                }

                var TP = this.camera.TargetPosition;
                /* TP.X = (test.x + D) - ((C.Width / 2) * IS);
                TP.Y = (float)Math.Max(0, (test.y + V) - ((C.Height / 2) * IS));*/
                /* TP.X = test.x;
                TP.Y = test.y;*/
                var X = this.player.x + (this.player.Width / 2) + (D * lookAheadRate);
                var Y = this.player.y + (this.player.Height / 2) + (V * lookAheadRate);
                this.camera.CenteredTargetPosition = new CirnoGame.Vector2(X, Y);
                this.camera.Update();
            },
            DrawBackground: function (g) {
                g.fillStyle = "#77AAFF";
                g.fillRect(0, 0, CirnoGame.App.Canvas.width, CirnoGame.App.Canvas.height);
                /* if (BG < 0 || BG >= BGs.Count)
                {
                   g.FillStyle = "#77AAFF";
                   g.FillRect(0, 0, App.Canvas.Width, App.Canvas.Height);
                }
                else
                {
                   g.DrawImage(BGs[BG], (float)0, (float)0);
                }*/
            },
            UpdateControls: function () {

                var PC = this.player;
                var threshhold = 0.7;
                var C = PC.Controller;
                var IC = CirnoGame.App.IC;

                if (IC == null) {
                    return;
                }
                var x = IC.getState(0);
                var y = IC.getState(1);
                C[System.Array.index(0, C)] = x <= -threshhold;
                C[System.Array.index(1, C)] = x >= threshhold;
                C[System.Array.index(2, C)] = y <= -threshhold;
                C[System.Array.index(3, C)] = y >= threshhold;

                var cid = IC.getMapControllerID$1(5);
                if (Bridge.referenceEquals(cid, "Keyboard") || Bridge.referenceEquals(cid, "Mouse")) {
                    /* C[4] = KeyboardManager._this.PressedMouseButtons.Contains(0);
                    C[5] = KeyboardManager._this.PressedMouseButtons.Contains(2);*/
                    C[System.Array.index(4, C)] = IC.getPressed(2);
                    C[System.Array.index(5, C)] = IC.getPressed(3);
                    C[System.Array.index(6, C)] = IC.getPressed(4);
                } else {
                    /* GamePad P = GamePadManager._this.GetPad(IC.id);
                    PC.aimAngle = new Vector2((float)P.axes[2], (float)P.axes[3]).ToAngle();*/
                    var aim = new CirnoGame.Vector2(IC.getState(4), IC.getState(5));
                    if (aim.RoughLength > 0.5) {
                    }


                }
                C[System.Array.index(4, C)] = IC.getPressed(2);
                C[System.Array.index(5, C)] = IC.getPressed(3);
                C[System.Array.index(6, C)] = IC.getPressed(4);
                /* C[4] = IC.getPressed(3);
                C[5] = IC.getPressed(4);*/

                var o = { };
            }
        }
    });

    Bridge.define("CirnoGame.HealingItem", {
        inherits: [CirnoGame.CollectableItem],
        fields: {
            healingPower: 0
        },
        ctors: {
            init: function () {
                this.healingPower = 1.5;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.CollectableItem.ctor.call(this, game, "heart");
                this.floats = false;
                this.magnetDistance = 20;
                this.sound = "ok";
            }
        },
        methods: {
            CanCollect: function (player) {
                return player.HP < player.maxHP;
            },
            onCollected: function (player) {
                player.HP = Math.min(player.HP + this.healingPower, player.maxHP);
            }
        }
    });

    Bridge.define("CirnoGame.KeyItem", {
        inherits: [CirnoGame.CollectableItem],
        ctors: {
            ctor: function (game) {
                this.$initialize();
                CirnoGame.CollectableItem.ctor.call(this, game, "key");
                this.floats = false;
                this.magnetDistance = 20;
            }
        },
        methods: {
            CanCollect: function (player) {
                return player.keys < 5;
            },
            onCollected: function (player) {
                player.keys = (player.keys + 1) | 0;
            }
        }
    });

    Bridge.define("CirnoGame.PlatformerEntity", {
        inherits: [CirnoGame.ControllableEntity],
        fields: {
            friction: 0,
            onGround: false,
            GravityEnabled: false,
            gravity: 0,
            maxFallSpeed: 0,
            feetposition: 0,
            headposition: 0,
            Floor: null,
            Ceiling: null,
            LeftWall: null,
            RightWall: null
        },
        ctors: {
            init: function () {
                this.friction = 0.5;
                this.GravityEnabled = true;
                this.gravity = 0.02;
                this.maxFallSpeed = 2.0;
                this.feetposition = 23;
                this.headposition = 7;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.ControllableEntity.ctor.call(this, game);

            }
        },
        methods: {
            Update: function () {
                CirnoGame.ControllableEntity.prototype.Update.call(this);
                if (this.GravityEnabled) {
                    if (this.Vspeed < this.maxFallSpeed && this.GravityEnabled) {
                        this.Vspeed = Math.min(this.Vspeed + this.gravity, this.maxFallSpeed);
                    }
                }
                /* if (y > 0 && Vspeed>=0)
                {
                   y = 0;
                   Vspeed = 0;
                   onGround = true;
                }
                if (y < 0)
                {
                   onGround = false;
                }*/
                this.ApplyFriction();
                this.UpdateTerrainCollision();

                this.onGround = (this.Floor != null && this.Vspeed >= 0);

                if (this.onGround) {
                    var Y = this.Floor.GetTop(this.getCenter()) - this.feetposition;
                    /* if (y < Y)
                    {
                       onGround = false;
                       Floor = null;
                    }
                    else*/
                    {
                        //y = ((Floor.row * Game.TM.tilesize) + Game.TM.position.Y) - feetposition;
                        this.y = Y;
                        this.Vspeed = 0;
                        this.onGround = true;
                    }
                }
                if (this.Ceiling != null && this.Vspeed < 0) {
                    this.Vspeed = 0;
                    this.y = ((this.Ceiling.row * this.Game.TM.tilesize) + this.Game.TM.position.Y) + this.Game.TM.tilesize - this.headposition;
                }
                if (this.LeftWall != null) {
                    this.Hspeed = Math.max(0, this.Hspeed);
                }
                if (this.RightWall != null) {
                    this.Hspeed = Math.min(0, this.Hspeed);
                }
            },
            ApplyFriction: function () {
                this.Hspeed = CirnoGame.MathHelper.Decelerate(this.Hspeed, this.friction);
                if (!this.GravityEnabled) {
                    this.Vspeed = CirnoGame.MathHelper.Decelerate(this.Vspeed, this.friction);
                }
            },
            GetFloor: function () {
                var T = null;
                var W = this.Width / 3;
                var Y = this.Height;
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width - W, Y));
                }
                if (!(T != null && T.enabled && T.topSolid)) {
                    T = null;
                }
                return T;
            },
            GetCeiling: function () {
                var T = null;
                var W = this.Width / 3;
                //float Y = 16;
                var Y = 0 + this.headposition;
                if (!(T != null && T.enabled && T.bottomSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, W, Y));
                }
                if (!(T != null && T.enabled && T.bottomSolid)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width - W, Y));
                }
                if (!(T != null && T.enabled && T.bottomSolid)) {
                    T = null;
                }
                return T;
            },
            CheckWall: function (X) {
                var T = null;
                /* if (!(T != null && T.enabled && ((T.leftSolid && X > 0) || (T.rightSolid && X < 0))))
                {
                   T = Game.TM.CheckForTile(Position + new Vector2(X, (Height / 2)-2));
                }
                if (!(T != null && T.enabled && ((T.leftSolid && X > 0) || (T.rightSolid && X < 0))))
                {
                   T = Game.TM.CheckForTile(Position + new Vector2(X, Height-2));
                   if (T != null && T.IsSlope)
                   {
                       T = null;
                   }
                }
                if (!(T != null && T.enabled && ((T.leftSolid && X > 0) || (T.rightSolid && X < 0))))
                {
                   T = null;
                }*/
                if (!this.IsTileObstacle(T, X)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, X, (this.Height / 2) - 2));
                }
                if (!this.IsTileObstacle(T, X)) {
                    T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, X, this.Height - 2));
                }
                if (!this.IsTileObstacle(T, X)) {
                    T = null;
                }
                return T;
            },
            IsTileObstacle: function (T, X) {
                if (T != null && T.enabled && ((T.leftSolid && X > 0) || (T.rightSolid && X < 0)) && (this.Floor == null || T.row < this.Floor.row)) {
                    var Y = this.y + this.Height;
                    //if (T.GetHitbox().y < Y-28)
                    //if (T.GetHitbox().y < Y - 8)
                    //if (T.GetHitbox().y < Y - 4)
                    if (T.GetHitbox().y < Y - 0) {
                        return !T.IsSlope;
                    }
                }
                return false;
            },
            UpdateTerrainCollision: function () {
                this.Floor = this.GetFloor();
                this.Ceiling = this.GetCeiling();
                if (this.Floor != null && this.Floor.SteppedOn) {
                    this.Floor.SteppedOn(this);
                }


                if (this.Vspeed < this.maxFallSpeed && this.GravityEnabled) {
                    this.Vspeed = Math.min(this.Vspeed + this.gravity, this.maxFallSpeed);
                }
                var stuck = false;
                if (this.Floor != null) {
                    var c = true;
                    while (c) {
                        var T = this.Floor.GetTileData(0, -1);
                        if (T != null && T.enabled && T.solid) {
                            this.Floor = T;
                            stuck = true;
                        } else {
                            c = false;
                        }
                    }
                }
                stuck = false;
                this.onGround = false;
                if (this.Floor != null && this.Vspeed >= 0) {
                    //float Y = Floor.GetHitbox().top - Height;
                    var Y = this.Floor.GetTop(this.getCenter()) - this.Height;
                    //if (!Floor.platform || y <= Y + Vspeed)
                    //if (!Floor.platform || y+Vspeed>=Y)
                    if ((!this.Floor.platform || this.y <= Y + this.Vspeed) && this.y + (this.Vspeed + 10) >= Y) {
                        if (this.Vspeed > 0) {
                            this.Vspeed = 0;
                            this.onGround = true;
                        }
                        this.y = Y;
                    }
                }
                if (this.Hspeed !== 0) {
                    var wall = this.Hspeed > 0 ? this.RightWall : this.LeftWall;
                    if (wall != null) {
                        this.Hspeed = 0;
                    }
                }
                var W = this.Width / 3;
                var X = Math.abs(this.Hspeed);
                if (this.Hspeed < 0) {
                    X -= 2 - W;
                } else {
                    X += (this.Width - W) + 2;
                }
                this.RightWall = this.CheckWall(X);

                X = -Math.abs(this.Hspeed);
                if (this.Hspeed < 0) {
                    X -= 2 - W;
                } else {
                    X += (this.Width - W) + 2;
                }
                this.LeftWall = this.CheckWall(X);
                if (this.LeftWall != null && Bridge.referenceEquals(this.LeftWall, this.RightWall)) {
                    var R = this.LeftWall.GetHitbox();
                    var V = R.Center;
                    if ((CirnoGame.Vector2.op_Subtraction(V, this.Position)).X > 0) {
                        this.x += 1;
                        if (this.Hspeed < 0) {
                            this.Hspeed = 0;
                        }
                    } else {
                        this.x -= 1;
                        if (this.Hspeed > 0) {
                            this.Hspeed = 0;
                        }
                    }
                }
                if (stuck) {
                    this.UpdateTerrainCollision();
                }
            }
        }
    });

    Bridge.define("CirnoGame.Orb", {
        inherits: [CirnoGame.CollectableItem],
        ctors: {
            ctor: function (game) {
                this.$initialize();
                CirnoGame.CollectableItem.ctor.call(this, game, "orb");
                //Ani = new Animation(AnimationLoader.Get("images/misc/orb"));
                this.magnetDistance = 55;
            }
        },
        methods: {
            onCollected: function (player) {
                //throw new NotImplementedException();
                var time = (1000) * (13 - Math.min(this.Game.level - 0.15, 7));
                if (this.Game.timeRemaining > 0) {
                    this.Game.timeRemaining += time;
                    this.Game.timeRemaining = Math.min(this.Game.defaultTimeRemaining, this.Game.timeRemaining);
                } else {
                    this.Game.timeRemaining += time;
                }
            }
        }
    });

    Bridge.define("CirnoGame.PointItem", {
        inherits: [CirnoGame.CollectableItem],
        ctors: {
            ctor: function (game) {
                this.$initialize();
                CirnoGame.CollectableItem.ctor.call(this, game, "point");
                this.floats = false;
                //magnetDistance = 100;
                this.magnetDistance = 70;
                this.magnetSpeed *= 8;
            }
        },
        methods: {
            onCollected: function (player) {
                player.score = (player.score + 5) | 0;
            }
        }
    });

    Bridge.define("CirnoGame.MRGhosty", {
        inherits: [CirnoGame.PlatformerEntity,CirnoGame.ICombatant,CirnoGame.IHarmfulEntity],
        fields: {
            animation: null,
            attackpower: 0,
            defensepower: 0
        },
        props: {
            Team: 0,
            HP: 0,
            PointsForKilling: {
                get: function () {
                    return 1;
                }
            },
            TargetPriority: {
                get: function () {
                    return 0.5;
                }
            },
            IsHarmful: {
                get: function () {
                    return true;
                }
            },
            Attacker: {
                get: function () {
                    return this;
                }
            },
            touchDamage: {
                get: function () {
                    return this.attackpower * 1.5;
                }
            }
        },
        alias: [
            "Team", "CirnoGame$ICombatant$Team",
            "HP", "CirnoGame$ICombatant$HP",
            "PointsForKilling", "CirnoGame$ICombatant$PointsForKilling",
            "TargetPriority", "CirnoGame$ICombatant$TargetPriority",
            "IsHarmful", "CirnoGame$IHarmfulEntity$IsHarmful",
            "Attacker", "CirnoGame$IHarmfulEntity$Attacker",
            "touchDamage", "CirnoGame$IHarmfulEntity$touchDamage",
            "onDamaged", "CirnoGame$ICombatant$onDamaged",
            "onDeath", "CirnoGame$ICombatant$onDeath",
            "onKill", "CirnoGame$ICombatant$onKill",
            "ontouchDamage", "CirnoGame$IHarmfulEntity$ontouchDamage"
        ],
        ctors: {
            init: function () {
                this.animation = "???";
                this.attackpower = 1;
                this.defensepower = 1;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.PlatformerEntity.ctor.call(this, game);
                this.ChangeAni("");
                this.AddBehavior$1(new CirnoGame.FlightControls(this));
                this.AddBehavior$1(new CirnoGame.RandomAI(this));
                this.attackpower = 1 + (this.Game.level * 0.5);
                this.defensepower = 1 + (this.Game.level * 0.5);
                if (this.Game.playing) {
                    this.AddBehavior(CirnoGame.AimedShooter);
                    this.GetBehavior(CirnoGame.AimedShooter).attackpower = this.attackpower;
                    this.GetBehavior(CirnoGame.AimedShooter).maxtime = Math.max(((480 - (Bridge.Int.mul(this.Game.level, 10))) | 0), 380);
                }
                this.GetBehavior(CirnoGame.FlightControls).maxSpeed *= 0.5;

                this.GravityEnabled = false;
                this.Team = 2;
                this.HP = 2;
            }
        },
        methods: {
            Update: function () {
                CirnoGame.PlatformerEntity.prototype.Update.call(this);
                this.Ani.Flipped = (this.Hspeed < 0);
                this.Ani.ImageSpeed = (Math.abs(this.Hspeed) + Math.abs(this.Vspeed)) * 0.125;
            },
            ChangeAni: function (animation, reset) {
                if (reset === void 0) { reset = false; }
                if (Bridge.referenceEquals(this.animation, animation)) {
                    return;
                }
                if (this.Ani == null) {
                    this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader.Get(System.String.concat("images/enemies/mrghost", animation)));
                } else {
                    this.Ani.ChangeAnimation(CirnoGame.AnimationLoader.Get(System.String.concat("images/enemies/mrghost", animation)), reset);
                }
                this.animation = animation;
            },
            onDamaged: function (source, amount) {
                //throw new NotImplementedException();
                //if (!(source is MRGhosty))
                {
                    this.HP -= (amount / this.defensepower);
                }
                /* else
                {
                   Helper.Log("ghosts are allergic to themselves???");
                }*/
            },
            onDeath: function (source) {
                //throw new NotImplementedException();
                this.Alive = false;
                var P = new CirnoGame.PointItem(this.Game);
                P.Position.CopyFrom(this.Position);
                P.collectionDelay = (Bridge.Int.div(P.collectionDelay, 2)) | 0;
                this.Game.AddEntity(P);
                if (Math.random() < 0.15) {
                    P = new CirnoGame.HealingItem(this.Game);
                    P.Position.CopyFrom(this.Position);
                    P.Vspeed = -2;
                    P.collectionDelay = (Bridge.Int.div(P.collectionDelay, 2)) | 0;
                    this.Game.AddEntity(P);
                }
            },
            onKill: function (combatant) {
                //throw new NotImplementedException();
            },
            ontouchDamage: function (target) {
                //throw new NotImplementedException();
                return true;
            }
        }
    });

    Bridge.define("CirnoGame.PlayerCharacter", {
        inherits: [CirnoGame.PlatformerEntity,CirnoGame.ICombatant],
        fields: {
            animation: null,
            shoottime: 0,
            prefix: null,
            newInput: false,
            tapTimer: null,
            shootRecharge: 0,
            turntime: 0,
            score: 0,
            orbs: 0,
            keys: 0,
            energyRecharge: 0,
            maxEnergy: 0,
            energy: 0,
            maxHP: 0,
            regenRate: 0,
            SpawnLocation: null,
            lives: 0,
            frame: 0,
            digpower: 0,
            attackpower: 0,
            defensepower: 0,
            invincibilitytime: 0,
            blockprice: 0,
            invincibilitymod: 0,
            currentshot: 0,
            shotdelay: 0,
            currentshotdelay: 0,
            totalshots: 0,
            MSG: null
        },
        props: {
            Team: 0,
            HP: 0,
            PointsForKilling: {
                get: function () {
                    return 300;
                }
            },
            TargetPriority: {
                get: function () {
                    return 0.7;
                }
            }
        },
        alias: [
            "Team", "CirnoGame$ICombatant$Team",
            "HP", "CirnoGame$ICombatant$HP",
            "PointsForKilling", "CirnoGame$ICombatant$PointsForKilling",
            "TargetPriority", "CirnoGame$ICombatant$TargetPriority",
            "onDamaged", "CirnoGame$ICombatant$onDamaged",
            "onDeath", "CirnoGame$ICombatant$onDeath",
            "onKill", "CirnoGame$ICombatant$onKill"
        ],
        ctors: {
            init: function () {
                this.animation = "???";
                this.shoottime = 0;
                this.prefix = "";
                this.shootRecharge = 0;
                this.turntime = 0;
                this.score = 0;
                this.orbs = 0;
                this.keys = 0;
                this.energyRecharge = 0.022;
                this.maxEnergy = 4;
                this.energy = 4;
                this.maxHP = 20;
                this.regenRate = 1.0;
                this.SpawnLocation = new CirnoGame.Vector2();
                this.lives = 3;
                this.frame = 0;
                this.digpower = 1.0;
                this.attackpower = 1.0;
                this.defensepower = 1.0;
                this.invincibilitytime = 0;
                this.blockprice = 4.0;
                this.invincibilitymod = 1.0;
                this.currentshot = 0;
                this.shotdelay = 5;
                this.currentshotdelay = 0;
                this.totalshots = 1;
            },
            ctor: function (game) {
                this.$initialize();
                CirnoGame.PlatformerEntity.ctor.call(this, game);
                this.ChangeAni("stand");
                this.AddBehavior(CirnoGame.PlatformerControls);
                //AddBehavior(new PlatformerControls(this));
                this.tapTimer = System.Array.init(this.Controller.length, 0, System.Int32);
                this.Team = 0;
                this.HP = this.maxHP;
                this.MSG = new CirnoGame.FloatingMessage(game, "");
                this.MSG.Text.TextColor = "#FFFFFF";
                //MSG.ChangeText("hello world");
                this.MSG.autokill = false;
                game.AddEntity(this.MSG);
                this.MSG.RemovedOnLevelEnd = false;
                this.RemovedOnLevelEnd = false;
            }
        },
        methods: {
            MoveToNewSpawn: function (NewSpawnLocation) {
                this.SpawnLocation.CopyFrom(NewSpawnLocation);
                this.Position.CopyFrom(this.SpawnLocation);
            },
            shoot: function () {
                if (this.energy < 1) {
                    return;
                }
                if (this.shoottime < 1) {
                    this.prefix = "s";
                    this.ChangeAni(System.String.concat(this.prefix, this.animation));
                }
                if (this.shootRecharge <= 0) {
                    this.currentshot = 1;
                    this.DoShot();
                    this.energy -= 1;
                    //shootRecharge = 12;

                    this.currentshotdelay = 0;
                    //shootRecharge = 20;
                    this.shootRecharge = 16;

                }
                this.shoottime = 50;
                //shoottime = 40;
                this.turntime = 0;

            },
            DoShot: function () {
                var PB = new CirnoGame.PlayerBullet(this.Game, this, "Images/misc/crystal");
                PB.Hspeed = this.Ani.Flipped ? -2.5 : 2.5;
                PB.x = this.x + (this.Ani.Flipped ? -4 : 12);
                PB.y = this.y + 10;
                if (!this.Controller[System.Array.index(0, this.Controller)] && !this.Controller[System.Array.index(1, this.Controller)]) {
                    if (this.Controller[System.Array.index(2, this.Controller)]) {
                        PB.Hspeed *= 0.8;
                        PB.Vspeed = -Math.abs(PB.Hspeed);
                        PB.Hspeed *= 0.6;
                    } else if (this.Controller[System.Array.index(3, this.Controller)]) {
                        PB.Hspeed *= 0.8;
                        PB.Vspeed = Math.abs(PB.Hspeed);
                        PB.Hspeed *= 0.6;
                    }
                } else {
                    if (this.Controller[System.Array.index(2, this.Controller)]) {
                        PB.Hspeed *= 0.9;
                        PB.Vspeed = -Math.abs(PB.Hspeed * 0.7);

                    } else if (this.Controller[System.Array.index(3, this.Controller)]) {
                        PB.Hspeed *= 0.9;
                        PB.Vspeed = Math.abs(PB.Hspeed * 0.7);
                    }
                }
                PB.x -= PB.Hspeed;
                PB.y -= PB.Vspeed;
                PB.attacksterrain = this.currentshot === 1;
                PB.digpower = (this.digpower) * 0.6667;
                PB.touchDamage = this.attackpower / (((this.totalshots - 1.0) / 2.0) + 1.0);
                this.Game.AddEntity(PB);
            },
            Update: function () {
                CirnoGame.PlatformerEntity.prototype.Update.call(this);
                this.MSG.Position.X = this.Position.X;
                this.MSG.Position.Y = this.Position.Y - 10;

                if (this.shoottime > 0) {
                    this.shoottime = (this.shoottime - 1) | 0;
                    if (this.shoottime < 1) {
                        if (Bridge.referenceEquals("" + String.fromCharCode(this.animation.charCodeAt(0)), this.prefix)) {
                            this.ChangeAni(this.animation.substr(1));
                        }
                        this.prefix = "";
                    }
                }

                if (this.onGround) {
                    if (this.Hspeed !== 0) {
                        this.ChangeAni(System.String.concat(this.prefix, "walk"));
                    } else {
                        this.ChangeAni(System.String.concat(this.prefix, "stand"));
                    }
                    this.Ani.ImageSpeed = Math.abs(this.Hspeed * 0.125);
                    //Ani.ImageSpeed = Ani.Flipped ? Hspeed * 0.125f : -Hspeed * 0.125f;
                    //Ani.ImageSpeed = (Ani.Flipped ? -Hspeed : Hspeed) * 0.125f;
                } else {
                    this.ChangeAni(System.String.concat(this.prefix, "jump"));
                    //Ani.ImageSpeed = (float)Math.Abs(Vspeed * 0.125);
                    this.Ani.ImageSpeed = 0.15 + ((Math.abs(this.Hspeed) + Math.abs(this.Vspeed)) * 0.7);
                }
                if (this.Ani.Flipped !== this.Hspeed < 0 || (this.Hspeed === 0 && this.onGround)) {
                    this.turntime = (this.turntime + 1) | 0;
                } else {
                    this.turntime = 0;
                }

                //if (LController[3] != Controller[3] && Controller[3])
                /* if (Pressed(3) || Pressed(4) || Pressed(5) || Pressed(6))
                {
                   shoot();
                }*/
                if (this.currentshot < this.totalshots) {
                    this.currentshotdelay = (this.currentshotdelay + 1) | 0;
                    if (this.currentshotdelay >= this.shotdelay) {
                        this.currentshotdelay = 0;
                        this.currentshot = (this.currentshot + 1) | 0;
                        this.DoShot();
                    }
                } else {
                    if (this.shootRecharge > 0) {
                        this.shootRecharge = (this.shootRecharge - 1) | 0;
                    }
                    this.energy = Math.min(this.energy + this.energyRecharge, this.maxEnergy);
                }
                if (this.Controller[System.Array.index(4, this.Controller)]) {
                    this.turntime = 0;
                }
                //if (Pressed(4))
                if (this.Controller[System.Array.index(4, this.Controller)]) {
                    this.shoot();
                }
                if (this.Pressed(6)) {
                    this.PlaceBlock();
                }

                this.UpdateController();
                //if (turntime > 22 && Hspeed != 0)
                //if (turntime > 18 && Hspeed != 0)
                //if (turntime > 14 && Hspeed != 0)
                if (this.turntime > 8 && this.Hspeed !== 0) {
                    this.Ani.Flipped = this.Hspeed < 0;
                }
                if (this.invincibilitytime > 0) {
                    //Ani.Alpha = Ani.Alpha == 0 ? 1 : 0;
                    if ((this.frame & 1) > 0) {
                        this.Visible = !this.Visible;
                    }
                    this.invincibilitytime -= 1;
                } else {
                    this.Visible = true;
                }
                //if (Game.timeRemaining > 0 && HP>0 && invincibilitytime<=0 && HP<maxHP && Game.timeRemaining < Game.defaultTimeRemaining)
                /* if (Game.timeRemaining > 0 && HP > 0 && invincibilitytime <= 0 && HP < maxHP && Game.timeRemaining < Game.lastStand)
                {
                   var staticMod = 0.005f;
                   var HPRate = 1-(HP / maxHP);
                   var TimeRate = 1-(Game.timeRemaining / Game.defaultTimeRemaining);
                   var rate = (HPRate * TimeRate * regenRate);
                   HP += (rate * staticMod);
                   if (HP > maxHP)
                   {
                       HP = maxHP;
                   }
                }*/


                this.frame = (this.frame + 1) | 0;
            },
            PlaceBlock: function () {
                var price = 1000 * this.blockprice;
                if (this.Game.timeRemaining < this.blockprice) {
                    return;
                }
                var W = this.Width / 3;
                var Y = this.Height;
                var T = this.Game.TM.CheckForTile(CirnoGame.Vector2.Add$1(this.Position, this.Width / 2, Y));
                if (T != null && (!T.enabled || !T.solid)) {
                    T.solid = true;
                    T.Breakable = true;
                    T.enabled = true;
                    T.texture = 4;
                    T.UpdateTile();
                    T.HP = T.maxHP * 2;
                    this.Game.timeRemaining -= price;
                }
            },
            ChangeAni: function (animation, reset) {
                if (reset === void 0) { reset = false; }
                if (Bridge.referenceEquals(this.animation, animation)) {
                    return;
                }
                if (this.Ani == null) {
                    this.Ani = new CirnoGame.Animation(CirnoGame.AnimationLoader.Get(System.String.concat("images/cirno/", animation)));
                } else {
                    this.Ani.ChangeAnimation(CirnoGame.AnimationLoader.Get(System.String.concat("images/cirno/", animation)), reset);
                }
                if (!Bridge.referenceEquals(this.animation, "stand")) {
                    this.turntime = 0;
                }
                this.animation = animation;
            },
            UpdateController: function () {
                this.newInput = false;
                var i = 0;
                while (i < this.Controller.length) {
                    this.tapTimer[System.Array.index(i, this.tapTimer)] = (this.tapTimer[System.Array.index(i, this.tapTimer)] + 1) | 0;
                    if (this.Controller[System.Array.index(i, this.Controller)] && !this.LController[System.Array.index(i, this.LController)]) {
                        this.tapTimer[System.Array.index(i, this.tapTimer)] = 0;
                        this.newInput = true;
                    }
                    this.LController[System.Array.index(i, this.LController)] = this.Controller[System.Array.index(i, this.Controller)];
                    i = (i + 1) | 0;
                }
                /* if (_lAimAngle != _aimAngle)
                {
                   newInput = true;
                }
                _lAimAngle = _aimAngle;*/
                if (this.newInput) {
                    //GetBehavior<NetworkSync>().Sync();
                }
            },
            onDamaged: function (source, amount) {
                //throw new NotImplementedException();
                if (this.invincibilitytime <= 0) {
                    this.HP -= (amount / this.defensepower);
                    this.invincibilitytime = 50 * this.invincibilitymod;
                }
            },
            onRemove: function () {
                CirnoGame.PlatformerEntity.prototype.onRemove.call(this);
                this.Game.RemoveEntity(this.MSG);
            },
            onDeath: function (source) {
                //throw new NotImplementedException();
                this.invincibilitytime *= 3.0;

                if (Bridge.referenceEquals(this.Game.player, this)) {
                    //if (Game.timeRemaining > 0)
                    if (this.Game.timeRemaining >= this.Game.baseLifeCost) {
                        this.Position.CopyFrom(this.SpawnLocation);
                        this.HP = this.maxHP;
                        this.Game.timeRemaining -= this.Game.baseLifeCost;
                        //Game.timeRemaining *= 0.85f;
                        //Game.timeRemaining *= 0.6667f;
                        this.Game.camera.instawarp = true;
                        this.Game.skiprender = true;
                    } else {
                        this.Game.DoGameOver();
                    }
                } else {
                    this.Position.CopyFrom(this.SpawnLocation);
                    this.HP = this.maxHP;
                }
            },
            onKill: function (combatant) {
                //throw new NotImplementedException();
            },
            GetHitbox: function () {
                //return base.GetHitbox();
                if (this.Ani != null && this.Ani.CurrentImage != null) {
                    /* var size = 4;
                    var W = Ani.CurrentImage.Width / size;
                    var H = Ani.CurrentImage.Height / size;
                    var W4 = (Ani.CurrentImage.Width / 2) - (W / 2);
                    var H4 = (Ani.CurrentImage.Height / 2) - (H / 2);
                    return new Rectangle(Ani.X+W4, Ani.Y+H4, W, H);*/
                    return new CirnoGame.Rectangle(this.Ani.X + (this.Ani.CurrentImage.width / 2.0), this.Ani.Y + (this.Ani.CurrentImage.height / 2.0), 1, 1);
                }
                return null;
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
